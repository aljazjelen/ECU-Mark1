
ECU_Mark1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e70  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  08006ff8  08006ff8  00016ff8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800702c  0800702c  0002008c  2**0
                  CONTENTS
  4 .ARM          00000008  0800702c  0800702c  0001702c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007034  08007034  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007034  08007034  00017034  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007038  08007038  00017038  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  0800703c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000504  2000008c  080070c8  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000590  080070c8  00020590  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012e28  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002b9e  00000000  00000000  00032ee4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001028  00000000  00000000  00035a88  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e98  00000000  00000000  00036ab0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00021797  00000000  00000000  00037948  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d6ca  00000000  00000000  000590df  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cdfec  00000000  00000000  000667a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00134795  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000042c8  00000000  00000000  00134810  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000008c 	.word	0x2000008c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006fe0 	.word	0x08006fe0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000090 	.word	0x20000090
 80001c4:	08006fe0 	.word	0x08006fe0

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000316:	f1a4 0401 	sub.w	r4, r4, #1
 800031a:	d1e9      	bne.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_d2f>:
 8000a84:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a88:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a8c:	bf24      	itt	cs
 8000a8e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a92:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a96:	d90d      	bls.n	8000ab4 <__aeabi_d2f+0x30>
 8000a98:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a9c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aa8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aac:	bf08      	it	eq
 8000aae:	f020 0001 	biceq.w	r0, r0, #1
 8000ab2:	4770      	bx	lr
 8000ab4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ab8:	d121      	bne.n	8000afe <__aeabi_d2f+0x7a>
 8000aba:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000abe:	bfbc      	itt	lt
 8000ac0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac4:	4770      	bxlt	lr
 8000ac6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aca:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ace:	f1c2 0218 	rsb	r2, r2, #24
 8000ad2:	f1c2 0c20 	rsb	ip, r2, #32
 8000ad6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ada:	fa20 f002 	lsr.w	r0, r0, r2
 8000ade:	bf18      	it	ne
 8000ae0:	f040 0001 	orrne.w	r0, r0, #1
 8000ae4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000aec:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af0:	ea40 000c 	orr.w	r0, r0, ip
 8000af4:	fa23 f302 	lsr.w	r3, r3, r2
 8000af8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000afc:	e7cc      	b.n	8000a98 <__aeabi_d2f+0x14>
 8000afe:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b02:	d107      	bne.n	8000b14 <__aeabi_d2f+0x90>
 8000b04:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b08:	bf1e      	ittt	ne
 8000b0a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b0e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b12:	4770      	bxne	lr
 8000b14:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b18:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b1c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop

08000b24 <__aeabi_uldivmod>:
 8000b24:	b953      	cbnz	r3, 8000b3c <__aeabi_uldivmod+0x18>
 8000b26:	b94a      	cbnz	r2, 8000b3c <__aeabi_uldivmod+0x18>
 8000b28:	2900      	cmp	r1, #0
 8000b2a:	bf08      	it	eq
 8000b2c:	2800      	cmpeq	r0, #0
 8000b2e:	bf1c      	itt	ne
 8000b30:	f04f 31ff 	movne.w	r1, #4294967295
 8000b34:	f04f 30ff 	movne.w	r0, #4294967295
 8000b38:	f000 b972 	b.w	8000e20 <__aeabi_idiv0>
 8000b3c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b40:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b44:	f000 f806 	bl	8000b54 <__udivmoddi4>
 8000b48:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b4c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b50:	b004      	add	sp, #16
 8000b52:	4770      	bx	lr

08000b54 <__udivmoddi4>:
 8000b54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b58:	9e08      	ldr	r6, [sp, #32]
 8000b5a:	4604      	mov	r4, r0
 8000b5c:	4688      	mov	r8, r1
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d14b      	bne.n	8000bfa <__udivmoddi4+0xa6>
 8000b62:	428a      	cmp	r2, r1
 8000b64:	4615      	mov	r5, r2
 8000b66:	d967      	bls.n	8000c38 <__udivmoddi4+0xe4>
 8000b68:	fab2 f282 	clz	r2, r2
 8000b6c:	b14a      	cbz	r2, 8000b82 <__udivmoddi4+0x2e>
 8000b6e:	f1c2 0720 	rsb	r7, r2, #32
 8000b72:	fa01 f302 	lsl.w	r3, r1, r2
 8000b76:	fa20 f707 	lsr.w	r7, r0, r7
 8000b7a:	4095      	lsls	r5, r2
 8000b7c:	ea47 0803 	orr.w	r8, r7, r3
 8000b80:	4094      	lsls	r4, r2
 8000b82:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b86:	0c23      	lsrs	r3, r4, #16
 8000b88:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b8c:	fa1f fc85 	uxth.w	ip, r5
 8000b90:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b94:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b98:	fb07 f10c 	mul.w	r1, r7, ip
 8000b9c:	4299      	cmp	r1, r3
 8000b9e:	d909      	bls.n	8000bb4 <__udivmoddi4+0x60>
 8000ba0:	18eb      	adds	r3, r5, r3
 8000ba2:	f107 30ff 	add.w	r0, r7, #4294967295
 8000ba6:	f080 811b 	bcs.w	8000de0 <__udivmoddi4+0x28c>
 8000baa:	4299      	cmp	r1, r3
 8000bac:	f240 8118 	bls.w	8000de0 <__udivmoddi4+0x28c>
 8000bb0:	3f02      	subs	r7, #2
 8000bb2:	442b      	add	r3, r5
 8000bb4:	1a5b      	subs	r3, r3, r1
 8000bb6:	b2a4      	uxth	r4, r4
 8000bb8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000bbc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000bc0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bc4:	fb00 fc0c 	mul.w	ip, r0, ip
 8000bc8:	45a4      	cmp	ip, r4
 8000bca:	d909      	bls.n	8000be0 <__udivmoddi4+0x8c>
 8000bcc:	192c      	adds	r4, r5, r4
 8000bce:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bd2:	f080 8107 	bcs.w	8000de4 <__udivmoddi4+0x290>
 8000bd6:	45a4      	cmp	ip, r4
 8000bd8:	f240 8104 	bls.w	8000de4 <__udivmoddi4+0x290>
 8000bdc:	3802      	subs	r0, #2
 8000bde:	442c      	add	r4, r5
 8000be0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000be4:	eba4 040c 	sub.w	r4, r4, ip
 8000be8:	2700      	movs	r7, #0
 8000bea:	b11e      	cbz	r6, 8000bf4 <__udivmoddi4+0xa0>
 8000bec:	40d4      	lsrs	r4, r2
 8000bee:	2300      	movs	r3, #0
 8000bf0:	e9c6 4300 	strd	r4, r3, [r6]
 8000bf4:	4639      	mov	r1, r7
 8000bf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bfa:	428b      	cmp	r3, r1
 8000bfc:	d909      	bls.n	8000c12 <__udivmoddi4+0xbe>
 8000bfe:	2e00      	cmp	r6, #0
 8000c00:	f000 80eb 	beq.w	8000dda <__udivmoddi4+0x286>
 8000c04:	2700      	movs	r7, #0
 8000c06:	e9c6 0100 	strd	r0, r1, [r6]
 8000c0a:	4638      	mov	r0, r7
 8000c0c:	4639      	mov	r1, r7
 8000c0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c12:	fab3 f783 	clz	r7, r3
 8000c16:	2f00      	cmp	r7, #0
 8000c18:	d147      	bne.n	8000caa <__udivmoddi4+0x156>
 8000c1a:	428b      	cmp	r3, r1
 8000c1c:	d302      	bcc.n	8000c24 <__udivmoddi4+0xd0>
 8000c1e:	4282      	cmp	r2, r0
 8000c20:	f200 80fa 	bhi.w	8000e18 <__udivmoddi4+0x2c4>
 8000c24:	1a84      	subs	r4, r0, r2
 8000c26:	eb61 0303 	sbc.w	r3, r1, r3
 8000c2a:	2001      	movs	r0, #1
 8000c2c:	4698      	mov	r8, r3
 8000c2e:	2e00      	cmp	r6, #0
 8000c30:	d0e0      	beq.n	8000bf4 <__udivmoddi4+0xa0>
 8000c32:	e9c6 4800 	strd	r4, r8, [r6]
 8000c36:	e7dd      	b.n	8000bf4 <__udivmoddi4+0xa0>
 8000c38:	b902      	cbnz	r2, 8000c3c <__udivmoddi4+0xe8>
 8000c3a:	deff      	udf	#255	; 0xff
 8000c3c:	fab2 f282 	clz	r2, r2
 8000c40:	2a00      	cmp	r2, #0
 8000c42:	f040 808f 	bne.w	8000d64 <__udivmoddi4+0x210>
 8000c46:	1b49      	subs	r1, r1, r5
 8000c48:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c4c:	fa1f f885 	uxth.w	r8, r5
 8000c50:	2701      	movs	r7, #1
 8000c52:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c56:	0c23      	lsrs	r3, r4, #16
 8000c58:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c5c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c60:	fb08 f10c 	mul.w	r1, r8, ip
 8000c64:	4299      	cmp	r1, r3
 8000c66:	d907      	bls.n	8000c78 <__udivmoddi4+0x124>
 8000c68:	18eb      	adds	r3, r5, r3
 8000c6a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c6e:	d202      	bcs.n	8000c76 <__udivmoddi4+0x122>
 8000c70:	4299      	cmp	r1, r3
 8000c72:	f200 80cd 	bhi.w	8000e10 <__udivmoddi4+0x2bc>
 8000c76:	4684      	mov	ip, r0
 8000c78:	1a59      	subs	r1, r3, r1
 8000c7a:	b2a3      	uxth	r3, r4
 8000c7c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c80:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c84:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c88:	fb08 f800 	mul.w	r8, r8, r0
 8000c8c:	45a0      	cmp	r8, r4
 8000c8e:	d907      	bls.n	8000ca0 <__udivmoddi4+0x14c>
 8000c90:	192c      	adds	r4, r5, r4
 8000c92:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c96:	d202      	bcs.n	8000c9e <__udivmoddi4+0x14a>
 8000c98:	45a0      	cmp	r8, r4
 8000c9a:	f200 80b6 	bhi.w	8000e0a <__udivmoddi4+0x2b6>
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	eba4 0408 	sub.w	r4, r4, r8
 8000ca4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ca8:	e79f      	b.n	8000bea <__udivmoddi4+0x96>
 8000caa:	f1c7 0c20 	rsb	ip, r7, #32
 8000cae:	40bb      	lsls	r3, r7
 8000cb0:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000cb4:	ea4e 0e03 	orr.w	lr, lr, r3
 8000cb8:	fa01 f407 	lsl.w	r4, r1, r7
 8000cbc:	fa20 f50c 	lsr.w	r5, r0, ip
 8000cc0:	fa21 f30c 	lsr.w	r3, r1, ip
 8000cc4:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000cc8:	4325      	orrs	r5, r4
 8000cca:	fbb3 f9f8 	udiv	r9, r3, r8
 8000cce:	0c2c      	lsrs	r4, r5, #16
 8000cd0:	fb08 3319 	mls	r3, r8, r9, r3
 8000cd4:	fa1f fa8e 	uxth.w	sl, lr
 8000cd8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000cdc:	fb09 f40a 	mul.w	r4, r9, sl
 8000ce0:	429c      	cmp	r4, r3
 8000ce2:	fa02 f207 	lsl.w	r2, r2, r7
 8000ce6:	fa00 f107 	lsl.w	r1, r0, r7
 8000cea:	d90b      	bls.n	8000d04 <__udivmoddi4+0x1b0>
 8000cec:	eb1e 0303 	adds.w	r3, lr, r3
 8000cf0:	f109 30ff 	add.w	r0, r9, #4294967295
 8000cf4:	f080 8087 	bcs.w	8000e06 <__udivmoddi4+0x2b2>
 8000cf8:	429c      	cmp	r4, r3
 8000cfa:	f240 8084 	bls.w	8000e06 <__udivmoddi4+0x2b2>
 8000cfe:	f1a9 0902 	sub.w	r9, r9, #2
 8000d02:	4473      	add	r3, lr
 8000d04:	1b1b      	subs	r3, r3, r4
 8000d06:	b2ad      	uxth	r5, r5
 8000d08:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d0c:	fb08 3310 	mls	r3, r8, r0, r3
 8000d10:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d14:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d18:	45a2      	cmp	sl, r4
 8000d1a:	d908      	bls.n	8000d2e <__udivmoddi4+0x1da>
 8000d1c:	eb1e 0404 	adds.w	r4, lr, r4
 8000d20:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d24:	d26b      	bcs.n	8000dfe <__udivmoddi4+0x2aa>
 8000d26:	45a2      	cmp	sl, r4
 8000d28:	d969      	bls.n	8000dfe <__udivmoddi4+0x2aa>
 8000d2a:	3802      	subs	r0, #2
 8000d2c:	4474      	add	r4, lr
 8000d2e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d32:	fba0 8902 	umull	r8, r9, r0, r2
 8000d36:	eba4 040a 	sub.w	r4, r4, sl
 8000d3a:	454c      	cmp	r4, r9
 8000d3c:	46c2      	mov	sl, r8
 8000d3e:	464b      	mov	r3, r9
 8000d40:	d354      	bcc.n	8000dec <__udivmoddi4+0x298>
 8000d42:	d051      	beq.n	8000de8 <__udivmoddi4+0x294>
 8000d44:	2e00      	cmp	r6, #0
 8000d46:	d069      	beq.n	8000e1c <__udivmoddi4+0x2c8>
 8000d48:	ebb1 050a 	subs.w	r5, r1, sl
 8000d4c:	eb64 0403 	sbc.w	r4, r4, r3
 8000d50:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d54:	40fd      	lsrs	r5, r7
 8000d56:	40fc      	lsrs	r4, r7
 8000d58:	ea4c 0505 	orr.w	r5, ip, r5
 8000d5c:	e9c6 5400 	strd	r5, r4, [r6]
 8000d60:	2700      	movs	r7, #0
 8000d62:	e747      	b.n	8000bf4 <__udivmoddi4+0xa0>
 8000d64:	f1c2 0320 	rsb	r3, r2, #32
 8000d68:	fa20 f703 	lsr.w	r7, r0, r3
 8000d6c:	4095      	lsls	r5, r2
 8000d6e:	fa01 f002 	lsl.w	r0, r1, r2
 8000d72:	fa21 f303 	lsr.w	r3, r1, r3
 8000d76:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d7a:	4338      	orrs	r0, r7
 8000d7c:	0c01      	lsrs	r1, r0, #16
 8000d7e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d82:	fa1f f885 	uxth.w	r8, r5
 8000d86:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d8a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d8e:	fb07 f308 	mul.w	r3, r7, r8
 8000d92:	428b      	cmp	r3, r1
 8000d94:	fa04 f402 	lsl.w	r4, r4, r2
 8000d98:	d907      	bls.n	8000daa <__udivmoddi4+0x256>
 8000d9a:	1869      	adds	r1, r5, r1
 8000d9c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000da0:	d22f      	bcs.n	8000e02 <__udivmoddi4+0x2ae>
 8000da2:	428b      	cmp	r3, r1
 8000da4:	d92d      	bls.n	8000e02 <__udivmoddi4+0x2ae>
 8000da6:	3f02      	subs	r7, #2
 8000da8:	4429      	add	r1, r5
 8000daa:	1acb      	subs	r3, r1, r3
 8000dac:	b281      	uxth	r1, r0
 8000dae:	fbb3 f0fe 	udiv	r0, r3, lr
 8000db2:	fb0e 3310 	mls	r3, lr, r0, r3
 8000db6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dba:	fb00 f308 	mul.w	r3, r0, r8
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d907      	bls.n	8000dd2 <__udivmoddi4+0x27e>
 8000dc2:	1869      	adds	r1, r5, r1
 8000dc4:	f100 3cff 	add.w	ip, r0, #4294967295
 8000dc8:	d217      	bcs.n	8000dfa <__udivmoddi4+0x2a6>
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d915      	bls.n	8000dfa <__udivmoddi4+0x2a6>
 8000dce:	3802      	subs	r0, #2
 8000dd0:	4429      	add	r1, r5
 8000dd2:	1ac9      	subs	r1, r1, r3
 8000dd4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000dd8:	e73b      	b.n	8000c52 <__udivmoddi4+0xfe>
 8000dda:	4637      	mov	r7, r6
 8000ddc:	4630      	mov	r0, r6
 8000dde:	e709      	b.n	8000bf4 <__udivmoddi4+0xa0>
 8000de0:	4607      	mov	r7, r0
 8000de2:	e6e7      	b.n	8000bb4 <__udivmoddi4+0x60>
 8000de4:	4618      	mov	r0, r3
 8000de6:	e6fb      	b.n	8000be0 <__udivmoddi4+0x8c>
 8000de8:	4541      	cmp	r1, r8
 8000dea:	d2ab      	bcs.n	8000d44 <__udivmoddi4+0x1f0>
 8000dec:	ebb8 0a02 	subs.w	sl, r8, r2
 8000df0:	eb69 020e 	sbc.w	r2, r9, lr
 8000df4:	3801      	subs	r0, #1
 8000df6:	4613      	mov	r3, r2
 8000df8:	e7a4      	b.n	8000d44 <__udivmoddi4+0x1f0>
 8000dfa:	4660      	mov	r0, ip
 8000dfc:	e7e9      	b.n	8000dd2 <__udivmoddi4+0x27e>
 8000dfe:	4618      	mov	r0, r3
 8000e00:	e795      	b.n	8000d2e <__udivmoddi4+0x1da>
 8000e02:	4667      	mov	r7, ip
 8000e04:	e7d1      	b.n	8000daa <__udivmoddi4+0x256>
 8000e06:	4681      	mov	r9, r0
 8000e08:	e77c      	b.n	8000d04 <__udivmoddi4+0x1b0>
 8000e0a:	3802      	subs	r0, #2
 8000e0c:	442c      	add	r4, r5
 8000e0e:	e747      	b.n	8000ca0 <__udivmoddi4+0x14c>
 8000e10:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e14:	442b      	add	r3, r5
 8000e16:	e72f      	b.n	8000c78 <__udivmoddi4+0x124>
 8000e18:	4638      	mov	r0, r7
 8000e1a:	e708      	b.n	8000c2e <__udivmoddi4+0xda>
 8000e1c:	4637      	mov	r7, r6
 8000e1e:	e6e9      	b.n	8000bf4 <__udivmoddi4+0xa0>

08000e20 <__aeabi_idiv0>:
 8000e20:	4770      	bx	lr
 8000e22:	bf00      	nop

08000e24 <ADC_Init_TriggerTIM>:
ADC_Trig_TIM_Config ADC_TriggerCfg;
ADC_Config ADC1_Cfg;
ADC_Config ADC2_Cfg;

// INITS =======================================================================================
void ADC_Init_TriggerTIM(TIM_HandleTypeDef *Handler, uint8_t Channel, uint8_t ActiveChannel){
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
 8000e2c:	460b      	mov	r3, r1
 8000e2e:	70fb      	strb	r3, [r7, #3]
 8000e30:	4613      	mov	r3, r2
 8000e32:	70bb      	strb	r3, [r7, #2]
	HAL_TIM_Base_Start_IT(Handler);
 8000e34:	6878      	ldr	r0, [r7, #4]
 8000e36:	f004 fe0e 	bl	8005a56 <HAL_TIM_Base_Start_IT>
	HAL_TIM_OC_Start_IT(Handler, Channel);
 8000e3a:	78fb      	ldrb	r3, [r7, #3]
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	6878      	ldr	r0, [r7, #4]
 8000e40:	f004 fe62 	bl	8005b08 <HAL_TIM_OC_Start_IT>
}
 8000e44:	bf00      	nop
 8000e46:	3708      	adds	r7, #8
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}

08000e4c <ADC_Init_ADC1>:

void ADC_Init_ADC1(ADC_HandleTypeDef *hadc){
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
	ADC1_Cfg.Handler = hadc;
 8000e54:	4a08      	ldr	r2, [pc, #32]	; (8000e78 <ADC_Init_ADC1+0x2c>)
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	6053      	str	r3, [r2, #4]
	ADC1_Cfg.channels = ADC1_CHANNELS;
 8000e5a:	4b07      	ldr	r3, [pc, #28]	; (8000e78 <ADC_Init_ADC1+0x2c>)
 8000e5c:	2202      	movs	r2, #2
 8000e5e:	721a      	strb	r2, [r3, #8]
	ADC1_Cfg.id = 1;
 8000e60:	4b05      	ldr	r3, [pc, #20]	; (8000e78 <ADC_Init_ADC1+0x2c>)
 8000e62:	2201      	movs	r2, #1
 8000e64:	701a      	strb	r2, [r3, #0]
	HAL_ADC_Start_DMA(hadc, ADC1_Buffer, ADC1_CHANNELS);
 8000e66:	2202      	movs	r2, #2
 8000e68:	4904      	ldr	r1, [pc, #16]	; (8000e7c <ADC_Init_ADC1+0x30>)
 8000e6a:	6878      	ldr	r0, [r7, #4]
 8000e6c:	f002 fbe8 	bl	8003640 <HAL_ADC_Start_DMA>
}
 8000e70:	bf00      	nop
 8000e72:	3708      	adds	r7, #8
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	200000e0 	.word	0x200000e0
 8000e7c:	200000f4 	.word	0x200000f4

08000e80 <ADC1_getVal>:

// METHODS =====================================================================================
extern uint16_t ADC1_getVal(ADC1_Pinout ADC1_Channel){return ADC1_Buffer[ADC1_Channel];}
 8000e80:	b480      	push	{r7}
 8000e82:	b083      	sub	sp, #12
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	4603      	mov	r3, r0
 8000e88:	71fb      	strb	r3, [r7, #7]
 8000e8a:	79fb      	ldrb	r3, [r7, #7]
 8000e8c:	4a04      	ldr	r2, [pc, #16]	; (8000ea0 <ADC1_getVal+0x20>)
 8000e8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e92:	b29b      	uxth	r3, r3
 8000e94:	4618      	mov	r0, r3
 8000e96:	370c      	adds	r7, #12
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr
 8000ea0:	200000f4 	.word	0x200000f4

08000ea4 <Cam_Init>:
Cam_HallSensor_TIM_Config Cam_HallTIM; 	// Global Configuration of Channel and TIM for Hall Sensor
int Cam_HalfCycle = 0;					// Cam-Crank Cyle identifier. When Camshaft indicates a start of new cycle, ID is set to 0 [0-360]. ID can be set to 1 [360-720] when the crankshaft rotation restarts


/* Initialization of variables and TIM related start-up */
void Cam_Init(TIM_HandleTypeDef *Handler, uint8_t Channel, uint8_t ActiveChannel){
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
 8000eac:	460b      	mov	r3, r1
 8000eae:	70fb      	strb	r3, [r7, #3]
 8000eb0:	4613      	mov	r3, r2
 8000eb2:	70bb      	strb	r3, [r7, #2]
	Cam_HallTIM.Handler = Handler;
 8000eb4:	4a0a      	ldr	r2, [pc, #40]	; (8000ee0 <Cam_Init+0x3c>)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	6013      	str	r3, [r2, #0]
	Cam_HallTIM.Channel = Channel;
 8000eba:	4a09      	ldr	r2, [pc, #36]	; (8000ee0 <Cam_Init+0x3c>)
 8000ebc:	78fb      	ldrb	r3, [r7, #3]
 8000ebe:	7113      	strb	r3, [r2, #4]
	Cam_HallTIM.ActiveChannel = ActiveChannel;
 8000ec0:	4a07      	ldr	r2, [pc, #28]	; (8000ee0 <Cam_Init+0x3c>)
 8000ec2:	78bb      	ldrb	r3, [r7, #2]
 8000ec4:	7153      	strb	r3, [r2, #5]
	HAL_TIM_Base_Start_IT(Handler);
 8000ec6:	6878      	ldr	r0, [r7, #4]
 8000ec8:	f004 fdc5 	bl	8005a56 <HAL_TIM_Base_Start_IT>
	HAL_TIM_IC_Start_IT(Handler, Channel); // HALL Timer Initialization
 8000ecc:	78fb      	ldrb	r3, [r7, #3]
 8000ece:	4619      	mov	r1, r3
 8000ed0:	6878      	ldr	r0, [r7, #4]
 8000ed2:	f004 ff07 	bl	8005ce4 <HAL_TIM_IC_Start_IT>
}
 8000ed6:	bf00      	nop
 8000ed8:	3708      	adds	r7, #8
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	20000100 	.word	0x20000100

08000ee4 <Cam_CrankPositionSync>:

void Cam_CrankPositionSync(){
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
	Cam_HalfCycle = 1-Cam_HalfCycle;
 8000ee8:	4b05      	ldr	r3, [pc, #20]	; (8000f00 <Cam_CrankPositionSync+0x1c>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	f1c3 0301 	rsb	r3, r3, #1
 8000ef0:	4a03      	ldr	r2, [pc, #12]	; (8000f00 <Cam_CrankPositionSync+0x1c>)
 8000ef2:	6013      	str	r3, [r2, #0]
}
 8000ef4:	bf00      	nop
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop
 8000f00:	200000a8 	.word	0x200000a8

08000f04 <Cam_HalGeberDriver>:

void Cam_HalGeberDriver(){
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0

	// Check if the CamShaft indicates start of the new Cam cycle
	// If it does, reset the variable if it already int
	// TODO posssible Error check here. Similar to crankshaft.
	Cam_HalfCycle = 0; // This is definitely 0, if CAM is on the initial phase.
 8000f08:	4b03      	ldr	r3, [pc, #12]	; (8000f18 <Cam_HalGeberDriver+0x14>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	601a      	str	r2, [r3, #0]
		Crank_PosDiffOld = Crank_PosDiff;
		Crank_ShaftFreqHz = 0.5*Crank_ShaftFreqHz + 0.5*Crank_ShaftFreqHzRaw; // filter frequency if the tooth isnt missing
		//Crank_TeethCount++;
	}
	*/
}
 8000f0e:	bf00      	nop
 8000f10:	46bd      	mov	sp, r7
 8000f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f16:	4770      	bx	lr
 8000f18:	200000a8 	.word	0x200000a8

08000f1c <Crank_Init>:
// PARAMETERS
// Declared in
// TODO add a parameter which varries threshold for missing tooth detection algorithm

/* Initialization of variables and TIM related start-up */
void Crank_Init(TIM_HandleTypeDef *Handler, uint8_t Channel, uint8_t ActiveChannel){
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
 8000f24:	460b      	mov	r3, r1
 8000f26:	70fb      	strb	r3, [r7, #3]
 8000f28:	4613      	mov	r3, r2
 8000f2a:	70bb      	strb	r3, [r7, #2]
	CrankCfg.Crank_TeethNmbr_P = 17;
 8000f2c:	4b11      	ldr	r3, [pc, #68]	; (8000f74 <Crank_Init+0x58>)
 8000f2e:	2211      	movs	r2, #17
 8000f30:	601a      	str	r2, [r3, #0]
	CrankCfg.Crank_MissingTeethNmbr_P = 1;
 8000f32:	4b10      	ldr	r3, [pc, #64]	; (8000f74 <Crank_Init+0x58>)
 8000f34:	2201      	movs	r2, #1
 8000f36:	605a      	str	r2, [r3, #4]

	Crank_DivAngle = 360/CrankCfg.Crank_MissingTeethNmbr_P;
 8000f38:	4b0e      	ldr	r3, [pc, #56]	; (8000f74 <Crank_Init+0x58>)
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8000f40:	fb92 f3f3 	sdiv	r3, r2, r3
 8000f44:	461a      	mov	r2, r3
 8000f46:	4b0c      	ldr	r3, [pc, #48]	; (8000f78 <Crank_Init+0x5c>)
 8000f48:	601a      	str	r2, [r3, #0]
	Crank_HallTIM.Handler = Handler;
 8000f4a:	4a0c      	ldr	r2, [pc, #48]	; (8000f7c <Crank_Init+0x60>)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	6013      	str	r3, [r2, #0]
	Crank_HallTIM.Channel = Channel;
 8000f50:	4a0a      	ldr	r2, [pc, #40]	; (8000f7c <Crank_Init+0x60>)
 8000f52:	78fb      	ldrb	r3, [r7, #3]
 8000f54:	7113      	strb	r3, [r2, #4]
	Crank_HallTIM.ActiveChannel = ActiveChannel;
 8000f56:	4a09      	ldr	r2, [pc, #36]	; (8000f7c <Crank_Init+0x60>)
 8000f58:	78bb      	ldrb	r3, [r7, #2]
 8000f5a:	7153      	strb	r3, [r2, #5]
	HAL_TIM_Base_Start_IT(Handler);
 8000f5c:	6878      	ldr	r0, [r7, #4]
 8000f5e:	f004 fd7a 	bl	8005a56 <HAL_TIM_Base_Start_IT>
	HAL_TIM_IC_Start_IT(Handler, Channel); // HALL Timer Initialization
 8000f62:	78fb      	ldrb	r3, [r7, #3]
 8000f64:	4619      	mov	r1, r3
 8000f66:	6878      	ldr	r0, [r7, #4]
 8000f68:	f004 febc 	bl	8005ce4 <HAL_TIM_IC_Start_IT>
}
 8000f6c:	bf00      	nop
 8000f6e:	3708      	adds	r7, #8
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	20000584 	.word	0x20000584
 8000f78:	200000c8 	.word	0x200000c8
 8000f7c:	20000108 	.word	0x20000108

08000f80 <Crank_HalGeberDriver>:

/* Driver for calculating the speed and resetting the counter upon empty slot */
void Crank_HalGeberDriver(){
 8000f80:	b5b0      	push	{r4, r5, r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
	uint32_t capturedValue;
	// Get CCR register for the specific Timer and Channel
	capturedValue = HAL_TIM_ReadCapturedValue(Crank_HallTIM.Handler, Crank_HallTIM.Channel);
 8000f86:	4b66      	ldr	r3, [pc, #408]	; (8001120 <Crank_HalGeberDriver+0x1a0>)
 8000f88:	681a      	ldr	r2, [r3, #0]
 8000f8a:	4b65      	ldr	r3, [pc, #404]	; (8001120 <Crank_HalGeberDriver+0x1a0>)
 8000f8c:	791b      	ldrb	r3, [r3, #4]
 8000f8e:	4619      	mov	r1, r3
 8000f90:	4610      	mov	r0, r2
 8000f92:	f005 fad7 	bl	8006544 <HAL_TIM_ReadCapturedValue>
 8000f96:	6078      	str	r0, [r7, #4]

	if( capturedValue > Crank_LastCapturedEdgeTime )
 8000f98:	4b62      	ldr	r3, [pc, #392]	; (8001124 <Crank_HalGeberDriver+0x1a4>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	687a      	ldr	r2, [r7, #4]
 8000f9e:	429a      	cmp	r2, r3
 8000fa0:	d906      	bls.n	8000fb0 <Crank_HalGeberDriver+0x30>
		// Compute the input signal frequency
		Crank_RotDelta = capturedValue - Crank_LastCapturedEdgeTime;
 8000fa2:	4b60      	ldr	r3, [pc, #384]	; (8001124 <Crank_HalGeberDriver+0x1a4>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	687a      	ldr	r2, [r7, #4]
 8000fa8:	1ad3      	subs	r3, r2, r3
 8000faa:	4a5f      	ldr	r2, [pc, #380]	; (8001128 <Crank_HalGeberDriver+0x1a8>)
 8000fac:	6013      	str	r3, [r2, #0]
 8000fae:	e008      	b.n	8000fc2 <Crank_HalGeberDriver+0x42>
	else
		// Timer counter overflow
		Crank_RotDelta = ( 0xFFFF - Crank_LastCapturedEdgeTime ) + capturedValue;
 8000fb0:	4b5c      	ldr	r3, [pc, #368]	; (8001124 <Crank_HalGeberDriver+0x1a4>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	687a      	ldr	r2, [r7, #4]
 8000fb6:	1ad3      	subs	r3, r2, r3
 8000fb8:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8000fbc:	33ff      	adds	r3, #255	; 0xff
 8000fbe:	4a5a      	ldr	r2, [pc, #360]	; (8001128 <Crank_HalGeberDriver+0x1a8>)
 8000fc0:	6013      	str	r3, [r2, #0]

	// Compute the input signal frequency
	Crank_RotDelta = Crank_RotDelta*(1+Crank_HallTIM.Handler->Instance->PSC);
 8000fc2:	4b57      	ldr	r3, [pc, #348]	; (8001120 <Crank_HalGeberDriver+0x1a0>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fca:	3301      	adds	r3, #1
 8000fcc:	4a56      	ldr	r2, [pc, #344]	; (8001128 <Crank_HalGeberDriver+0x1a8>)
 8000fce:	6812      	ldr	r2, [r2, #0]
 8000fd0:	fb02 f303 	mul.w	r3, r2, r3
 8000fd4:	4a54      	ldr	r2, [pc, #336]	; (8001128 <Crank_HalGeberDriver+0x1a8>)
 8000fd6:	6013      	str	r3, [r2, #0]
	float clkFreq = HAL_RCC_GetPCLK1Freq();
 8000fd8:	f004 f988 	bl	80052ec <HAL_RCC_GetPCLK1Freq>
 8000fdc:	ee07 0a90 	vmov	s15, r0
 8000fe0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000fe4:	edc7 7a00 	vstr	s15, [r7]
	Crank_ShaftFreqHzRaw = 2*clkFreq/Crank_RotDelta/(CrankCfg.Crank_TeethNmbr_P+CrankCfg.Crank_MissingTeethNmbr_P);  // calculate frequency 2* because APB2 has clock multiplied by 2 for TIM!
 8000fe8:	edd7 7a00 	vldr	s15, [r7]
 8000fec:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8000ff0:	4b4d      	ldr	r3, [pc, #308]	; (8001128 <Crank_HalGeberDriver+0x1a8>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	ee07 3a90 	vmov	s15, r3
 8000ff8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ffc:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001000:	4b4a      	ldr	r3, [pc, #296]	; (800112c <Crank_HalGeberDriver+0x1ac>)
 8001002:	681a      	ldr	r2, [r3, #0]
 8001004:	4b49      	ldr	r3, [pc, #292]	; (800112c <Crank_HalGeberDriver+0x1ac>)
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	4413      	add	r3, r2
 800100a:	ee07 3a90 	vmov	s15, r3
 800100e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001012:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001016:	4b46      	ldr	r3, [pc, #280]	; (8001130 <Crank_HalGeberDriver+0x1b0>)
 8001018:	edc3 7a00 	vstr	s15, [r3]

	// Update the last captured value
	Crank_LastCapturedEdgeTime = capturedValue;
 800101c:	4a41      	ldr	r2, [pc, #260]	; (8001124 <Crank_HalGeberDriver+0x1a4>)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	6013      	str	r3, [r2, #0]
	Crank_PosDiff = Crank_RotDelta;
 8001022:	4b41      	ldr	r3, [pc, #260]	; (8001128 <Crank_HalGeberDriver+0x1a8>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	4a43      	ldr	r2, [pc, #268]	; (8001134 <Crank_HalGeberDriver+0x1b4>)
 8001028:	6013      	str	r3, [r2, #0]

	// Check for the empty tooth - if the difference between timestamps is bigger than usually.
	if(((Crank_PosDiff-Crank_PosDiffOld) >= 0.7*Crank_PosDiffOld) && (Crank_PosDiff >= Crank_PosDiffOld)){
 800102a:	4b42      	ldr	r3, [pc, #264]	; (8001134 <Crank_HalGeberDriver+0x1b4>)
 800102c:	681a      	ldr	r2, [r3, #0]
 800102e:	4b42      	ldr	r3, [pc, #264]	; (8001138 <Crank_HalGeberDriver+0x1b8>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	1ad3      	subs	r3, r2, r3
 8001034:	4618      	mov	r0, r3
 8001036:	f7ff fa11 	bl	800045c <__aeabi_ui2d>
 800103a:	4604      	mov	r4, r0
 800103c:	460d      	mov	r5, r1
 800103e:	4b3e      	ldr	r3, [pc, #248]	; (8001138 <Crank_HalGeberDriver+0x1b8>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	4618      	mov	r0, r3
 8001044:	f7ff fa0a 	bl	800045c <__aeabi_ui2d>
 8001048:	a32f      	add	r3, pc, #188	; (adr r3, 8001108 <Crank_HalGeberDriver+0x188>)
 800104a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800104e:	f7ff fa7f 	bl	8000550 <__aeabi_dmul>
 8001052:	4602      	mov	r2, r0
 8001054:	460b      	mov	r3, r1
 8001056:	4620      	mov	r0, r4
 8001058:	4629      	mov	r1, r5
 800105a:	f7ff fcff 	bl	8000a5c <__aeabi_dcmpge>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d01f      	beq.n	80010a4 <Crank_HalGeberDriver+0x124>
 8001064:	4b33      	ldr	r3, [pc, #204]	; (8001134 <Crank_HalGeberDriver+0x1b4>)
 8001066:	681a      	ldr	r2, [r3, #0]
 8001068:	4b33      	ldr	r3, [pc, #204]	; (8001138 <Crank_HalGeberDriver+0x1b8>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	429a      	cmp	r2, r3
 800106e:	d319      	bcc.n	80010a4 <Crank_HalGeberDriver+0x124>
		Crank_PosDiffOld = Crank_PosDiff;
 8001070:	4b30      	ldr	r3, [pc, #192]	; (8001134 <Crank_HalGeberDriver+0x1b4>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4a30      	ldr	r2, [pc, #192]	; (8001138 <Crank_HalGeberDriver+0x1b8>)
 8001076:	6013      	str	r3, [r2, #0]

		Crank_ShaftFreqHz = Crank_ShaftFreqHz; // take the last valid value in case the tooth is missing
 8001078:	4b30      	ldr	r3, [pc, #192]	; (800113c <Crank_HalGeberDriver+0x1bc>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a2f      	ldr	r2, [pc, #188]	; (800113c <Crank_HalGeberDriver+0x1bc>)
 800107e:	6013      	str	r3, [r2, #0]
		if (Crank_TeethCount >= CrankCfg.Crank_TeethNmbr_P-1){
 8001080:	4b2f      	ldr	r3, [pc, #188]	; (8001140 <Crank_HalGeberDriver+0x1c0>)
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	461a      	mov	r2, r3
 8001086:	4b29      	ldr	r3, [pc, #164]	; (800112c <Crank_HalGeberDriver+0x1ac>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	3b01      	subs	r3, #1
 800108c:	429a      	cmp	r2, r3
 800108e:	db03      	blt.n	8001098 <Crank_HalGeberDriver+0x118>
			ErrorHandler_Increase(Crank_ToothJump);
 8001090:	2000      	movs	r0, #0
 8001092:	f000 f9fb 	bl	800148c <ErrorHandler_Increase>
 8001096:	e002      	b.n	800109e <Crank_HalGeberDriver+0x11e>
		}else{
			ErrorHandler_Decrease(Crank_ToothJump);
 8001098:	2000      	movs	r0, #0
 800109a:	f000 fa03 	bl	80014a4 <ErrorHandler_Decrease>
		}
		Crank_TeethCounterReset();					// reset the counter due to the larger space between teeth
 800109e:	f000 f851 	bl	8001144 <Crank_TeethCounterReset>
 80010a2:	e02a      	b.n	80010fa <Crank_HalGeberDriver+0x17a>
	}
	else{
		Crank_PosDiffOld = Crank_PosDiff;
 80010a4:	4b23      	ldr	r3, [pc, #140]	; (8001134 <Crank_HalGeberDriver+0x1b4>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a23      	ldr	r2, [pc, #140]	; (8001138 <Crank_HalGeberDriver+0x1b8>)
 80010aa:	6013      	str	r3, [r2, #0]
		Crank_ShaftFreqHz = 0.2*Crank_ShaftFreqHz + 0.8*Crank_ShaftFreqHzRaw; // filter frequency if the tooth isnt missing
 80010ac:	4b23      	ldr	r3, [pc, #140]	; (800113c <Crank_HalGeberDriver+0x1bc>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4618      	mov	r0, r3
 80010b2:	f7ff f9f5 	bl	80004a0 <__aeabi_f2d>
 80010b6:	a316      	add	r3, pc, #88	; (adr r3, 8001110 <Crank_HalGeberDriver+0x190>)
 80010b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010bc:	f7ff fa48 	bl	8000550 <__aeabi_dmul>
 80010c0:	4603      	mov	r3, r0
 80010c2:	460c      	mov	r4, r1
 80010c4:	4625      	mov	r5, r4
 80010c6:	461c      	mov	r4, r3
 80010c8:	4b19      	ldr	r3, [pc, #100]	; (8001130 <Crank_HalGeberDriver+0x1b0>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4618      	mov	r0, r3
 80010ce:	f7ff f9e7 	bl	80004a0 <__aeabi_f2d>
 80010d2:	a311      	add	r3, pc, #68	; (adr r3, 8001118 <Crank_HalGeberDriver+0x198>)
 80010d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010d8:	f7ff fa3a 	bl	8000550 <__aeabi_dmul>
 80010dc:	4602      	mov	r2, r0
 80010de:	460b      	mov	r3, r1
 80010e0:	4620      	mov	r0, r4
 80010e2:	4629      	mov	r1, r5
 80010e4:	f7ff f87e 	bl	80001e4 <__adddf3>
 80010e8:	4603      	mov	r3, r0
 80010ea:	460c      	mov	r4, r1
 80010ec:	4618      	mov	r0, r3
 80010ee:	4621      	mov	r1, r4
 80010f0:	f7ff fcc8 	bl	8000a84 <__aeabi_d2f>
 80010f4:	4602      	mov	r2, r0
 80010f6:	4b11      	ldr	r3, [pc, #68]	; (800113c <Crank_HalGeberDriver+0x1bc>)
 80010f8:	601a      	str	r2, [r3, #0]
	}
}
 80010fa:	bf00      	nop
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bdb0      	pop	{r4, r5, r7, pc}
 8001102:	bf00      	nop
 8001104:	f3af 8000 	nop.w
 8001108:	66666666 	.word	0x66666666
 800110c:	3fe66666 	.word	0x3fe66666
 8001110:	9999999a 	.word	0x9999999a
 8001114:	3fc99999 	.word	0x3fc99999
 8001118:	9999999a 	.word	0x9999999a
 800111c:	3fe99999 	.word	0x3fe99999
 8001120:	20000108 	.word	0x20000108
 8001124:	200000ac 	.word	0x200000ac
 8001128:	200000b8 	.word	0x200000b8
 800112c:	20000584 	.word	0x20000584
 8001130:	200000b4 	.word	0x200000b4
 8001134:	200000bc 	.word	0x200000bc
 8001138:	200000c0 	.word	0x200000c0
 800113c:	200000b0 	.word	0x200000b0
 8001140:	200000c4 	.word	0x200000c4

08001144 <Crank_TeethCounterReset>:

/* Helper function for Teeth Counter reset */
void Crank_TeethCounterReset(){
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
	Crank_TeethCount = 1;
 8001148:	4b03      	ldr	r3, [pc, #12]	; (8001158 <Crank_TeethCounterReset+0x14>)
 800114a:	2201      	movs	r2, #1
 800114c:	701a      	strb	r2, [r3, #0]
}
 800114e:	bf00      	nop
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr
 8001158:	200000c4 	.word	0x200000c4

0800115c <Crank_TeethCounter>:

/* Teeth Counter */
void Crank_TeethCounter(){
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
	if (Crank_TeethCount < CrankCfg.Crank_TeethNmbr_P)
 8001160:	4b08      	ldr	r3, [pc, #32]	; (8001184 <Crank_TeethCounter+0x28>)
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	461a      	mov	r2, r3
 8001166:	4b08      	ldr	r3, [pc, #32]	; (8001188 <Crank_TeethCounter+0x2c>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	429a      	cmp	r2, r3
 800116c:	da06      	bge.n	800117c <Crank_TeethCounter+0x20>
		Crank_TeethCount = Crank_TeethCount + 1;
 800116e:	4b05      	ldr	r3, [pc, #20]	; (8001184 <Crank_TeethCounter+0x28>)
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	3301      	adds	r3, #1
 8001174:	b2da      	uxtb	r2, r3
 8001176:	4b03      	ldr	r3, [pc, #12]	; (8001184 <Crank_TeethCounter+0x28>)
 8001178:	701a      	strb	r2, [r3, #0]
	else
		Crank_TeethCounterReset();
}
 800117a:	e001      	b.n	8001180 <Crank_TeethCounter+0x24>
		Crank_TeethCounterReset();
 800117c:	f7ff ffe2 	bl	8001144 <Crank_TeethCounterReset>
}
 8001180:	bf00      	nop
 8001182:	bd80      	pop	{r7, pc}
 8001184:	200000c4 	.word	0x200000c4
 8001188:	20000584 	.word	0x20000584

0800118c <Crank_AngleCalc>:

/* Calculation of Crankshaft angle */
void Crank_AngleCalc(){
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
	Crank_TeethCounter();
 8001190:	f7ff ffe4 	bl	800115c <Crank_TeethCounter>
	Crank_Angle = 360*(Crank_TeethCount-1)/(CrankCfg.Crank_TeethNmbr_P+CrankCfg.Crank_MissingTeethNmbr_P);
 8001194:	4b09      	ldr	r3, [pc, #36]	; (80011bc <Crank_AngleCalc+0x30>)
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	3b01      	subs	r3, #1
 800119a:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800119e:	fb02 f203 	mul.w	r2, r2, r3
 80011a2:	4b07      	ldr	r3, [pc, #28]	; (80011c0 <Crank_AngleCalc+0x34>)
 80011a4:	6819      	ldr	r1, [r3, #0]
 80011a6:	4b06      	ldr	r3, [pc, #24]	; (80011c0 <Crank_AngleCalc+0x34>)
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	440b      	add	r3, r1
 80011ac:	fb92 f3f3 	sdiv	r3, r2, r3
 80011b0:	b29a      	uxth	r2, r3
 80011b2:	4b04      	ldr	r3, [pc, #16]	; (80011c4 <Crank_AngleCalc+0x38>)
 80011b4:	801a      	strh	r2, [r3, #0]
}
 80011b6:	bf00      	nop
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	200000c4 	.word	0x200000c4
 80011c0:	20000584 	.word	0x20000584
 80011c4:	200000c6 	.word	0x200000c6

080011c8 <DIO_getAllPorts>:


uint8_t ECU_Term15;
uint8_t ECU_Ignition;

void DIO_getAllPorts(){
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
	// TODO in future if we want to sample all the ports
	ECU_Term15 = HAL_GPIO_ReadPin(ECU_Term15_GPIO_Port,ECU_Term15_Pin);
 80011ce:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011d2:	480b      	ldr	r0, [pc, #44]	; (8001200 <DIO_getAllPorts+0x38>)
 80011d4:	f003 fc2a 	bl	8004a2c <HAL_GPIO_ReadPin>
 80011d8:	4603      	mov	r3, r0
 80011da:	461a      	mov	r2, r3
 80011dc:	4b09      	ldr	r3, [pc, #36]	; (8001204 <DIO_getAllPorts+0x3c>)
 80011de:	701a      	strb	r2, [r3, #0]
	ECU_Ignition = HAL_GPIO_ReadPin(ECU_Term15_GPIO_Port,ECU_Ignition_Pin);
 80011e0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011e4:	4806      	ldr	r0, [pc, #24]	; (8001200 <DIO_getAllPorts+0x38>)
 80011e6:	f003 fc21 	bl	8004a2c <HAL_GPIO_ReadPin>
 80011ea:	4603      	mov	r3, r0
 80011ec:	461a      	mov	r2, r3
 80011ee:	4b06      	ldr	r3, [pc, #24]	; (8001208 <DIO_getAllPorts+0x40>)
 80011f0:	701a      	strb	r2, [r3, #0]
	__IO uint32_t a = GPIOE->IDR;
 80011f2:	4b03      	ldr	r3, [pc, #12]	; (8001200 <DIO_getAllPorts+0x38>)
 80011f4:	691b      	ldr	r3, [r3, #16]
 80011f6:	607b      	str	r3, [r7, #4]
}
 80011f8:	bf00      	nop
 80011fa:	3708      	adds	r7, #8
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	40021000 	.word	0x40021000
 8001204:	20000110 	.word	0x20000110
 8001208:	20000111 	.word	0x20000111

0800120c <ECU_MainLoop>:
#include "adc.h"

ECU_Info ECU;
ECU_Modes ECU_Mode = sleep;

void ECU_MainLoop(){
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOD,Led_Green_Pin);
 8001210:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001214:	4831      	ldr	r0, [pc, #196]	; (80012dc <ECU_MainLoop+0xd0>)
 8001216:	f003 fc3a 	bl	8004a8e <HAL_GPIO_TogglePin>
	// TODO, flip GPIO at the beginning and at the end, to see whether everything is done in 10ms or not. Goal is 5ms at 9000 RPM! (to make sure enough CPU is available)
	// get all ADCs
	// get all CAN messages
	// get all SPIs (if needed)
	// run the loop
	ECU_CommonFunctions();
 800121a:	f000 f869 	bl	80012f0 <ECU_CommonFunctions>
	DIO_getAllPorts();
 800121e:	f7ff ffd3 	bl	80011c8 <DIO_getAllPorts>



	switch (ECU_Mode){
 8001222:	4b2f      	ldr	r3, [pc, #188]	; (80012e0 <ECU_MainLoop+0xd4>)
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	2b05      	cmp	r3, #5
 8001228:	d856      	bhi.n	80012d8 <ECU_MainLoop+0xcc>
 800122a:	a201      	add	r2, pc, #4	; (adr r2, 8001230 <ECU_MainLoop+0x24>)
 800122c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001230:	08001249 	.word	0x08001249
 8001234:	08001251 	.word	0x08001251
 8001238:	0800125d 	.word	0x0800125d
 800123c:	08001275 	.word	0x08001275
 8001240:	080012b3 	.word	0x080012b3
 8001244:	080012c7 	.word	0x080012c7
	case sleep:
		ECU_Mode = initialize;
 8001248:	4b25      	ldr	r3, [pc, #148]	; (80012e0 <ECU_MainLoop+0xd4>)
 800124a:	2201      	movs	r2, #1
 800124c:	701a      	strb	r2, [r3, #0]
		break;
 800124e:	e043      	b.n	80012d8 <ECU_MainLoop+0xcc>
	case initialize:
		// Run initialization sequence, whatever is needed
		ECU_InitLoop();	//todo move all init sequence here if needed
 8001250:	f000 f856 	bl	8001300 <ECU_InitLoop>
		ECU_Mode = idle;
 8001254:	4b22      	ldr	r3, [pc, #136]	; (80012e0 <ECU_MainLoop+0xd4>)
 8001256:	2202      	movs	r2, #2
 8001258:	701a      	strb	r2, [r3, #0]
		// Transit to IDLE only if error free
		break;
 800125a:	e03d      	b.n	80012d8 <ECU_MainLoop+0xcc>
	case idle:
		// Run any necessary checks before start. Wait for ECU_Term15
		// Transit to cranking only if error free and upon starter signal TODO make starter signal on Teensy

		if ((ECU_Ignition == 1)&&(ECU_Term15 == 1)){ECU_Mode = cranking;}
 800125c:	4b21      	ldr	r3, [pc, #132]	; (80012e4 <ECU_MainLoop+0xd8>)
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	2b01      	cmp	r3, #1
 8001262:	d136      	bne.n	80012d2 <ECU_MainLoop+0xc6>
 8001264:	4b20      	ldr	r3, [pc, #128]	; (80012e8 <ECU_MainLoop+0xdc>)
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	2b01      	cmp	r3, #1
 800126a:	d132      	bne.n	80012d2 <ECU_MainLoop+0xc6>
 800126c:	4b1c      	ldr	r3, [pc, #112]	; (80012e0 <ECU_MainLoop+0xd4>)
 800126e:	2203      	movs	r2, #3
 8001270:	701a      	strb	r2, [r3, #0]
		//if (ECU_Term15 == 0){ECU_Mode = postdrive;} //TODO used or not?
		// Transit to postdrive if contact taken
		// if ECU.KL15 == 0, ECU_StMachine.mode = postdrive
		break;
 8001272:	e02e      	b.n	80012d2 <ECU_MainLoop+0xc6>
	case cranking:
		// here the cranking procedure comes, if needed
		ECU_CrankingLoop();
 8001274:	f000 f84c 	bl	8001310 <ECU_CrankingLoop>
		if (ECU_Term15 == 0){ECU_Mode = postdrive;}
 8001278:	4b1b      	ldr	r3, [pc, #108]	; (80012e8 <ECU_MainLoop+0xdc>)
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d102      	bne.n	8001286 <ECU_MainLoop+0x7a>
 8001280:	4b17      	ldr	r3, [pc, #92]	; (80012e0 <ECU_MainLoop+0xd4>)
 8001282:	2205      	movs	r2, #5
 8001284:	701a      	strb	r2, [r3, #0]
		if (ECU_Ignition == 0){ECU_Mode = idle;}
 8001286:	4b17      	ldr	r3, [pc, #92]	; (80012e4 <ECU_MainLoop+0xd8>)
 8001288:	781b      	ldrb	r3, [r3, #0]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d102      	bne.n	8001294 <ECU_MainLoop+0x88>
 800128e:	4b14      	ldr	r3, [pc, #80]	; (80012e0 <ECU_MainLoop+0xd4>)
 8001290:	2202      	movs	r2, #2
 8001292:	701a      	strb	r2, [r3, #0]
		if (Crank_ShaftFreqHz >= 12){ECU_Mode = running;}
 8001294:	4b15      	ldr	r3, [pc, #84]	; (80012ec <ECU_MainLoop+0xe0>)
 8001296:	edd3 7a00 	vldr	s15, [r3]
 800129a:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 800129e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012a6:	da00      	bge.n	80012aa <ECU_MainLoop+0x9e>
		// Transit to running when speed is above threshold (lets say 1000 RPM)
		// if speed >= 1000, ECU_StMachine.mode = running
		break;
 80012a8:	e016      	b.n	80012d8 <ECU_MainLoop+0xcc>
		if (Crank_ShaftFreqHz >= 12){ECU_Mode = running;}
 80012aa:	4b0d      	ldr	r3, [pc, #52]	; (80012e0 <ECU_MainLoop+0xd4>)
 80012ac:	2204      	movs	r2, #4
 80012ae:	701a      	strb	r2, [r3, #0]
		break;
 80012b0:	e012      	b.n	80012d8 <ECU_MainLoop+0xcc>
	case running:
		// here will be the running loop, 99% of things happen here
		ECU_RunLoop();
 80012b2:	f000 f83b 	bl	800132c <ECU_RunLoop>
		if (ECU_Term15 == 0){ECU_Mode = postdrive;}
 80012b6:	4b0c      	ldr	r3, [pc, #48]	; (80012e8 <ECU_MainLoop+0xdc>)
 80012b8:	781b      	ldrb	r3, [r3, #0]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d10b      	bne.n	80012d6 <ECU_MainLoop+0xca>
 80012be:	4b08      	ldr	r3, [pc, #32]	; (80012e0 <ECU_MainLoop+0xd4>)
 80012c0:	2205      	movs	r2, #5
 80012c2:	701a      	strb	r2, [r3, #0]
		// Transit to postdrive if contact taken
		// if ECU.KL15 == 0, ECU_StMachine.mode = postdrive
		break;
 80012c4:	e007      	b.n	80012d6 <ECU_MainLoop+0xca>
	case postdrive:
		// here is post drive, like ventilators, pumps, lights and stuff
		// save to diagnostics to NVM if possible TODO
		ECU_PostDriveLoop();
 80012c6:	f000 f83f 	bl	8001348 <ECU_PostDriveLoop>
		ECU_Mode = idle;	// TODO, maybe add a timer, or counter, how many times the post drive is executed.
 80012ca:	4b05      	ldr	r3, [pc, #20]	; (80012e0 <ECU_MainLoop+0xd4>)
 80012cc:	2202      	movs	r2, #2
 80012ce:	701a      	strb	r2, [r3, #0]
		break;
 80012d0:	e002      	b.n	80012d8 <ECU_MainLoop+0xcc>
		break;
 80012d2:	bf00      	nop
 80012d4:	e000      	b.n	80012d8 <ECU_MainLoop+0xcc>
		break;
 80012d6:	bf00      	nop
	}
	// TODO, flip GPIO at the beginning and at the end, to see whether everything is done in 10ms or not. Goal is 5ms at 9000 RPM! (to make sure enough CPU is available)
}
 80012d8:	bf00      	nop
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	40020c00 	.word	0x40020c00
 80012e0:	200000cc 	.word	0x200000cc
 80012e4:	20000111 	.word	0x20000111
 80012e8:	20000110 	.word	0x20000110
 80012ec:	200000b0 	.word	0x200000b0

080012f0 <ECU_CommonFunctions>:
/*
void ECU_GetADCs(){
	// Get ADC values
*/

void ECU_CommonFunctions(){
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
	// Execute all functions which are common in all states (like crankshaft/camshaft related) TODO, check if ignition driver can be disabled during Init sequence
	Ignition_MainLoop();
 80012f4:	f000 fb7a 	bl	80019ec <Ignition_MainLoop>
	Injection_CalcFuelQty();
 80012f8:	f000 ff00 	bl	80020fc <Injection_CalcFuelQty>
}
 80012fc:	bf00      	nop
 80012fe:	bd80      	pop	{r7, pc}

08001300 <ECU_InitLoop>:

void ECU_CheckTransitConditions(){
	// here all transition conditions are checked. For example engine speed etc.
}
void ECU_InitLoop(){
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
	Injection_Init_InjectionCyl();

	ADC_Init_TriggerTIM(&htim3,TIM_CHANNEL_1,HAL_TIM_ACTIVE_CHANNEL_1);
	ADC_Init_ADC1(&hadc1);
	*/
}
 8001304:	bf00      	nop
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr
	...

08001310 <ECU_CrankingLoop>:

void ECU_IdleLoop(){
	// Idle sequence here
}
void ECU_CrankingLoop(){
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
	// Cranking sequence here
	HAL_GPIO_TogglePin(GPIOD,Led_Blue_Pin);
 8001314:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001318:	4803      	ldr	r0, [pc, #12]	; (8001328 <ECU_CrankingLoop+0x18>)
 800131a:	f003 fbb8 	bl	8004a8e <HAL_GPIO_TogglePin>
	Ignition_MainLoop();
 800131e:	f000 fb65 	bl	80019ec <Ignition_MainLoop>
}
 8001322:	bf00      	nop
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	40020c00 	.word	0x40020c00

0800132c <ECU_RunLoop>:
void ECU_RunLoop(){
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0
	// Running sequence here
	HAL_GPIO_WritePin(GPIOD,Led_Blue_Pin,GPIO_PIN_SET);
 8001330:	2201      	movs	r2, #1
 8001332:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001336:	4803      	ldr	r0, [pc, #12]	; (8001344 <ECU_RunLoop+0x18>)
 8001338:	f003 fb90 	bl	8004a5c <HAL_GPIO_WritePin>
	Ignition_MainLoop();
 800133c:	f000 fb56 	bl	80019ec <Ignition_MainLoop>
}
 8001340:	bf00      	nop
 8001342:	bd80      	pop	{r7, pc}
 8001344:	40020c00 	.word	0x40020c00

08001348 <ECU_PostDriveLoop>:
void ECU_PostDriveLoop(){
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0
	// Post Drive sequence here
	HAL_GPIO_WritePin(GPIOD,Led_Blue_Pin,GPIO_PIN_RESET);
 800134c:	2200      	movs	r2, #0
 800134e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001352:	4802      	ldr	r0, [pc, #8]	; (800135c <ECU_PostDriveLoop+0x14>)
 8001354:	f003 fb82 	bl	8004a5c <HAL_GPIO_WritePin>
}
 8001358:	bf00      	nop
 800135a:	bd80      	pop	{r7, pc}
 800135c:	40020c00 	.word	0x40020c00

08001360 <ErrorHandler_Init>:

/*
Collection of all Errors to be tracked. Simply add one when needed
Use Public functions (ErrorHandler_Increase/Decrease), the rest is taken care here
*/
void ErrorHandler_Init(){
 8001360:	b480      	push	{r7}
 8001362:	b083      	sub	sp, #12
 8001364:	af00      	add	r7, sp, #0
	// Initialize the Error Handler Memory
	for (int i = 0;i<10;i++){
 8001366:	2300      	movs	r3, #0
 8001368:	607b      	str	r3, [r7, #4]
 800136a:	e035      	b.n	80013d8 <ErrorHandler_Init+0x78>
		ErrorMemory[i].counter = 0;
 800136c:	491f      	ldr	r1, [pc, #124]	; (80013ec <ErrorHandler_Init+0x8c>)
 800136e:	687a      	ldr	r2, [r7, #4]
 8001370:	4613      	mov	r3, r2
 8001372:	009b      	lsls	r3, r3, #2
 8001374:	4413      	add	r3, r2
 8001376:	009b      	lsls	r3, r3, #2
 8001378:	440b      	add	r3, r1
 800137a:	3308      	adds	r3, #8
 800137c:	2200      	movs	r2, #0
 800137e:	601a      	str	r2, [r3, #0]
		ErrorMemory[i].maxcounter = 100;
 8001380:	491a      	ldr	r1, [pc, #104]	; (80013ec <ErrorHandler_Init+0x8c>)
 8001382:	687a      	ldr	r2, [r7, #4]
 8001384:	4613      	mov	r3, r2
 8001386:	009b      	lsls	r3, r3, #2
 8001388:	4413      	add	r3, r2
 800138a:	009b      	lsls	r3, r3, #2
 800138c:	440b      	add	r3, r1
 800138e:	330c      	adds	r3, #12
 8001390:	2264      	movs	r2, #100	; 0x64
 8001392:	601a      	str	r2, [r3, #0]
		ErrorMemory[i].faultflag = 0;
 8001394:	4915      	ldr	r1, [pc, #84]	; (80013ec <ErrorHandler_Init+0x8c>)
 8001396:	687a      	ldr	r2, [r7, #4]
 8001398:	4613      	mov	r3, r2
 800139a:	009b      	lsls	r3, r3, #2
 800139c:	4413      	add	r3, r2
 800139e:	009b      	lsls	r3, r3, #2
 80013a0:	440b      	add	r3, r1
 80013a2:	3310      	adds	r3, #16
 80013a4:	2200      	movs	r2, #0
 80013a6:	601a      	str	r2, [r3, #0]
		ErrorMemory[i].uniqueID = i;
 80013a8:	4910      	ldr	r1, [pc, #64]	; (80013ec <ErrorHandler_Init+0x8c>)
 80013aa:	687a      	ldr	r2, [r7, #4]
 80013ac:	4613      	mov	r3, r2
 80013ae:	009b      	lsls	r3, r3, #2
 80013b0:	4413      	add	r3, r2
 80013b2:	009b      	lsls	r3, r3, #2
 80013b4:	440b      	add	r3, r1
 80013b6:	687a      	ldr	r2, [r7, #4]
 80013b8:	601a      	str	r2, [r3, #0]
		ErrorMemory[i].description = "Abc";
 80013ba:	4b0d      	ldr	r3, [pc, #52]	; (80013f0 <ErrorHandler_Init+0x90>)
 80013bc:	b2d8      	uxtb	r0, r3
 80013be:	490b      	ldr	r1, [pc, #44]	; (80013ec <ErrorHandler_Init+0x8c>)
 80013c0:	687a      	ldr	r2, [r7, #4]
 80013c2:	4613      	mov	r3, r2
 80013c4:	009b      	lsls	r3, r3, #2
 80013c6:	4413      	add	r3, r2
 80013c8:	009b      	lsls	r3, r3, #2
 80013ca:	440b      	add	r3, r1
 80013cc:	3304      	adds	r3, #4
 80013ce:	4602      	mov	r2, r0
 80013d0:	701a      	strb	r2, [r3, #0]
	for (int i = 0;i<10;i++){
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	3301      	adds	r3, #1
 80013d6:	607b      	str	r3, [r7, #4]
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2b09      	cmp	r3, #9
 80013dc:	ddc6      	ble.n	800136c <ErrorHandler_Init+0xc>
	}
}
 80013de:	bf00      	nop
 80013e0:	370c      	adds	r7, #12
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr
 80013ea:	bf00      	nop
 80013ec:	20000114 	.word	0x20000114
 80013f0:	08006ff8 	.word	0x08006ff8

080013f4 <ErrorHandler_Update>:

/* Init function which takes care of initializing ErrorHandler memory */
void ErrorHandler_Update(int errorID, int val){
 80013f4:	b480      	push	{r7}
 80013f6:	b085      	sub	sp, #20
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
 80013fc:	6039      	str	r1, [r7, #0]
	// This Error Handler function updates the given Error Handler under ID
	int counterValue = ErrorMemory[errorID].counter;
 80013fe:	4922      	ldr	r1, [pc, #136]	; (8001488 <ErrorHandler_Update+0x94>)
 8001400:	687a      	ldr	r2, [r7, #4]
 8001402:	4613      	mov	r3, r2
 8001404:	009b      	lsls	r3, r3, #2
 8001406:	4413      	add	r3, r2
 8001408:	009b      	lsls	r3, r3, #2
 800140a:	440b      	add	r3, r1
 800140c:	3308      	adds	r3, #8
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	60fb      	str	r3, [r7, #12]
	int maxCounterValue = ErrorMemory[errorID].maxcounter;
 8001412:	491d      	ldr	r1, [pc, #116]	; (8001488 <ErrorHandler_Update+0x94>)
 8001414:	687a      	ldr	r2, [r7, #4]
 8001416:	4613      	mov	r3, r2
 8001418:	009b      	lsls	r3, r3, #2
 800141a:	4413      	add	r3, r2
 800141c:	009b      	lsls	r3, r3, #2
 800141e:	440b      	add	r3, r1
 8001420:	330c      	adds	r3, #12
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	60bb      	str	r3, [r7, #8]
	counterValue = counterValue + val;
 8001426:	68fa      	ldr	r2, [r7, #12]
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	4413      	add	r3, r2
 800142c:	60fb      	str	r3, [r7, #12]
	if (counterValue > maxCounterValue)
 800142e:	68fa      	ldr	r2, [r7, #12]
 8001430:	68bb      	ldr	r3, [r7, #8]
 8001432:	429a      	cmp	r2, r3
 8001434:	dd0a      	ble.n	800144c <ErrorHandler_Update+0x58>
		ErrorMemory[errorID].faultflag = 1;
 8001436:	4914      	ldr	r1, [pc, #80]	; (8001488 <ErrorHandler_Update+0x94>)
 8001438:	687a      	ldr	r2, [r7, #4]
 800143a:	4613      	mov	r3, r2
 800143c:	009b      	lsls	r3, r3, #2
 800143e:	4413      	add	r3, r2
 8001440:	009b      	lsls	r3, r3, #2
 8001442:	440b      	add	r3, r1
 8001444:	3310      	adds	r3, #16
 8001446:	2201      	movs	r2, #1
 8001448:	601a      	str	r2, [r3, #0]
	else if (counterValue <= 0)
		ErrorMemory[errorID].counter = 0;
	else
		ErrorMemory[errorID].counter = counterValue;
}
 800144a:	e017      	b.n	800147c <ErrorHandler_Update+0x88>
	else if (counterValue <= 0)
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	2b00      	cmp	r3, #0
 8001450:	dc0a      	bgt.n	8001468 <ErrorHandler_Update+0x74>
		ErrorMemory[errorID].counter = 0;
 8001452:	490d      	ldr	r1, [pc, #52]	; (8001488 <ErrorHandler_Update+0x94>)
 8001454:	687a      	ldr	r2, [r7, #4]
 8001456:	4613      	mov	r3, r2
 8001458:	009b      	lsls	r3, r3, #2
 800145a:	4413      	add	r3, r2
 800145c:	009b      	lsls	r3, r3, #2
 800145e:	440b      	add	r3, r1
 8001460:	3308      	adds	r3, #8
 8001462:	2200      	movs	r2, #0
 8001464:	601a      	str	r2, [r3, #0]
}
 8001466:	e009      	b.n	800147c <ErrorHandler_Update+0x88>
		ErrorMemory[errorID].counter = counterValue;
 8001468:	4907      	ldr	r1, [pc, #28]	; (8001488 <ErrorHandler_Update+0x94>)
 800146a:	687a      	ldr	r2, [r7, #4]
 800146c:	4613      	mov	r3, r2
 800146e:	009b      	lsls	r3, r3, #2
 8001470:	4413      	add	r3, r2
 8001472:	009b      	lsls	r3, r3, #2
 8001474:	440b      	add	r3, r1
 8001476:	3308      	adds	r3, #8
 8001478:	68fa      	ldr	r2, [r7, #12]
 800147a:	601a      	str	r2, [r3, #0]
}
 800147c:	bf00      	nop
 800147e:	3714      	adds	r7, #20
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr
 8001488:	20000114 	.word	0x20000114

0800148c <ErrorHandler_Increase>:

/* Bouncing strategy. Called in case of failure event, increase by 2 (default) */
void ErrorHandler_Increase(int errorID){ErrorHandler_Update(errorID,2);}
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
 8001494:	2102      	movs	r1, #2
 8001496:	6878      	ldr	r0, [r7, #4]
 8001498:	f7ff ffac 	bl	80013f4 <ErrorHandler_Update>
 800149c:	bf00      	nop
 800149e:	3708      	adds	r7, #8
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}

080014a4 <ErrorHandler_Decrease>:

/* Bouncing strategy. Called in case of non-failure event, decrease by 1 (default) */
void ErrorHandler_Decrease(int errorID){ErrorHandler_Update(errorID,-1);}
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
 80014ac:	f04f 31ff 	mov.w	r1, #4294967295
 80014b0:	6878      	ldr	r0, [r7, #4]
 80014b2:	f7ff ff9f 	bl	80013f4 <ErrorHandler_Update>
 80014b6:	bf00      	nop
 80014b8:	3708      	adds	r7, #8
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}

080014be <Common_GetFrom2Dmap>:


#include "generalfunctions.h"


float Common_GetFrom2Dmap(float x, float y, int sizex, int sizey, float *arrayX, float *arrayY, float mapZ[][sizey]){
 80014be:	b490      	push	{r4, r7}
 80014c0:	b09a      	sub	sp, #104	; 0x68
 80014c2:	af00      	add	r7, sp, #0
 80014c4:	ed87 0a05 	vstr	s0, [r7, #20]
 80014c8:	edc7 0a04 	vstr	s1, [r7, #16]
 80014cc:	60f8      	str	r0, [r7, #12]
 80014ce:	60b9      	str	r1, [r7, #8]
 80014d0:	607a      	str	r2, [r7, #4]
 80014d2:	603b      	str	r3, [r7, #0]
 80014d4:	68b8      	ldr	r0, [r7, #8]
 80014d6:	1e43      	subs	r3, r0, #1
 80014d8:	647b      	str	r3, [r7, #68]	; 0x44
 80014da:	4603      	mov	r3, r0
 80014dc:	4619      	mov	r1, r3
 80014de:	f04f 0200 	mov.w	r2, #0
 80014e2:	f04f 0300 	mov.w	r3, #0
 80014e6:	f04f 0400 	mov.w	r4, #0
 80014ea:	0154      	lsls	r4, r2, #5
 80014ec:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80014f0:	014b      	lsls	r3, r1, #5
	float val = 0;
 80014f2:	f04f 0300 	mov.w	r3, #0
 80014f6:	643b      	str	r3, [r7, #64]	; 0x40

	int xLowInd = 0;
 80014f8:	2300      	movs	r3, #0
 80014fa:	667b      	str	r3, [r7, #100]	; 0x64
	int xHighInd = 0;
 80014fc:	2300      	movs	r3, #0
 80014fe:	663b      	str	r3, [r7, #96]	; 0x60
	int yLowInd = 0;
 8001500:	2300      	movs	r3, #0
 8001502:	65fb      	str	r3, [r7, #92]	; 0x5c
	int yHighInd = 0;
 8001504:	2300      	movs	r3, #0
 8001506:	65bb      	str	r3, [r7, #88]	; 0x58
	float yFractMax;

	float xLimited;
	float yLimited;

	if (x < arrayX[0]){
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	edd3 7a00 	vldr	s15, [r3]
 800150e:	ed97 7a05 	vldr	s14, [r7, #20]
 8001512:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001516:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800151a:	d507      	bpl.n	800152c <Common_GetFrom2Dmap+0x6e>
		xLowInd = 0;
 800151c:	2300      	movs	r3, #0
 800151e:	667b      	str	r3, [r7, #100]	; 0x64
		xHighInd = 1;
 8001520:	2301      	movs	r3, #1
 8001522:	663b      	str	r3, [r7, #96]	; 0x60
		xLimited = arrayX[0];
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	657b      	str	r3, [r7, #84]	; 0x54
 800152a:	e03d      	b.n	80015a8 <Common_GetFrom2Dmap+0xea>
	}else if (x >= arrayX[sizex-1]){
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001532:	3b01      	subs	r3, #1
 8001534:	009b      	lsls	r3, r3, #2
 8001536:	687a      	ldr	r2, [r7, #4]
 8001538:	4413      	add	r3, r2
 800153a:	edd3 7a00 	vldr	s15, [r3]
 800153e:	ed97 7a05 	vldr	s14, [r7, #20]
 8001542:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001546:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800154a:	db0f      	blt.n	800156c <Common_GetFrom2Dmap+0xae>
		xLowInd = sizex-2;
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	3b02      	subs	r3, #2
 8001550:	667b      	str	r3, [r7, #100]	; 0x64
		xHighInd = sizex-1;
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	3b01      	subs	r3, #1
 8001556:	663b      	str	r3, [r7, #96]	; 0x60
		xLimited = arrayX[sizex-1];
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800155e:	3b01      	subs	r3, #1
 8001560:	009b      	lsls	r3, r3, #2
 8001562:	687a      	ldr	r2, [r7, #4]
 8001564:	4413      	add	r3, r2
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	657b      	str	r3, [r7, #84]	; 0x54
 800156a:	e01d      	b.n	80015a8 <Common_GetFrom2Dmap+0xea>
	}
	else{
		xLimited = x;
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	657b      	str	r3, [r7, #84]	; 0x54
		for (int i = 0; i < sizex; i++){
 8001570:	2300      	movs	r3, #0
 8001572:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001574:	e011      	b.n	800159a <Common_GetFrom2Dmap+0xdc>
			if (x > arrayX[i])
 8001576:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001578:	009b      	lsls	r3, r3, #2
 800157a:	687a      	ldr	r2, [r7, #4]
 800157c:	4413      	add	r3, r2
 800157e:	edd3 7a00 	vldr	s15, [r3]
 8001582:	ed97 7a05 	vldr	s14, [r7, #20]
 8001586:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800158a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800158e:	dd01      	ble.n	8001594 <Common_GetFrom2Dmap+0xd6>
				xLowInd = i;
 8001590:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001592:	667b      	str	r3, [r7, #100]	; 0x64
		for (int i = 0; i < sizex; i++){
 8001594:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001596:	3301      	adds	r3, #1
 8001598:	64fb      	str	r3, [r7, #76]	; 0x4c
 800159a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	429a      	cmp	r2, r3
 80015a0:	dbe9      	blt.n	8001576 <Common_GetFrom2Dmap+0xb8>
		}
		xHighInd = xLowInd+1;
 80015a2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80015a4:	3301      	adds	r3, #1
 80015a6:	663b      	str	r3, [r7, #96]	; 0x60
	}
	xFractMin = arrayX[xLowInd];
 80015a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80015aa:	009b      	lsls	r3, r3, #2
 80015ac:	687a      	ldr	r2, [r7, #4]
 80015ae:	4413      	add	r3, r2
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	63fb      	str	r3, [r7, #60]	; 0x3c
	xFractMax = arrayX[xHighInd];
 80015b4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80015b6:	009b      	lsls	r3, r3, #2
 80015b8:	687a      	ldr	r2, [r7, #4]
 80015ba:	4413      	add	r3, r2
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	63bb      	str	r3, [r7, #56]	; 0x38


	if (y < arrayY[0]){
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	edd3 7a00 	vldr	s15, [r3]
 80015c6:	ed97 7a04 	vldr	s14, [r7, #16]
 80015ca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80015ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015d2:	d507      	bpl.n	80015e4 <Common_GetFrom2Dmap+0x126>
		yLowInd = 0;
 80015d4:	2300      	movs	r3, #0
 80015d6:	65fb      	str	r3, [r7, #92]	; 0x5c
		yHighInd = 1;
 80015d8:	2301      	movs	r3, #1
 80015da:	65bb      	str	r3, [r7, #88]	; 0x58
		yLimited = arrayY[0];
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	653b      	str	r3, [r7, #80]	; 0x50
 80015e2:	e03d      	b.n	8001660 <Common_GetFrom2Dmap+0x1a2>
	}else if (y >= arrayY[sizey-1]){
 80015e4:	68bb      	ldr	r3, [r7, #8]
 80015e6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80015ea:	3b01      	subs	r3, #1
 80015ec:	009b      	lsls	r3, r3, #2
 80015ee:	683a      	ldr	r2, [r7, #0]
 80015f0:	4413      	add	r3, r2
 80015f2:	edd3 7a00 	vldr	s15, [r3]
 80015f6:	ed97 7a04 	vldr	s14, [r7, #16]
 80015fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80015fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001602:	db0f      	blt.n	8001624 <Common_GetFrom2Dmap+0x166>
		yLowInd = sizey-2;
 8001604:	68bb      	ldr	r3, [r7, #8]
 8001606:	3b02      	subs	r3, #2
 8001608:	65fb      	str	r3, [r7, #92]	; 0x5c
		yHighInd = sizey-1;
 800160a:	68bb      	ldr	r3, [r7, #8]
 800160c:	3b01      	subs	r3, #1
 800160e:	65bb      	str	r3, [r7, #88]	; 0x58
		yLimited = arrayY[sizey-1];
 8001610:	68bb      	ldr	r3, [r7, #8]
 8001612:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001616:	3b01      	subs	r3, #1
 8001618:	009b      	lsls	r3, r3, #2
 800161a:	683a      	ldr	r2, [r7, #0]
 800161c:	4413      	add	r3, r2
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	653b      	str	r3, [r7, #80]	; 0x50
 8001622:	e01d      	b.n	8001660 <Common_GetFrom2Dmap+0x1a2>
	}
	else{
		yLimited = y;
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	653b      	str	r3, [r7, #80]	; 0x50
		for (int j = 0; j < sizex; j++){
 8001628:	2300      	movs	r3, #0
 800162a:	64bb      	str	r3, [r7, #72]	; 0x48
 800162c:	e011      	b.n	8001652 <Common_GetFrom2Dmap+0x194>
			if (y > arrayY[j])
 800162e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001630:	009b      	lsls	r3, r3, #2
 8001632:	683a      	ldr	r2, [r7, #0]
 8001634:	4413      	add	r3, r2
 8001636:	edd3 7a00 	vldr	s15, [r3]
 800163a:	ed97 7a04 	vldr	s14, [r7, #16]
 800163e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001642:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001646:	dd01      	ble.n	800164c <Common_GetFrom2Dmap+0x18e>
				yLowInd = j;
 8001648:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800164a:	65fb      	str	r3, [r7, #92]	; 0x5c
		for (int j = 0; j < sizex; j++){
 800164c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800164e:	3301      	adds	r3, #1
 8001650:	64bb      	str	r3, [r7, #72]	; 0x48
 8001652:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	429a      	cmp	r2, r3
 8001658:	dbe9      	blt.n	800162e <Common_GetFrom2Dmap+0x170>
		}
		yHighInd = yLowInd+1;
 800165a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800165c:	3301      	adds	r3, #1
 800165e:	65bb      	str	r3, [r7, #88]	; 0x58
	}
	yFractMin = arrayY[yLowInd];
 8001660:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001662:	009b      	lsls	r3, r3, #2
 8001664:	683a      	ldr	r2, [r7, #0]
 8001666:	4413      	add	r3, r2
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	637b      	str	r3, [r7, #52]	; 0x34
	yFractMax = arrayY[yHighInd];
 800166c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800166e:	009b      	lsls	r3, r3, #2
 8001670:	683a      	ldr	r2, [r7, #0]
 8001672:	4413      	add	r3, r2
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	633b      	str	r3, [r7, #48]	; 0x30


	float xFract = (xLimited-xFractMin)/(xFractMax-xFractMin);
 8001678:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800167c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001680:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001684:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8001688:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800168c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001690:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001694:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	float yFract = (yLimited-yFractMin)/(yFractMax-yFractMin);
 8001698:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800169c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80016a0:	ee77 6a67 	vsub.f32	s13, s14, s15
 80016a4:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80016a8:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80016ac:	ee37 7a67 	vsub.f32	s14, s14, s15
 80016b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016b4:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28


	float a = mapZ[xLowInd][yLowInd];
 80016b8:	4602      	mov	r2, r0
 80016ba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80016bc:	fb03 f302 	mul.w	r3, r3, r2
 80016c0:	009b      	lsls	r3, r3, #2
 80016c2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80016c4:	441a      	add	r2, r3
 80016c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80016c8:	009b      	lsls	r3, r3, #2
 80016ca:	4413      	add	r3, r2
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	627b      	str	r3, [r7, #36]	; 0x24
	float b = mapZ[xLowInd][yHighInd];
 80016d0:	4602      	mov	r2, r0
 80016d2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80016d4:	fb03 f302 	mul.w	r3, r3, r2
 80016d8:	009b      	lsls	r3, r3, #2
 80016da:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80016dc:	441a      	add	r2, r3
 80016de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80016e0:	009b      	lsls	r3, r3, #2
 80016e2:	4413      	add	r3, r2
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	623b      	str	r3, [r7, #32]
	float c = mapZ[xHighInd][yLowInd];
 80016e8:	4602      	mov	r2, r0
 80016ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80016ec:	fb03 f302 	mul.w	r3, r3, r2
 80016f0:	009b      	lsls	r3, r3, #2
 80016f2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80016f4:	441a      	add	r2, r3
 80016f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80016f8:	009b      	lsls	r3, r3, #2
 80016fa:	4413      	add	r3, r2
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	61fb      	str	r3, [r7, #28]
	float d = mapZ[xHighInd][yHighInd];
 8001700:	4602      	mov	r2, r0
 8001702:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001704:	fb03 f302 	mul.w	r3, r3, r2
 8001708:	009b      	lsls	r3, r3, #2
 800170a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800170c:	441a      	add	r2, r3
 800170e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001710:	009b      	lsls	r3, r3, #2
 8001712:	4413      	add	r3, r2
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	61bb      	str	r3, [r7, #24]

	val = a*(1-xFract)*(1-yFract) + b*(1-xFract)*(yFract) + c*(xFract)*(1-yFract) + d*(xFract)*(yFract);
 8001718:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800171c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001720:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001724:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001728:	ee27 7a27 	vmul.f32	s14, s14, s15
 800172c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001730:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001734:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001738:	ee27 7a27 	vmul.f32	s14, s14, s15
 800173c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001740:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001744:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001748:	edd7 7a08 	vldr	s15, [r7, #32]
 800174c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001750:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001754:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001758:	ee37 7a27 	vadd.f32	s14, s14, s15
 800175c:	edd7 6a07 	vldr	s13, [r7, #28]
 8001760:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001764:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001768:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800176c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001770:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001774:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001778:	ee37 7a27 	vadd.f32	s14, s14, s15
 800177c:	edd7 6a06 	vldr	s13, [r7, #24]
 8001780:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001784:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001788:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800178c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001790:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001794:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40

	return val;
 8001798:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800179a:	ee07 3a90 	vmov	s15, r3
}
 800179e:	eeb0 0a67 	vmov.f32	s0, s15
 80017a2:	3768      	adds	r7, #104	; 0x68
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bc90      	pop	{r4, r7}
 80017a8:	4770      	bx	lr
	...

080017ac <Ignition_Init_FireTIM>:

// INIT FUNCTIONS  =================================================
/*
 *  Function to initialize timer related variables of first branch (cylinders 1 and 2)
 */
void Ignition_Init_FireTIM(TIM_HandleTypeDef *Handler, uint8_t Channel, uint8_t ActiveChannel){
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b082      	sub	sp, #8
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
 80017b4:	460b      	mov	r3, r1
 80017b6:	70fb      	strb	r3, [r7, #3]
 80017b8:	4613      	mov	r3, r2
 80017ba:	70bb      	strb	r3, [r7, #2]
	Ignition_FireTIM.Handler = Handler;
 80017bc:	4a0a      	ldr	r2, [pc, #40]	; (80017e8 <Ignition_Init_FireTIM+0x3c>)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6013      	str	r3, [r2, #0]
	Ignition_FireTIM.Channel = Channel;
 80017c2:	4a09      	ldr	r2, [pc, #36]	; (80017e8 <Ignition_Init_FireTIM+0x3c>)
 80017c4:	78fb      	ldrb	r3, [r7, #3]
 80017c6:	7113      	strb	r3, [r2, #4]
	Ignition_FireTIM.ActiveChannel = ActiveChannel;
 80017c8:	4a07      	ldr	r2, [pc, #28]	; (80017e8 <Ignition_Init_FireTIM+0x3c>)
 80017ca:	78bb      	ldrb	r3, [r7, #2]
 80017cc:	7153      	strb	r3, [r2, #5]
	HAL_TIM_Base_Start_IT(Handler);
 80017ce:	6878      	ldr	r0, [r7, #4]
 80017d0:	f004 f941 	bl	8005a56 <HAL_TIM_Base_Start_IT>
	HAL_TIM_OC_Start_IT(Handler, Channel);
 80017d4:	78fb      	ldrb	r3, [r7, #3]
 80017d6:	4619      	mov	r1, r3
 80017d8:	6878      	ldr	r0, [r7, #4]
 80017da:	f004 f995 	bl	8005b08 <HAL_TIM_OC_Start_IT>
}
 80017de:	bf00      	nop
 80017e0:	3708      	adds	r7, #8
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	2000026c 	.word	0x2000026c

080017ec <Ignition_Init_DwellTIM>:
/*
 *  Function to initialize timer related variables of second branch (cylinders 3 and 4)
 */
void Ignition_Init_DwellTIM(TIM_HandleTypeDef *Handler, uint8_t Channel, uint8_t ActiveChannel){
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
 80017f4:	460b      	mov	r3, r1
 80017f6:	70fb      	strb	r3, [r7, #3]
 80017f8:	4613      	mov	r3, r2
 80017fa:	70bb      	strb	r3, [r7, #2]
	Ignition_DwellTIM.Handler = Handler;
 80017fc:	4a0a      	ldr	r2, [pc, #40]	; (8001828 <Ignition_Init_DwellTIM+0x3c>)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6013      	str	r3, [r2, #0]
	Ignition_DwellTIM.Channel = Channel;
 8001802:	4a09      	ldr	r2, [pc, #36]	; (8001828 <Ignition_Init_DwellTIM+0x3c>)
 8001804:	78fb      	ldrb	r3, [r7, #3]
 8001806:	7113      	strb	r3, [r2, #4]
	Ignition_DwellTIM.ActiveChannel = ActiveChannel;
 8001808:	4a07      	ldr	r2, [pc, #28]	; (8001828 <Ignition_Init_DwellTIM+0x3c>)
 800180a:	78bb      	ldrb	r3, [r7, #2]
 800180c:	7153      	strb	r3, [r2, #5]
	HAL_TIM_Base_Start_IT(Handler);
 800180e:	6878      	ldr	r0, [r7, #4]
 8001810:	f004 f921 	bl	8005a56 <HAL_TIM_Base_Start_IT>
	HAL_TIM_OC_Start_IT(Handler, Channel);
 8001814:	78fb      	ldrb	r3, [r7, #3]
 8001816:	4619      	mov	r1, r3
 8001818:	6878      	ldr	r0, [r7, #4]
 800181a:	f004 f975 	bl	8005b08 <HAL_TIM_OC_Start_IT>
}
 800181e:	bf00      	nop
 8001820:	3708      	adds	r7, #8
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	20000274 	.word	0x20000274

0800182c <Ignition_Init_IOConfig>:

void Ignition_Init_IOConfig(GPIO_TypeDef *coilport1,__IO uint16_t coilpin1,GPIO_TypeDef *coilport2,__IO uint16_t coilpin2,GPIO_TypeDef *coilport3,__IO uint16_t coilpin3,GPIO_TypeDef *coilport4,__IO uint16_t coilpin4)
{
 800182c:	b480      	push	{r7}
 800182e:	b085      	sub	sp, #20
 8001830:	af00      	add	r7, sp, #0
 8001832:	60f8      	str	r0, [r7, #12]
 8001834:	607a      	str	r2, [r7, #4]
 8001836:	461a      	mov	r2, r3
 8001838:	460b      	mov	r3, r1
 800183a:	817b      	strh	r3, [r7, #10]
 800183c:	4613      	mov	r3, r2
 800183e:	813b      	strh	r3, [r7, #8]
	Ignition_Cyl1.coilport = coilport1;
 8001840:	4a10      	ldr	r2, [pc, #64]	; (8001884 <Ignition_Init_IOConfig+0x58>)
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	6093      	str	r3, [r2, #8]
	Ignition_Cyl1.coilpin = coilpin1;
 8001846:	897b      	ldrh	r3, [r7, #10]
 8001848:	b29a      	uxth	r2, r3
 800184a:	4b0e      	ldr	r3, [pc, #56]	; (8001884 <Ignition_Init_IOConfig+0x58>)
 800184c:	819a      	strh	r2, [r3, #12]
	Ignition_Cyl2.coilport = coilport2;
 800184e:	4a0e      	ldr	r2, [pc, #56]	; (8001888 <Ignition_Init_IOConfig+0x5c>)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6093      	str	r3, [r2, #8]
	Ignition_Cyl2.coilpin = coilpin2;
 8001854:	893b      	ldrh	r3, [r7, #8]
 8001856:	b29a      	uxth	r2, r3
 8001858:	4b0b      	ldr	r3, [pc, #44]	; (8001888 <Ignition_Init_IOConfig+0x5c>)
 800185a:	819a      	strh	r2, [r3, #12]
	Ignition_Cyl3.coilport = coilport3;
 800185c:	4a0b      	ldr	r2, [pc, #44]	; (800188c <Ignition_Init_IOConfig+0x60>)
 800185e:	69bb      	ldr	r3, [r7, #24]
 8001860:	6093      	str	r3, [r2, #8]
	Ignition_Cyl3.coilpin = coilpin3;
 8001862:	8bbb      	ldrh	r3, [r7, #28]
 8001864:	b29a      	uxth	r2, r3
 8001866:	4b09      	ldr	r3, [pc, #36]	; (800188c <Ignition_Init_IOConfig+0x60>)
 8001868:	819a      	strh	r2, [r3, #12]
	Ignition_Cyl4.coilport = coilport4;
 800186a:	4a09      	ldr	r2, [pc, #36]	; (8001890 <Ignition_Init_IOConfig+0x64>)
 800186c:	6a3b      	ldr	r3, [r7, #32]
 800186e:	6093      	str	r3, [r2, #8]
	Ignition_Cyl4.coilpin = coilpin4;
 8001870:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001872:	b29a      	uxth	r2, r3
 8001874:	4b06      	ldr	r3, [pc, #24]	; (8001890 <Ignition_Init_IOConfig+0x64>)
 8001876:	819a      	strh	r2, [r3, #12]
}
 8001878:	bf00      	nop
 800187a:	3714      	adds	r7, #20
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr
 8001884:	200001dc 	.word	0x200001dc
 8001888:	2000020c 	.word	0x2000020c
 800188c:	2000023c 	.word	0x2000023c
 8001890:	2000027c 	.word	0x2000027c

08001894 <Ignition_Init_IgnitionCyl>:

void Ignition_Init_IgnitionCyl(){
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0
	Ignition_Cyl1.cylinderID = 1;
 8001898:	4b44      	ldr	r3, [pc, #272]	; (80019ac <Ignition_Init_IgnitionCyl+0x118>)
 800189a:	2201      	movs	r2, #1
 800189c:	601a      	str	r2, [r3, #0]
	Ignition_Cyl1.firestate = FIRED;
 800189e:	4b43      	ldr	r3, [pc, #268]	; (80019ac <Ignition_Init_IgnitionCyl+0x118>)
 80018a0:	2201      	movs	r2, #1
 80018a2:	715a      	strb	r2, [r3, #5]
	Ignition_Cyl1.fireangle = 30;
 80018a4:	4b41      	ldr	r3, [pc, #260]	; (80019ac <Ignition_Init_IgnitionCyl+0x118>)
 80018a6:	4a42      	ldr	r2, [pc, #264]	; (80019b0 <Ignition_Init_IgnitionCyl+0x11c>)
 80018a8:	611a      	str	r2, [r3, #16]
	Ignition_Cyl1.firetooth = 4;
 80018aa:	4b40      	ldr	r3, [pc, #256]	; (80019ac <Ignition_Init_IgnitionCyl+0x118>)
 80018ac:	2204      	movs	r2, #4
 80018ae:	619a      	str	r2, [r3, #24]
	Ignition_Cyl1.time2fire = 10;
 80018b0:	4b3e      	ldr	r3, [pc, #248]	; (80019ac <Ignition_Init_IgnitionCyl+0x118>)
 80018b2:	220a      	movs	r2, #10
 80018b4:	621a      	str	r2, [r3, #32]
	Ignition_Cyl1.fireCamCycle = 0;
 80018b6:	4b3d      	ldr	r3, [pc, #244]	; (80019ac <Ignition_Init_IgnitionCyl+0x118>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	629a      	str	r2, [r3, #40]	; 0x28
	Ignition_Cyl1.dwellstate = IDLE;
 80018bc:	4b3b      	ldr	r3, [pc, #236]	; (80019ac <Ignition_Init_IgnitionCyl+0x118>)
 80018be:	2200      	movs	r2, #0
 80018c0:	711a      	strb	r2, [r3, #4]
	Ignition_Cyl1.dwellangle = 160;
 80018c2:	4b3a      	ldr	r3, [pc, #232]	; (80019ac <Ignition_Init_IgnitionCyl+0x118>)
 80018c4:	4a3b      	ldr	r2, [pc, #236]	; (80019b4 <Ignition_Init_IgnitionCyl+0x120>)
 80018c6:	615a      	str	r2, [r3, #20]
	Ignition_Cyl1.dwelltooth = 2;
 80018c8:	4b38      	ldr	r3, [pc, #224]	; (80019ac <Ignition_Init_IgnitionCyl+0x118>)
 80018ca:	2202      	movs	r2, #2
 80018cc:	61da      	str	r2, [r3, #28]
	Ignition_Cyl1.time2dwell = 10;
 80018ce:	4b37      	ldr	r3, [pc, #220]	; (80019ac <Ignition_Init_IgnitionCyl+0x118>)
 80018d0:	220a      	movs	r2, #10
 80018d2:	625a      	str	r2, [r3, #36]	; 0x24
	Ignition_Cyl1.dwellCamCycle = 0;
 80018d4:	4b35      	ldr	r3, [pc, #212]	; (80019ac <Ignition_Init_IgnitionCyl+0x118>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	62da      	str	r2, [r3, #44]	; 0x2c

	Ignition_Cyl2.cylinderID = 2;
 80018da:	4b37      	ldr	r3, [pc, #220]	; (80019b8 <Ignition_Init_IgnitionCyl+0x124>)
 80018dc:	2202      	movs	r2, #2
 80018de:	601a      	str	r2, [r3, #0]
	Ignition_Cyl2.firestate = FIRED;
 80018e0:	4b35      	ldr	r3, [pc, #212]	; (80019b8 <Ignition_Init_IgnitionCyl+0x124>)
 80018e2:	2201      	movs	r2, #1
 80018e4:	715a      	strb	r2, [r3, #5]
	Ignition_Cyl2.fireangle = 30;
 80018e6:	4b34      	ldr	r3, [pc, #208]	; (80019b8 <Ignition_Init_IgnitionCyl+0x124>)
 80018e8:	4a31      	ldr	r2, [pc, #196]	; (80019b0 <Ignition_Init_IgnitionCyl+0x11c>)
 80018ea:	611a      	str	r2, [r3, #16]
	Ignition_Cyl2.firetooth = 12;
 80018ec:	4b32      	ldr	r3, [pc, #200]	; (80019b8 <Ignition_Init_IgnitionCyl+0x124>)
 80018ee:	220c      	movs	r2, #12
 80018f0:	619a      	str	r2, [r3, #24]
	Ignition_Cyl2.time2fire = 10;
 80018f2:	4b31      	ldr	r3, [pc, #196]	; (80019b8 <Ignition_Init_IgnitionCyl+0x124>)
 80018f4:	220a      	movs	r2, #10
 80018f6:	621a      	str	r2, [r3, #32]
	Ignition_Cyl2.fireCamCycle = 1;
 80018f8:	4b2f      	ldr	r3, [pc, #188]	; (80019b8 <Ignition_Init_IgnitionCyl+0x124>)
 80018fa:	2201      	movs	r2, #1
 80018fc:	629a      	str	r2, [r3, #40]	; 0x28
	Ignition_Cyl2.dwellstate = IDLE;
 80018fe:	4b2e      	ldr	r3, [pc, #184]	; (80019b8 <Ignition_Init_IgnitionCyl+0x124>)
 8001900:	2200      	movs	r2, #0
 8001902:	711a      	strb	r2, [r3, #4]
	Ignition_Cyl2.dwellangle = 160;
 8001904:	4b2c      	ldr	r3, [pc, #176]	; (80019b8 <Ignition_Init_IgnitionCyl+0x124>)
 8001906:	4a2b      	ldr	r2, [pc, #172]	; (80019b4 <Ignition_Init_IgnitionCyl+0x120>)
 8001908:	615a      	str	r2, [r3, #20]
	Ignition_Cyl2.dwelltooth = 9;
 800190a:	4b2b      	ldr	r3, [pc, #172]	; (80019b8 <Ignition_Init_IgnitionCyl+0x124>)
 800190c:	2209      	movs	r2, #9
 800190e:	61da      	str	r2, [r3, #28]
	Ignition_Cyl2.time2dwell = 10;
 8001910:	4b29      	ldr	r3, [pc, #164]	; (80019b8 <Ignition_Init_IgnitionCyl+0x124>)
 8001912:	220a      	movs	r2, #10
 8001914:	625a      	str	r2, [r3, #36]	; 0x24
	Ignition_Cyl2.dwellCamCycle = 1;
 8001916:	4b28      	ldr	r3, [pc, #160]	; (80019b8 <Ignition_Init_IgnitionCyl+0x124>)
 8001918:	2201      	movs	r2, #1
 800191a:	62da      	str	r2, [r3, #44]	; 0x2c

	Ignition_Cyl3.cylinderID = 3;
 800191c:	4b27      	ldr	r3, [pc, #156]	; (80019bc <Ignition_Init_IgnitionCyl+0x128>)
 800191e:	2203      	movs	r2, #3
 8001920:	601a      	str	r2, [r3, #0]
	Ignition_Cyl3.firestate = FIRED;
 8001922:	4b26      	ldr	r3, [pc, #152]	; (80019bc <Ignition_Init_IgnitionCyl+0x128>)
 8001924:	2201      	movs	r2, #1
 8001926:	715a      	strb	r2, [r3, #5]
	Ignition_Cyl3.fireangle = 250;
 8001928:	4b24      	ldr	r3, [pc, #144]	; (80019bc <Ignition_Init_IgnitionCyl+0x128>)
 800192a:	4a25      	ldr	r2, [pc, #148]	; (80019c0 <Ignition_Init_IgnitionCyl+0x12c>)
 800192c:	611a      	str	r2, [r3, #16]
	Ignition_Cyl3.firetooth = 8;
 800192e:	4b23      	ldr	r3, [pc, #140]	; (80019bc <Ignition_Init_IgnitionCyl+0x128>)
 8001930:	2208      	movs	r2, #8
 8001932:	619a      	str	r2, [r3, #24]
	Ignition_Cyl3.time2fire = 10;
 8001934:	4b21      	ldr	r3, [pc, #132]	; (80019bc <Ignition_Init_IgnitionCyl+0x128>)
 8001936:	220a      	movs	r2, #10
 8001938:	621a      	str	r2, [r3, #32]
	Ignition_Cyl3.fireCamCycle = 0;
 800193a:	4b20      	ldr	r3, [pc, #128]	; (80019bc <Ignition_Init_IgnitionCyl+0x128>)
 800193c:	2200      	movs	r2, #0
 800193e:	629a      	str	r2, [r3, #40]	; 0x28
	Ignition_Cyl3.dwellstate = IDLE;
 8001940:	4b1e      	ldr	r3, [pc, #120]	; (80019bc <Ignition_Init_IgnitionCyl+0x128>)
 8001942:	2200      	movs	r2, #0
 8001944:	711a      	strb	r2, [r3, #4]
	Ignition_Cyl3.dwellangle = 280;
 8001946:	4b1d      	ldr	r3, [pc, #116]	; (80019bc <Ignition_Init_IgnitionCyl+0x128>)
 8001948:	4a1e      	ldr	r2, [pc, #120]	; (80019c4 <Ignition_Init_IgnitionCyl+0x130>)
 800194a:	615a      	str	r2, [r3, #20]
	Ignition_Cyl3.dwelltooth = 5;
 800194c:	4b1b      	ldr	r3, [pc, #108]	; (80019bc <Ignition_Init_IgnitionCyl+0x128>)
 800194e:	2205      	movs	r2, #5
 8001950:	61da      	str	r2, [r3, #28]
	Ignition_Cyl3.time2dwell = 10;
 8001952:	4b1a      	ldr	r3, [pc, #104]	; (80019bc <Ignition_Init_IgnitionCyl+0x128>)
 8001954:	220a      	movs	r2, #10
 8001956:	625a      	str	r2, [r3, #36]	; 0x24
	Ignition_Cyl3.dwellCamCycle = 0;
 8001958:	4b18      	ldr	r3, [pc, #96]	; (80019bc <Ignition_Init_IgnitionCyl+0x128>)
 800195a:	2200      	movs	r2, #0
 800195c:	62da      	str	r2, [r3, #44]	; 0x2c

	Ignition_Cyl4.cylinderID = 4;
 800195e:	4b1a      	ldr	r3, [pc, #104]	; (80019c8 <Ignition_Init_IgnitionCyl+0x134>)
 8001960:	2204      	movs	r2, #4
 8001962:	601a      	str	r2, [r3, #0]
	Ignition_Cyl4.firestate = FIRED;
 8001964:	4b18      	ldr	r3, [pc, #96]	; (80019c8 <Ignition_Init_IgnitionCyl+0x134>)
 8001966:	2201      	movs	r2, #1
 8001968:	715a      	strb	r2, [r3, #5]
	Ignition_Cyl4.fireangle = 250;
 800196a:	4b17      	ldr	r3, [pc, #92]	; (80019c8 <Ignition_Init_IgnitionCyl+0x134>)
 800196c:	4a14      	ldr	r2, [pc, #80]	; (80019c0 <Ignition_Init_IgnitionCyl+0x12c>)
 800196e:	611a      	str	r2, [r3, #16]
	Ignition_Cyl4.firetooth = 16;
 8001970:	4b15      	ldr	r3, [pc, #84]	; (80019c8 <Ignition_Init_IgnitionCyl+0x134>)
 8001972:	2210      	movs	r2, #16
 8001974:	619a      	str	r2, [r3, #24]
	Ignition_Cyl4.time2fire = 10;
 8001976:	4b14      	ldr	r3, [pc, #80]	; (80019c8 <Ignition_Init_IgnitionCyl+0x134>)
 8001978:	220a      	movs	r2, #10
 800197a:	621a      	str	r2, [r3, #32]
	Ignition_Cyl4.fireCamCycle = 1;
 800197c:	4b12      	ldr	r3, [pc, #72]	; (80019c8 <Ignition_Init_IgnitionCyl+0x134>)
 800197e:	2201      	movs	r2, #1
 8001980:	629a      	str	r2, [r3, #40]	; 0x28
	Ignition_Cyl4.dwellstate = IDLE;
 8001982:	4b11      	ldr	r3, [pc, #68]	; (80019c8 <Ignition_Init_IgnitionCyl+0x134>)
 8001984:	2200      	movs	r2, #0
 8001986:	711a      	strb	r2, [r3, #4]
	Ignition_Cyl4.dwellangle = 280;
 8001988:	4b0f      	ldr	r3, [pc, #60]	; (80019c8 <Ignition_Init_IgnitionCyl+0x134>)
 800198a:	4a0e      	ldr	r2, [pc, #56]	; (80019c4 <Ignition_Init_IgnitionCyl+0x130>)
 800198c:	615a      	str	r2, [r3, #20]
	Ignition_Cyl4.dwelltooth = 10;
 800198e:	4b0e      	ldr	r3, [pc, #56]	; (80019c8 <Ignition_Init_IgnitionCyl+0x134>)
 8001990:	220a      	movs	r2, #10
 8001992:	61da      	str	r2, [r3, #28]
	Ignition_Cyl4.time2dwell = 10;
 8001994:	4b0c      	ldr	r3, [pc, #48]	; (80019c8 <Ignition_Init_IgnitionCyl+0x134>)
 8001996:	220a      	movs	r2, #10
 8001998:	625a      	str	r2, [r3, #36]	; 0x24
	Ignition_Cyl4.dwellCamCycle = 1;
 800199a:	4b0b      	ldr	r3, [pc, #44]	; (80019c8 <Ignition_Init_IgnitionCyl+0x134>)
 800199c:	2201      	movs	r2, #1
 800199e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80019a0:	bf00      	nop
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr
 80019aa:	bf00      	nop
 80019ac:	200001dc 	.word	0x200001dc
 80019b0:	41f00000 	.word	0x41f00000
 80019b4:	43200000 	.word	0x43200000
 80019b8:	2000020c 	.word	0x2000020c
 80019bc:	2000023c 	.word	0x2000023c
 80019c0:	437a0000 	.word	0x437a0000
 80019c4:	438c0000 	.word	0x438c0000
 80019c8:	2000027c 	.word	0x2000027c

080019cc <Ignition_GetInputs>:


// MAIN IGNITION LOOP ==============================================
void Ignition_GetInputs(){
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0
	_Crank_ShaftFreqHz = Crank_ShaftFreqHz;
 80019d0:	4b04      	ldr	r3, [pc, #16]	; (80019e4 <Ignition_GetInputs+0x18>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a04      	ldr	r2, [pc, #16]	; (80019e8 <Ignition_GetInputs+0x1c>)
 80019d6:	6013      	str	r3, [r2, #0]
}
 80019d8:	bf00      	nop
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr
 80019e2:	bf00      	nop
 80019e4:	200000b0 	.word	0x200000b0
 80019e8:	200000d0 	.word	0x200000d0

080019ec <Ignition_MainLoop>:

void Ignition_MainLoop(){
 80019ec:	b580      	push	{r7, lr}
 80019ee:	af00      	add	r7, sp, #0
	// set for all cylinders
	Ignition_GetInputs();
 80019f0:	f7ff ffec 	bl	80019cc <Ignition_GetInputs>
	Ignition_GetDwellTime(250);
 80019f4:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8001a30 <Ignition_MainLoop+0x44>
 80019f8:	f000 f8ac 	bl	8001b54 <Ignition_GetDwellTime>
	Ignition_SetDwellTiming(&Ignition_Cyl1);
 80019fc:	480d      	ldr	r0, [pc, #52]	; (8001a34 <Ignition_MainLoop+0x48>)
 80019fe:	f000 f937 	bl	8001c70 <Ignition_SetDwellTiming>
	Ignition_SetIgnitionTiming(&Ignition_Cyl1);
 8001a02:	480c      	ldr	r0, [pc, #48]	; (8001a34 <Ignition_MainLoop+0x48>)
 8001a04:	f000 f852 	bl	8001aac <Ignition_SetIgnitionTiming>
	Ignition_SetDwellTiming(&Ignition_Cyl2);
 8001a08:	480b      	ldr	r0, [pc, #44]	; (8001a38 <Ignition_MainLoop+0x4c>)
 8001a0a:	f000 f931 	bl	8001c70 <Ignition_SetDwellTiming>
	Ignition_SetIgnitionTiming(&Ignition_Cyl2);
 8001a0e:	480a      	ldr	r0, [pc, #40]	; (8001a38 <Ignition_MainLoop+0x4c>)
 8001a10:	f000 f84c 	bl	8001aac <Ignition_SetIgnitionTiming>
	Ignition_SetDwellTiming(&Ignition_Cyl3);
 8001a14:	4809      	ldr	r0, [pc, #36]	; (8001a3c <Ignition_MainLoop+0x50>)
 8001a16:	f000 f92b 	bl	8001c70 <Ignition_SetDwellTiming>
	Ignition_SetIgnitionTiming(&Ignition_Cyl3);
 8001a1a:	4808      	ldr	r0, [pc, #32]	; (8001a3c <Ignition_MainLoop+0x50>)
 8001a1c:	f000 f846 	bl	8001aac <Ignition_SetIgnitionTiming>
	Ignition_SetDwellTiming(&Ignition_Cyl4);
 8001a20:	4807      	ldr	r0, [pc, #28]	; (8001a40 <Ignition_MainLoop+0x54>)
 8001a22:	f000 f925 	bl	8001c70 <Ignition_SetDwellTiming>
	Ignition_SetIgnitionTiming(&Ignition_Cyl4);
 8001a26:	4806      	ldr	r0, [pc, #24]	; (8001a40 <Ignition_MainLoop+0x54>)
 8001a28:	f000 f840 	bl	8001aac <Ignition_SetIgnitionTiming>
}
 8001a2c:	bf00      	nop
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	437a0000 	.word	0x437a0000
 8001a34:	200001dc 	.word	0x200001dc
 8001a38:	2000020c 	.word	0x2000020c
 8001a3c:	2000023c 	.word	0x2000023c
 8001a40:	2000027c 	.word	0x2000027c

08001a44 <Ignition_DefineIgnitionTeeth>:


// FIRE FUNCTIONS ==================================================
void Ignition_DefineIgnitionTeeth(Ignition_CoilCyl *Cylinder){
 8001a44:	b480      	push	{r7}
 8001a46:	b087      	sub	sp, #28
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
	int CrankTeethNmbr = CrankCfg.Crank_TeethNmbr_P;
 8001a4c:	4b15      	ldr	r3, [pc, #84]	; (8001aa4 <Ignition_DefineIgnitionTeeth+0x60>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	617b      	str	r3, [r7, #20]
	int CrankMissingTeethNmbr = CrankCfg.Crank_MissingTeethNmbr_P;
 8001a52:	4b14      	ldr	r3, [pc, #80]	; (8001aa4 <Ignition_DefineIgnitionTeeth+0x60>)
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	613b      	str	r3, [r7, #16]
	float fireangle = Cylinder->fireangle;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	691b      	ldr	r3, [r3, #16]
 8001a5c:	60fb      	str	r3, [r7, #12]
	int triggerTooth = 0;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	60bb      	str	r3, [r7, #8]

	triggerTooth = (CrankTeethNmbr+CrankMissingTeethNmbr)*fireangle/360+1;
 8001a62:	697a      	ldr	r2, [r7, #20]
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	4413      	add	r3, r2
 8001a68:	ee07 3a90 	vmov	s15, r3
 8001a6c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a70:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a74:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a78:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8001aa8 <Ignition_DefineIgnitionTeeth+0x64>
 8001a7c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a80:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001a84:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001a88:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a8c:	ee17 3a90 	vmov	r3, s15
 8001a90:	60bb      	str	r3, [r7, #8]
	Cylinder->firetooth = triggerTooth;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	68ba      	ldr	r2, [r7, #8]
 8001a96:	619a      	str	r2, [r3, #24]
}
 8001a98:	bf00      	nop
 8001a9a:	371c      	adds	r7, #28
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr
 8001aa4:	20000584 	.word	0x20000584
 8001aa8:	43b40000 	.word	0x43b40000

08001aac <Ignition_SetIgnitionTiming>:
/**
  * @brief Ignition Function which will set the ignition timer and the tooth number at which timer has to start counting, in order to fire at exact angle.
  * @param Cylinder - Info about the cylinder chosen
  * @retval None
  */
void Ignition_SetIgnitionTiming(Ignition_CoilCyl *Cylinder){
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b088      	sub	sp, #32
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
	Ignition_DefineIgnitionTeeth(Cylinder);		// Define the closest previous tooth at given cylinder ignition angle
 8001ab4:	6878      	ldr	r0, [r7, #4]
 8001ab6:	f7ff ffc5 	bl	8001a44 <Ignition_DefineIgnitionTeeth>

	float requestedAngle = Cylinder->fireangle;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	691b      	ldr	r3, [r3, #16]
 8001abe:	617b      	str	r3, [r7, #20]
	int triggerTooth = Cylinder->firetooth;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	699b      	ldr	r3, [r3, #24]
 8001ac4:	61fb      	str	r3, [r7, #28]
	float triggerAngle;
	float delayAngle;
	uint32_t Ignition_TimeToFire;

	// Perform correction if angle is after the missing teeth
	if (triggerTooth == CrankCfg.Crank_TeethNmbr_P+1){
 8001ac6:	4b21      	ldr	r3, [pc, #132]	; (8001b4c <Ignition_SetIgnitionTiming+0xa0>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	3301      	adds	r3, #1
 8001acc:	69fa      	ldr	r2, [r7, #28]
 8001ace:	429a      	cmp	r2, r3
 8001ad0:	d105      	bne.n	8001ade <Ignition_SetIgnitionTiming+0x32>
		triggerTooth = 0;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	61fb      	str	r3, [r7, #28]
		delayAngle = 0;
 8001ad6:	f04f 0300 	mov.w	r3, #0
 8001ada:	60fb      	str	r3, [r7, #12]
 8001adc:	e026      	b.n	8001b2c <Ignition_SetIgnitionTiming+0x80>
	}else{
		triggerAngle = (triggerTooth-1)*360/(CrankCfg.Crank_TeethNmbr_P+CrankCfg.Crank_MissingTeethNmbr_P);
 8001ade:	69fb      	ldr	r3, [r7, #28]
 8001ae0:	3b01      	subs	r3, #1
 8001ae2:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8001ae6:	fb02 f203 	mul.w	r2, r2, r3
 8001aea:	4b18      	ldr	r3, [pc, #96]	; (8001b4c <Ignition_SetIgnitionTiming+0xa0>)
 8001aec:	6819      	ldr	r1, [r3, #0]
 8001aee:	4b17      	ldr	r3, [pc, #92]	; (8001b4c <Ignition_SetIgnitionTiming+0xa0>)
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	440b      	add	r3, r1
 8001af4:	fb92 f3f3 	sdiv	r3, r2, r3
 8001af8:	ee07 3a90 	vmov	s15, r3
 8001afc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b00:	edc7 7a04 	vstr	s15, [r7, #16]
		delayAngle = requestedAngle - triggerAngle;
 8001b04:	ed97 7a05 	vldr	s14, [r7, #20]
 8001b08:	edd7 7a04 	vldr	s15, [r7, #16]
 8001b0c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b10:	edc7 7a03 	vstr	s15, [r7, #12]
		Ignition_TimeToFire = Ignition_AngleToUs(_Crank_ShaftFreqHz,delayAngle);
 8001b14:	4b0e      	ldr	r3, [pc, #56]	; (8001b50 <Ignition_SetIgnitionTiming+0xa4>)
 8001b16:	edd3 7a00 	vldr	s15, [r3]
 8001b1a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b1e:	ed97 0a03 	vldr	s0, [r7, #12]
 8001b22:	ee17 0a90 	vmov	r0, s15
 8001b26:	f000 f905 	bl	8001d34 <Ignition_AngleToUs>
 8001b2a:	61b8      	str	r0, [r7, #24]
	}

	// correction in case CCR and ARR dont work with 0
	if (Ignition_TimeToFire == 0)
 8001b2c:	69bb      	ldr	r3, [r7, #24]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d101      	bne.n	8001b36 <Ignition_SetIgnitionTiming+0x8a>
		Ignition_TimeToFire = 1;
 8001b32:	2301      	movs	r3, #1
 8001b34:	61bb      	str	r3, [r7, #24]

	Cylinder->time2fire = Ignition_TimeToFire;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	69ba      	ldr	r2, [r7, #24]
 8001b3a:	621a      	str	r2, [r3, #32]
	Cylinder->firetooth = triggerTooth;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	69fa      	ldr	r2, [r7, #28]
 8001b40:	619a      	str	r2, [r3, #24]
}
 8001b42:	bf00      	nop
 8001b44:	3720      	adds	r7, #32
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	20000584 	.word	0x20000584
 8001b50:	200000d0 	.word	0x200000d0

08001b54 <Ignition_GetDwellTime>:


// DWELL FUNCTIONS =================================================
void Ignition_GetDwellTime(float AppliedTorque){
 8001b54:	b480      	push	{r7}
 8001b56:	b083      	sub	sp, #12
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	ed87 0a01 	vstr	s0, [r7, #4]
	Ignition_DwellTimeUs_P = 2000;
 8001b5e:	4b05      	ldr	r3, [pc, #20]	; (8001b74 <Ignition_GetDwellTime+0x20>)
 8001b60:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001b64:	601a      	str	r2, [r3, #0]
}
 8001b66:	bf00      	nop
 8001b68:	370c      	adds	r7, #12
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr
 8001b72:	bf00      	nop
 8001b74:	20000000 	.word	0x20000000

08001b78 <Ignition_DefineDwellTeeth>:

void Ignition_DefineDwellTeeth(Ignition_CoilCyl *Cylinder){
 8001b78:	b480      	push	{r7}
 8001b7a:	b089      	sub	sp, #36	; 0x24
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
	int CrankTeethNmbr = CrankCfg.Crank_TeethNmbr_P;
 8001b80:	4b36      	ldr	r3, [pc, #216]	; (8001c5c <Ignition_DefineDwellTeeth+0xe4>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	617b      	str	r3, [r7, #20]
	int CrankMissingTeethNmbr = CrankCfg.Crank_MissingTeethNmbr_P;
 8001b86:	4b35      	ldr	r3, [pc, #212]	; (8001c5c <Ignition_DefineDwellTeeth+0xe4>)
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	613b      	str	r3, [r7, #16]
	float fireangle = Cylinder->fireangle;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	691b      	ldr	r3, [r3, #16]
 8001b90:	60fb      	str	r3, [r7, #12]
	int triggerTooth = 0;
 8001b92:	2300      	movs	r3, #0
 8001b94:	61fb      	str	r3, [r7, #28]

	Cylinder->dwellCamCycle = Cylinder->fireCamCycle;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	62da      	str	r2, [r3, #44]	; 0x2c

	float dwellangle = fireangle - Ignition_DwellTimeUs_P*_Crank_ShaftFreqHz*360/1000000;
 8001b9e:	4b30      	ldr	r3, [pc, #192]	; (8001c60 <Ignition_DefineDwellTeeth+0xe8>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	ee07 3a90 	vmov	s15, r3
 8001ba6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001baa:	4b2e      	ldr	r3, [pc, #184]	; (8001c64 <Ignition_DefineDwellTeeth+0xec>)
 8001bac:	edd3 7a00 	vldr	s15, [r3]
 8001bb0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bb4:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8001c68 <Ignition_DefineDwellTeeth+0xf0>
 8001bb8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001bbc:	eddf 6a2b 	vldr	s13, [pc, #172]	; 8001c6c <Ignition_DefineDwellTeeth+0xf4>
 8001bc0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001bc4:	ed97 7a03 	vldr	s14, [r7, #12]
 8001bc8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bcc:	edc7 7a06 	vstr	s15, [r7, #24]
	if (dwellangle < 0){
 8001bd0:	edd7 7a06 	vldr	s15, [r7, #24]
 8001bd4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001bd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bdc:	d512      	bpl.n	8001c04 <Ignition_DefineDwellTeeth+0x8c>
		dwellangle = dwellangle + 360;
 8001bde:	edd7 7a06 	vldr	s15, [r7, #24]
 8001be2:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8001c68 <Ignition_DefineDwellTeeth+0xf0>
 8001be6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001bea:	edc7 7a06 	vstr	s15, [r7, #24]

		// Do a correction. Dwell has to occur in the previous Cam cycle already!
		if (Cylinder->fireCamCycle == 0)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d103      	bne.n	8001bfe <Ignition_DefineDwellTeeth+0x86>
			Cylinder->dwellCamCycle = 1;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	62da      	str	r2, [r3, #44]	; 0x2c
 8001bfc:	e002      	b.n	8001c04 <Ignition_DefineDwellTeeth+0x8c>
		else
			Cylinder->dwellCamCycle = 0;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2200      	movs	r2, #0
 8001c02:	62da      	str	r2, [r3, #44]	; 0x2c
	}

	triggerTooth = (CrankTeethNmbr+CrankMissingTeethNmbr)*dwellangle/360+1;
 8001c04:	697a      	ldr	r2, [r7, #20]
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	4413      	add	r3, r2
 8001c0a:	ee07 3a90 	vmov	s15, r3
 8001c0e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c12:	edd7 7a06 	vldr	s15, [r7, #24]
 8001c16:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c1a:	eddf 6a13 	vldr	s13, [pc, #76]	; 8001c68 <Ignition_DefineDwellTeeth+0xf0>
 8001c1e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c22:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001c26:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001c2a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c2e:	ee17 3a90 	vmov	r3, s15
 8001c32:	61fb      	str	r3, [r7, #28]

	// Correction in case triggertooth is bound to be one of the missing teeth on he crankwheel
	if (triggerTooth >= CrankTeethNmbr+1)
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	3301      	adds	r3, #1
 8001c38:	69fa      	ldr	r2, [r7, #28]
 8001c3a:	429a      	cmp	r2, r3
 8001c3c:	db01      	blt.n	8001c42 <Ignition_DefineDwellTeeth+0xca>
			triggerTooth = CrankTeethNmbr;
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	61fb      	str	r3, [r7, #28]

	Cylinder->dwellangle = dwellangle;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	69ba      	ldr	r2, [r7, #24]
 8001c46:	615a      	str	r2, [r3, #20]
	Cylinder->dwelltooth = triggerTooth;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	69fa      	ldr	r2, [r7, #28]
 8001c4c:	61da      	str	r2, [r3, #28]
}
 8001c4e:	bf00      	nop
 8001c50:	3724      	adds	r7, #36	; 0x24
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr
 8001c5a:	bf00      	nop
 8001c5c:	20000584 	.word	0x20000584
 8001c60:	20000000 	.word	0x20000000
 8001c64:	200000d0 	.word	0x200000d0
 8001c68:	43b40000 	.word	0x43b40000
 8001c6c:	49742400 	.word	0x49742400

08001c70 <Ignition_SetDwellTiming>:

void Ignition_SetDwellTiming(Ignition_CoilCyl *Cylinder){
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b088      	sub	sp, #32
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
	Ignition_DefineDwellTeeth(Cylinder);		// Define the closest previous tooth at given cylinder dwell angle
 8001c78:	6878      	ldr	r0, [r7, #4]
 8001c7a:	f7ff ff7d 	bl	8001b78 <Ignition_DefineDwellTeeth>

	float requestedAngle = Cylinder->dwellangle;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	695b      	ldr	r3, [r3, #20]
 8001c82:	613b      	str	r3, [r7, #16]
	int triggerTooth = Cylinder->dwelltooth;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	69db      	ldr	r3, [r3, #28]
 8001c88:	61fb      	str	r3, [r7, #28]
	float triggerAngle;
	float delayAngle;
	uint32_t Ignition_TimeToDwell;

	// Perform correction if angle is after the missing teeth
	if (triggerTooth == CrankCfg.Crank_TeethNmbr_P+10){
 8001c8a:	4b28      	ldr	r3, [pc, #160]	; (8001d2c <Ignition_SetDwellTiming+0xbc>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	330a      	adds	r3, #10
 8001c90:	69fa      	ldr	r2, [r7, #28]
 8001c92:	429a      	cmp	r2, r3
 8001c94:	d113      	bne.n	8001cbe <Ignition_SetDwellTiming+0x4e>
		triggerTooth = CrankCfg.Crank_TeethNmbr_P;
 8001c96:	4b25      	ldr	r3, [pc, #148]	; (8001d2c <Ignition_SetDwellTiming+0xbc>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	61fb      	str	r3, [r7, #28]
		delayAngle = 360*CrankCfg.Crank_MissingTeethNmbr_P/CrankCfg.Crank_TeethNmbr_P;
 8001c9c:	4b23      	ldr	r3, [pc, #140]	; (8001d2c <Ignition_SetDwellTiming+0xbc>)
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8001ca4:	fb02 f203 	mul.w	r2, r2, r3
 8001ca8:	4b20      	ldr	r3, [pc, #128]	; (8001d2c <Ignition_SetDwellTiming+0xbc>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	fb92 f3f3 	sdiv	r3, r2, r3
 8001cb0:	ee07 3a90 	vmov	s15, r3
 8001cb4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cb8:	edc7 7a06 	vstr	s15, [r7, #24]
 8001cbc:	e01a      	b.n	8001cf4 <Ignition_SetDwellTiming+0x84>
	}else{
		triggerAngle = (triggerTooth-1)*360/(CrankCfg.Crank_TeethNmbr_P+CrankCfg.Crank_MissingTeethNmbr_P);
 8001cbe:	69fb      	ldr	r3, [r7, #28]
 8001cc0:	3b01      	subs	r3, #1
 8001cc2:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8001cc6:	fb02 f203 	mul.w	r2, r2, r3
 8001cca:	4b18      	ldr	r3, [pc, #96]	; (8001d2c <Ignition_SetDwellTiming+0xbc>)
 8001ccc:	6819      	ldr	r1, [r3, #0]
 8001cce:	4b17      	ldr	r3, [pc, #92]	; (8001d2c <Ignition_SetDwellTiming+0xbc>)
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	440b      	add	r3, r1
 8001cd4:	fb92 f3f3 	sdiv	r3, r2, r3
 8001cd8:	ee07 3a90 	vmov	s15, r3
 8001cdc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ce0:	edc7 7a03 	vstr	s15, [r7, #12]
		delayAngle = requestedAngle - triggerAngle;
 8001ce4:	ed97 7a04 	vldr	s14, [r7, #16]
 8001ce8:	edd7 7a03 	vldr	s15, [r7, #12]
 8001cec:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cf0:	edc7 7a06 	vstr	s15, [r7, #24]
	}
	Ignition_TimeToDwell = Ignition_AngleToUs(_Crank_ShaftFreqHz,delayAngle);
 8001cf4:	4b0e      	ldr	r3, [pc, #56]	; (8001d30 <Ignition_SetDwellTiming+0xc0>)
 8001cf6:	edd3 7a00 	vldr	s15, [r3]
 8001cfa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001cfe:	ed97 0a06 	vldr	s0, [r7, #24]
 8001d02:	ee17 0a90 	vmov	r0, s15
 8001d06:	f000 f815 	bl	8001d34 <Ignition_AngleToUs>
 8001d0a:	6178      	str	r0, [r7, #20]
	// correction in case CCR and ARR dont work with 0
	if (Ignition_TimeToDwell == 0)
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d101      	bne.n	8001d16 <Ignition_SetDwellTiming+0xa6>
		Ignition_TimeToDwell = 1;
 8001d12:	2301      	movs	r3, #1
 8001d14:	617b      	str	r3, [r7, #20]

	Cylinder->time2dwell = Ignition_TimeToDwell;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	697a      	ldr	r2, [r7, #20]
 8001d1a:	625a      	str	r2, [r3, #36]	; 0x24
	Cylinder->dwelltooth = triggerTooth;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	69fa      	ldr	r2, [r7, #28]
 8001d20:	61da      	str	r2, [r3, #28]
}
 8001d22:	bf00      	nop
 8001d24:	3720      	adds	r7, #32
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	20000584 	.word	0x20000584
 8001d30:	200000d0 	.word	0x200000d0

08001d34 <Ignition_AngleToUs>:


// HELPER FUNCTIONS ================================================
uint32_t Ignition_AngleToUs(int CrankShaftHz, float AngleDegree){
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b082      	sub	sp, #8
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
 8001d3c:	ed87 0a00 	vstr	s0, [r7]
	return HAL_RCC_GetPCLK2Freq()*2*AngleDegree/360/_Crank_ShaftFreqHz/TIM10->PSC; // multiplied by 2, since the TIM module can run 2times faster than the clock
 8001d40:	f003 fae8 	bl	8005314 <HAL_RCC_GetPCLK2Freq>
 8001d44:	4603      	mov	r3, r0
 8001d46:	005b      	lsls	r3, r3, #1
 8001d48:	ee07 3a90 	vmov	s15, r3
 8001d4c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001d50:	edd7 7a00 	vldr	s15, [r7]
 8001d54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d58:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8001d8c <Ignition_AngleToUs+0x58>
 8001d5c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001d60:	4b0b      	ldr	r3, [pc, #44]	; (8001d90 <Ignition_AngleToUs+0x5c>)
 8001d62:	edd3 7a00 	vldr	s15, [r3]
 8001d66:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001d6a:	4b0a      	ldr	r3, [pc, #40]	; (8001d94 <Ignition_AngleToUs+0x60>)
 8001d6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d6e:	ee07 3a90 	vmov	s15, r3
 8001d72:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001d76:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d7e:	ee17 3a90 	vmov	r3, s15
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	3708      	adds	r7, #8
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	43b40000 	.word	0x43b40000
 8001d90:	200000d0 	.word	0x200000d0
 8001d94:	40014400 	.word	0x40014400

08001d98 <Ignition_DriverLoop>:

// FIRE DRIVER FUNCTIONS ===========================================
void Ignition_DriverLoop(int Cam_HalfCycle, uint8_t Crank_TeethCount){
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b082      	sub	sp, #8
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
 8001da0:	460b      	mov	r3, r1
 8001da2:	70fb      	strb	r3, [r7, #3]
	// Start ignition timers (either Fire or Dwell) based on Camshaft and Cranshaft position.

	// Cylinder 1
	if ((Cam_HalfCycle == Ignition_Cyl1.dwellCamCycle) && (Crank_TeethCount == Ignition_Cyl1.dwelltooth))
 8001da4:	4b35      	ldr	r3, [pc, #212]	; (8001e7c <Ignition_DriverLoop+0xe4>)
 8001da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001da8:	687a      	ldr	r2, [r7, #4]
 8001daa:	429a      	cmp	r2, r3
 8001dac:	d107      	bne.n	8001dbe <Ignition_DriverLoop+0x26>
 8001dae:	78fa      	ldrb	r2, [r7, #3]
 8001db0:	4b32      	ldr	r3, [pc, #200]	; (8001e7c <Ignition_DriverLoop+0xe4>)
 8001db2:	69db      	ldr	r3, [r3, #28]
 8001db4:	429a      	cmp	r2, r3
 8001db6:	d102      	bne.n	8001dbe <Ignition_DriverLoop+0x26>
		Ignition_StartTimerDwellCylinder(&Ignition_Cyl1);
 8001db8:	4830      	ldr	r0, [pc, #192]	; (8001e7c <Ignition_DriverLoop+0xe4>)
 8001dba:	f000 f8a1 	bl	8001f00 <Ignition_StartTimerDwellCylinder>

	if ((Cam_HalfCycle == Ignition_Cyl1.fireCamCycle) && (Crank_TeethCount == Ignition_Cyl1.firetooth))
 8001dbe:	4b2f      	ldr	r3, [pc, #188]	; (8001e7c <Ignition_DriverLoop+0xe4>)
 8001dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dc2:	687a      	ldr	r2, [r7, #4]
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d107      	bne.n	8001dd8 <Ignition_DriverLoop+0x40>
 8001dc8:	78fa      	ldrb	r2, [r7, #3]
 8001dca:	4b2c      	ldr	r3, [pc, #176]	; (8001e7c <Ignition_DriverLoop+0xe4>)
 8001dcc:	699b      	ldr	r3, [r3, #24]
 8001dce:	429a      	cmp	r2, r3
 8001dd0:	d102      	bne.n	8001dd8 <Ignition_DriverLoop+0x40>
		Ignition_StartTimerFireCylinder(&Ignition_Cyl1);
 8001dd2:	482a      	ldr	r0, [pc, #168]	; (8001e7c <Ignition_DriverLoop+0xe4>)
 8001dd4:	f000 f85a 	bl	8001e8c <Ignition_StartTimerFireCylinder>

	// Cylinder 2
	if ((Cam_HalfCycle == Ignition_Cyl2.dwellCamCycle) && (Crank_TeethCount == Ignition_Cyl2.dwelltooth))
 8001dd8:	4b29      	ldr	r3, [pc, #164]	; (8001e80 <Ignition_DriverLoop+0xe8>)
 8001dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ddc:	687a      	ldr	r2, [r7, #4]
 8001dde:	429a      	cmp	r2, r3
 8001de0:	d107      	bne.n	8001df2 <Ignition_DriverLoop+0x5a>
 8001de2:	78fa      	ldrb	r2, [r7, #3]
 8001de4:	4b26      	ldr	r3, [pc, #152]	; (8001e80 <Ignition_DriverLoop+0xe8>)
 8001de6:	69db      	ldr	r3, [r3, #28]
 8001de8:	429a      	cmp	r2, r3
 8001dea:	d102      	bne.n	8001df2 <Ignition_DriverLoop+0x5a>
		Ignition_StartTimerDwellCylinder(&Ignition_Cyl2);
 8001dec:	4824      	ldr	r0, [pc, #144]	; (8001e80 <Ignition_DriverLoop+0xe8>)
 8001dee:	f000 f887 	bl	8001f00 <Ignition_StartTimerDwellCylinder>

	if ((Cam_HalfCycle == Ignition_Cyl2.fireCamCycle) && (Crank_TeethCount == Ignition_Cyl2.firetooth))
 8001df2:	4b23      	ldr	r3, [pc, #140]	; (8001e80 <Ignition_DriverLoop+0xe8>)
 8001df4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001df6:	687a      	ldr	r2, [r7, #4]
 8001df8:	429a      	cmp	r2, r3
 8001dfa:	d107      	bne.n	8001e0c <Ignition_DriverLoop+0x74>
 8001dfc:	78fa      	ldrb	r2, [r7, #3]
 8001dfe:	4b20      	ldr	r3, [pc, #128]	; (8001e80 <Ignition_DriverLoop+0xe8>)
 8001e00:	699b      	ldr	r3, [r3, #24]
 8001e02:	429a      	cmp	r2, r3
 8001e04:	d102      	bne.n	8001e0c <Ignition_DriverLoop+0x74>
		Ignition_StartTimerFireCylinder(&Ignition_Cyl2);
 8001e06:	481e      	ldr	r0, [pc, #120]	; (8001e80 <Ignition_DriverLoop+0xe8>)
 8001e08:	f000 f840 	bl	8001e8c <Ignition_StartTimerFireCylinder>

	// Cylinder 3
	if ((Cam_HalfCycle == Ignition_Cyl3.dwellCamCycle) && (Crank_TeethCount == Ignition_Cyl3.dwelltooth))
 8001e0c:	4b1d      	ldr	r3, [pc, #116]	; (8001e84 <Ignition_DriverLoop+0xec>)
 8001e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e10:	687a      	ldr	r2, [r7, #4]
 8001e12:	429a      	cmp	r2, r3
 8001e14:	d107      	bne.n	8001e26 <Ignition_DriverLoop+0x8e>
 8001e16:	78fa      	ldrb	r2, [r7, #3]
 8001e18:	4b1a      	ldr	r3, [pc, #104]	; (8001e84 <Ignition_DriverLoop+0xec>)
 8001e1a:	69db      	ldr	r3, [r3, #28]
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d102      	bne.n	8001e26 <Ignition_DriverLoop+0x8e>
		Ignition_StartTimerDwellCylinder(&Ignition_Cyl3);
 8001e20:	4818      	ldr	r0, [pc, #96]	; (8001e84 <Ignition_DriverLoop+0xec>)
 8001e22:	f000 f86d 	bl	8001f00 <Ignition_StartTimerDwellCylinder>

	if ((Cam_HalfCycle == Ignition_Cyl3.fireCamCycle) && (Crank_TeethCount == Ignition_Cyl3.firetooth))
 8001e26:	4b17      	ldr	r3, [pc, #92]	; (8001e84 <Ignition_DriverLoop+0xec>)
 8001e28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e2a:	687a      	ldr	r2, [r7, #4]
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	d107      	bne.n	8001e40 <Ignition_DriverLoop+0xa8>
 8001e30:	78fa      	ldrb	r2, [r7, #3]
 8001e32:	4b14      	ldr	r3, [pc, #80]	; (8001e84 <Ignition_DriverLoop+0xec>)
 8001e34:	699b      	ldr	r3, [r3, #24]
 8001e36:	429a      	cmp	r2, r3
 8001e38:	d102      	bne.n	8001e40 <Ignition_DriverLoop+0xa8>
		Ignition_StartTimerFireCylinder(&Ignition_Cyl3);
 8001e3a:	4812      	ldr	r0, [pc, #72]	; (8001e84 <Ignition_DriverLoop+0xec>)
 8001e3c:	f000 f826 	bl	8001e8c <Ignition_StartTimerFireCylinder>

	// Cylinder 4
	if ((Cam_HalfCycle == Ignition_Cyl4.dwellCamCycle) && (Crank_TeethCount == Ignition_Cyl4.dwelltooth))
 8001e40:	4b11      	ldr	r3, [pc, #68]	; (8001e88 <Ignition_DriverLoop+0xf0>)
 8001e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e44:	687a      	ldr	r2, [r7, #4]
 8001e46:	429a      	cmp	r2, r3
 8001e48:	d107      	bne.n	8001e5a <Ignition_DriverLoop+0xc2>
 8001e4a:	78fa      	ldrb	r2, [r7, #3]
 8001e4c:	4b0e      	ldr	r3, [pc, #56]	; (8001e88 <Ignition_DriverLoop+0xf0>)
 8001e4e:	69db      	ldr	r3, [r3, #28]
 8001e50:	429a      	cmp	r2, r3
 8001e52:	d102      	bne.n	8001e5a <Ignition_DriverLoop+0xc2>
		Ignition_StartTimerDwellCylinder(&Ignition_Cyl4);
 8001e54:	480c      	ldr	r0, [pc, #48]	; (8001e88 <Ignition_DriverLoop+0xf0>)
 8001e56:	f000 f853 	bl	8001f00 <Ignition_StartTimerDwellCylinder>

	if ((Cam_HalfCycle == Ignition_Cyl4.fireCamCycle) && (Crank_TeethCount == Ignition_Cyl4.firetooth))
 8001e5a:	4b0b      	ldr	r3, [pc, #44]	; (8001e88 <Ignition_DriverLoop+0xf0>)
 8001e5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e5e:	687a      	ldr	r2, [r7, #4]
 8001e60:	429a      	cmp	r2, r3
 8001e62:	d107      	bne.n	8001e74 <Ignition_DriverLoop+0xdc>
 8001e64:	78fa      	ldrb	r2, [r7, #3]
 8001e66:	4b08      	ldr	r3, [pc, #32]	; (8001e88 <Ignition_DriverLoop+0xf0>)
 8001e68:	699b      	ldr	r3, [r3, #24]
 8001e6a:	429a      	cmp	r2, r3
 8001e6c:	d102      	bne.n	8001e74 <Ignition_DriverLoop+0xdc>
		Ignition_StartTimerFireCylinder(&Ignition_Cyl4);
 8001e6e:	4806      	ldr	r0, [pc, #24]	; (8001e88 <Ignition_DriverLoop+0xf0>)
 8001e70:	f000 f80c 	bl	8001e8c <Ignition_StartTimerFireCylinder>
}
 8001e74:	bf00      	nop
 8001e76:	3708      	adds	r7, #8
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	200001dc 	.word	0x200001dc
 8001e80:	2000020c 	.word	0x2000020c
 8001e84:	2000023c 	.word	0x2000023c
 8001e88:	2000027c 	.word	0x2000027c

08001e8c <Ignition_StartTimerFireCylinder>:

void Ignition_StartTimerFireCylinder(Ignition_CoilCyl *Cylinder){
 8001e8c:	b480      	push	{r7}
 8001e8e:	b085      	sub	sp, #20
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
	Cylinder->firestate = TRIG_FIRE;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2200      	movs	r2, #0
 8001e98:	715a      	strb	r2, [r3, #5]
	uint32_t fireStartInUs = Cylinder->time2fire;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6a1b      	ldr	r3, [r3, #32]
 8001e9e:	60fb      	str	r3, [r7, #12]

	// START IGNITION TIM OUTPUT
	Ignition_FireTIM.Handler->Instance->ARR = fireStartInUs + 10;
 8001ea0:	4b0f      	ldr	r3, [pc, #60]	; (8001ee0 <Ignition_StartTimerFireCylinder+0x54>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	68fa      	ldr	r2, [r7, #12]
 8001ea8:	320a      	adds	r2, #10
 8001eaa:	62da      	str	r2, [r3, #44]	; 0x2c
	Ignition_FireTIM.Handler->Instance->CCR1 = fireStartInUs;
 8001eac:	4b0c      	ldr	r3, [pc, #48]	; (8001ee0 <Ignition_StartTimerFireCylinder+0x54>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	68fa      	ldr	r2, [r7, #12]
 8001eb4:	635a      	str	r2, [r3, #52]	; 0x34
	Ignition_FireTIM.Handler->Instance->EGR = 1;
 8001eb6:	4b0a      	ldr	r3, [pc, #40]	; (8001ee0 <Ignition_StartTimerFireCylinder+0x54>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	615a      	str	r2, [r3, #20]
	Ignition_FireTIM.Handler->Instance->CR1 |= TIM_CR1_CEN;
 8001ec0:	4b07      	ldr	r3, [pc, #28]	; (8001ee0 <Ignition_StartTimerFireCylinder+0x54>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	4b05      	ldr	r3, [pc, #20]	; (8001ee0 <Ignition_StartTimerFireCylinder+0x54>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f042 0201 	orr.w	r2, r2, #1
 8001ed2:	601a      	str	r2, [r3, #0]
}
 8001ed4:	bf00      	nop
 8001ed6:	3714      	adds	r7, #20
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ede:	4770      	bx	lr
 8001ee0:	2000026c 	.word	0x2000026c

08001ee4 <Ignition_FireStarted>:

void Ignition_FireStarted(Ignition_CoilCyl *Cylinder){Cylinder->firestate = FIRED;}
 8001ee4:	b480      	push	{r7}
 8001ee6:	b083      	sub	sp, #12
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2201      	movs	r2, #1
 8001ef0:	715a      	strb	r2, [r3, #5]
 8001ef2:	bf00      	nop
 8001ef4:	370c      	adds	r7, #12
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efc:	4770      	bx	lr
	...

08001f00 <Ignition_StartTimerDwellCylinder>:


// DWELL DRIVER FUNCTIONS ==========================================

void Ignition_StartTimerDwellCylinder(Ignition_CoilCyl *Cylinder){
 8001f00:	b480      	push	{r7}
 8001f02:	b085      	sub	sp, #20
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
	Cylinder->dwellstate = TRIG_DWELL;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	711a      	strb	r2, [r3, #4]
	uint32_t dwellStartInUs = Cylinder->time2dwell;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f12:	60fb      	str	r3, [r7, #12]

	// START DWELL TIM OUTPUT
	Ignition_DwellTIM.Handler->Instance->ARR = dwellStartInUs+10;
 8001f14:	4b0f      	ldr	r3, [pc, #60]	; (8001f54 <Ignition_StartTimerDwellCylinder+0x54>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	68fa      	ldr	r2, [r7, #12]
 8001f1c:	320a      	adds	r2, #10
 8001f1e:	62da      	str	r2, [r3, #44]	; 0x2c
	Ignition_DwellTIM.Handler->Instance->CCR1 = dwellStartInUs;
 8001f20:	4b0c      	ldr	r3, [pc, #48]	; (8001f54 <Ignition_StartTimerDwellCylinder+0x54>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	68fa      	ldr	r2, [r7, #12]
 8001f28:	635a      	str	r2, [r3, #52]	; 0x34
	Ignition_DwellTIM.Handler->Instance->EGR = 1;
 8001f2a:	4b0a      	ldr	r3, [pc, #40]	; (8001f54 <Ignition_StartTimerDwellCylinder+0x54>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	2201      	movs	r2, #1
 8001f32:	615a      	str	r2, [r3, #20]
	Ignition_DwellTIM.Handler->Instance->CR1 |= TIM_CR1_CEN;
 8001f34:	4b07      	ldr	r3, [pc, #28]	; (8001f54 <Ignition_StartTimerDwellCylinder+0x54>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	4b05      	ldr	r3, [pc, #20]	; (8001f54 <Ignition_StartTimerDwellCylinder+0x54>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f042 0201 	orr.w	r2, r2, #1
 8001f46:	601a      	str	r2, [r3, #0]
}
 8001f48:	bf00      	nop
 8001f4a:	3714      	adds	r7, #20
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f52:	4770      	bx	lr
 8001f54:	20000274 	.word	0x20000274

08001f58 <Ignition_DwellStarted>:

void Ignition_DwellStarted(Ignition_CoilCyl *Cylinder){Cylinder->dwellstate = DWELLING;}
 8001f58:	b480      	push	{r7}
 8001f5a:	b083      	sub	sp, #12
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2202      	movs	r2, #2
 8001f64:	711a      	strb	r2, [r3, #4]
 8001f66:	bf00      	nop
 8001f68:	370c      	adds	r7, #12
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr
	...

08001f74 <Injection_Init_InjectorTIM>:
float ax[4] = {0,1,2,3};
float ay[5] = {100,200,300,400,500};
float map[4][5]= {{0,1,2,3,4},{0,10,20,30,40},{0,100,200,300,400},{0,1000,2000,3000,4000}};


void Injection_Init_InjectorTIM(TIM_HandleTypeDef *Handler, uint8_t Channel, uint8_t ActiveChannel){
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b082      	sub	sp, #8
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
 8001f7c:	460b      	mov	r3, r1
 8001f7e:	70fb      	strb	r3, [r7, #3]
 8001f80:	4613      	mov	r3, r2
 8001f82:	70bb      	strb	r3, [r7, #2]
	Injection_InjectorTIM.Handler = Handler;
 8001f84:	4a0a      	ldr	r2, [pc, #40]	; (8001fb0 <Injection_Init_InjectorTIM+0x3c>)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6013      	str	r3, [r2, #0]
	Injection_InjectorTIM.Channel = Channel;
 8001f8a:	4a09      	ldr	r2, [pc, #36]	; (8001fb0 <Injection_Init_InjectorTIM+0x3c>)
 8001f8c:	78fb      	ldrb	r3, [r7, #3]
 8001f8e:	7113      	strb	r3, [r2, #4]
	Injection_InjectorTIM.ActiveChannel = ActiveChannel;
 8001f90:	4a07      	ldr	r2, [pc, #28]	; (8001fb0 <Injection_Init_InjectorTIM+0x3c>)
 8001f92:	78bb      	ldrb	r3, [r7, #2]
 8001f94:	7153      	strb	r3, [r2, #5]
	HAL_TIM_Base_Start_IT(Handler);
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	f003 fd5d 	bl	8005a56 <HAL_TIM_Base_Start_IT>
	HAL_TIM_OC_Start_IT(Handler, Channel);
 8001f9c:	78fb      	ldrb	r3, [r7, #3]
 8001f9e:	4619      	mov	r1, r3
 8001fa0:	6878      	ldr	r0, [r7, #4]
 8001fa2:	f003 fdb1 	bl	8005b08 <HAL_TIM_OC_Start_IT>
}
 8001fa6:	bf00      	nop
 8001fa8:	3708      	adds	r7, #8
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	200002f4 	.word	0x200002f4

08001fb4 <Injection_Init_IOConfig>:

void Injection_Init_IOConfig(GPIO_TypeDef *port1,__IO uint16_t pin1,GPIO_TypeDef *port2,__IO uint16_t pin2,GPIO_TypeDef *port3,__IO uint16_t pin3,GPIO_TypeDef *port4,__IO uint16_t pin4){
 8001fb4:	b480      	push	{r7}
 8001fb6:	b085      	sub	sp, #20
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	60f8      	str	r0, [r7, #12]
 8001fbc:	607a      	str	r2, [r7, #4]
 8001fbe:	461a      	mov	r2, r3
 8001fc0:	460b      	mov	r3, r1
 8001fc2:	817b      	strh	r3, [r7, #10]
 8001fc4:	4613      	mov	r3, r2
 8001fc6:	813b      	strh	r3, [r7, #8]
	Injection_Cyl1.injectorport = port1;
 8001fc8:	4a10      	ldr	r2, [pc, #64]	; (800200c <Injection_Init_IOConfig+0x58>)
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	6093      	str	r3, [r2, #8]
	Injection_Cyl1.injectorpin = pin1;
 8001fce:	897b      	ldrh	r3, [r7, #10]
 8001fd0:	b29a      	uxth	r2, r3
 8001fd2:	4b0e      	ldr	r3, [pc, #56]	; (800200c <Injection_Init_IOConfig+0x58>)
 8001fd4:	819a      	strh	r2, [r3, #12]
	Injection_Cyl2.injectorport = port2;
 8001fd6:	4a0e      	ldr	r2, [pc, #56]	; (8002010 <Injection_Init_IOConfig+0x5c>)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6093      	str	r3, [r2, #8]
	Injection_Cyl2.injectorpin = pin2;
 8001fdc:	893b      	ldrh	r3, [r7, #8]
 8001fde:	b29a      	uxth	r2, r3
 8001fe0:	4b0b      	ldr	r3, [pc, #44]	; (8002010 <Injection_Init_IOConfig+0x5c>)
 8001fe2:	819a      	strh	r2, [r3, #12]
	Injection_Cyl3.injectorport = port3;
 8001fe4:	4a0b      	ldr	r2, [pc, #44]	; (8002014 <Injection_Init_IOConfig+0x60>)
 8001fe6:	69bb      	ldr	r3, [r7, #24]
 8001fe8:	6093      	str	r3, [r2, #8]
	Injection_Cyl3.injectorpin = pin3;
 8001fea:	8bbb      	ldrh	r3, [r7, #28]
 8001fec:	b29a      	uxth	r2, r3
 8001fee:	4b09      	ldr	r3, [pc, #36]	; (8002014 <Injection_Init_IOConfig+0x60>)
 8001ff0:	819a      	strh	r2, [r3, #12]
	Injection_Cyl4.injectorport = port4;
 8001ff2:	4a09      	ldr	r2, [pc, #36]	; (8002018 <Injection_Init_IOConfig+0x64>)
 8001ff4:	6a3b      	ldr	r3, [r7, #32]
 8001ff6:	6093      	str	r3, [r2, #8]
	Injection_Cyl4.injectorpin = pin4;
 8001ff8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001ffa:	b29a      	uxth	r2, r3
 8001ffc:	4b06      	ldr	r3, [pc, #24]	; (8002018 <Injection_Init_IOConfig+0x64>)
 8001ffe:	819a      	strh	r2, [r3, #12]
}
 8002000:	bf00      	nop
 8002002:	3714      	adds	r7, #20
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr
 800200c:	200002fc 	.word	0x200002fc
 8002010:	200002ac 	.word	0x200002ac
 8002014:	200002d0 	.word	0x200002d0
 8002018:	20000320 	.word	0x20000320

0800201c <Injection_Init_InjectionCyl>:

void Injection_Init_InjectionCyl(){
 800201c:	b480      	push	{r7}
 800201e:	af00      	add	r7, sp, #0
	// Cylinder 1
	Injection_Cyl1.cylinderID = 1;
 8002020:	4b2e      	ldr	r3, [pc, #184]	; (80020dc <Injection_Init_InjectionCyl+0xc0>)
 8002022:	2201      	movs	r2, #1
 8002024:	601a      	str	r2, [r3, #0]
	Injection_Cyl1.injectorstate = IDLE_INJECT;
 8002026:	4b2d      	ldr	r3, [pc, #180]	; (80020dc <Injection_Init_InjectionCyl+0xc0>)
 8002028:	2200      	movs	r2, #0
 800202a:	711a      	strb	r2, [r3, #4]
	Injection_Cyl1.injectionangle = 30;
 800202c:	4b2b      	ldr	r3, [pc, #172]	; (80020dc <Injection_Init_InjectionCyl+0xc0>)
 800202e:	4a2c      	ldr	r2, [pc, #176]	; (80020e0 <Injection_Init_InjectionCyl+0xc4>)
 8002030:	611a      	str	r2, [r3, #16]
	Injection_Cyl1.injectiontooth = 2;
 8002032:	4b2a      	ldr	r3, [pc, #168]	; (80020dc <Injection_Init_InjectionCyl+0xc0>)
 8002034:	2202      	movs	r2, #2
 8002036:	615a      	str	r2, [r3, #20]
	Injection_Cyl1.time2injection = 10;
 8002038:	4b28      	ldr	r3, [pc, #160]	; (80020dc <Injection_Init_InjectionCyl+0xc0>)
 800203a:	220a      	movs	r2, #10
 800203c:	61da      	str	r2, [r3, #28]
	Injection_Cyl1.injectCamCycle = 1;
 800203e:	4b27      	ldr	r3, [pc, #156]	; (80020dc <Injection_Init_InjectionCyl+0xc0>)
 8002040:	2201      	movs	r2, #1
 8002042:	621a      	str	r2, [r3, #32]
	Injection_Cyl1.injectiontimeus = 1000;
 8002044:	4b25      	ldr	r3, [pc, #148]	; (80020dc <Injection_Init_InjectionCyl+0xc0>)
 8002046:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800204a:	619a      	str	r2, [r3, #24]
	// Cylinder 2
	Injection_Cyl2.cylinderID = 2;
 800204c:	4b25      	ldr	r3, [pc, #148]	; (80020e4 <Injection_Init_InjectionCyl+0xc8>)
 800204e:	2202      	movs	r2, #2
 8002050:	601a      	str	r2, [r3, #0]
	Injection_Cyl2.injectorstate = IDLE_INJECT;
 8002052:	4b24      	ldr	r3, [pc, #144]	; (80020e4 <Injection_Init_InjectionCyl+0xc8>)
 8002054:	2200      	movs	r2, #0
 8002056:	711a      	strb	r2, [r3, #4]
	Injection_Cyl2.injectionangle = 110;
 8002058:	4b22      	ldr	r3, [pc, #136]	; (80020e4 <Injection_Init_InjectionCyl+0xc8>)
 800205a:	4a23      	ldr	r2, [pc, #140]	; (80020e8 <Injection_Init_InjectionCyl+0xcc>)
 800205c:	611a      	str	r2, [r3, #16]
	Injection_Cyl2.injectiontooth = 2;
 800205e:	4b21      	ldr	r3, [pc, #132]	; (80020e4 <Injection_Init_InjectionCyl+0xc8>)
 8002060:	2202      	movs	r2, #2
 8002062:	615a      	str	r2, [r3, #20]
	Injection_Cyl2.time2injection = 10;
 8002064:	4b1f      	ldr	r3, [pc, #124]	; (80020e4 <Injection_Init_InjectionCyl+0xc8>)
 8002066:	220a      	movs	r2, #10
 8002068:	61da      	str	r2, [r3, #28]
	Injection_Cyl2.injectCamCycle = 0;	// DO NOT CHANGE!
 800206a:	4b1e      	ldr	r3, [pc, #120]	; (80020e4 <Injection_Init_InjectionCyl+0xc8>)
 800206c:	2200      	movs	r2, #0
 800206e:	621a      	str	r2, [r3, #32]
	Injection_Cyl2.injectiontimeus = 1000;
 8002070:	4b1c      	ldr	r3, [pc, #112]	; (80020e4 <Injection_Init_InjectionCyl+0xc8>)
 8002072:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002076:	619a      	str	r2, [r3, #24]
	// Cylinder 3
	Injection_Cyl3.cylinderID = 3;
 8002078:	4b1c      	ldr	r3, [pc, #112]	; (80020ec <Injection_Init_InjectionCyl+0xd0>)
 800207a:	2203      	movs	r2, #3
 800207c:	601a      	str	r2, [r3, #0]
	Injection_Cyl3.injectorstate = IDLE_INJECT;
 800207e:	4b1b      	ldr	r3, [pc, #108]	; (80020ec <Injection_Init_InjectionCyl+0xd0>)
 8002080:	2200      	movs	r2, #0
 8002082:	711a      	strb	r2, [r3, #4]
	Injection_Cyl3.injectionangle = 200;
 8002084:	4b19      	ldr	r3, [pc, #100]	; (80020ec <Injection_Init_InjectionCyl+0xd0>)
 8002086:	4a1a      	ldr	r2, [pc, #104]	; (80020f0 <Injection_Init_InjectionCyl+0xd4>)
 8002088:	611a      	str	r2, [r3, #16]
	Injection_Cyl3.injectiontooth = 10;
 800208a:	4b18      	ldr	r3, [pc, #96]	; (80020ec <Injection_Init_InjectionCyl+0xd0>)
 800208c:	220a      	movs	r2, #10
 800208e:	615a      	str	r2, [r3, #20]
	Injection_Cyl3.time2injection = 10;
 8002090:	4b16      	ldr	r3, [pc, #88]	; (80020ec <Injection_Init_InjectionCyl+0xd0>)
 8002092:	220a      	movs	r2, #10
 8002094:	61da      	str	r2, [r3, #28]
	Injection_Cyl3.injectCamCycle = 1;
 8002096:	4b15      	ldr	r3, [pc, #84]	; (80020ec <Injection_Init_InjectionCyl+0xd0>)
 8002098:	2201      	movs	r2, #1
 800209a:	621a      	str	r2, [r3, #32]
	Injection_Cyl3.injectiontimeus = 1000;
 800209c:	4b13      	ldr	r3, [pc, #76]	; (80020ec <Injection_Init_InjectionCyl+0xd0>)
 800209e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80020a2:	619a      	str	r2, [r3, #24]
	// Cylinder 4
	Injection_Cyl4.cylinderID = 4;
 80020a4:	4b13      	ldr	r3, [pc, #76]	; (80020f4 <Injection_Init_InjectionCyl+0xd8>)
 80020a6:	2204      	movs	r2, #4
 80020a8:	601a      	str	r2, [r3, #0]
	Injection_Cyl4.injectorstate = IDLE_INJECT;
 80020aa:	4b12      	ldr	r3, [pc, #72]	; (80020f4 <Injection_Init_InjectionCyl+0xd8>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	711a      	strb	r2, [r3, #4]
	Injection_Cyl4.injectionangle = 280;
 80020b0:	4b10      	ldr	r3, [pc, #64]	; (80020f4 <Injection_Init_InjectionCyl+0xd8>)
 80020b2:	4a11      	ldr	r2, [pc, #68]	; (80020f8 <Injection_Init_InjectionCyl+0xdc>)
 80020b4:	611a      	str	r2, [r3, #16]
	Injection_Cyl4.injectiontooth = 10;
 80020b6:	4b0f      	ldr	r3, [pc, #60]	; (80020f4 <Injection_Init_InjectionCyl+0xd8>)
 80020b8:	220a      	movs	r2, #10
 80020ba:	615a      	str	r2, [r3, #20]
	Injection_Cyl4.time2injection = 10;
 80020bc:	4b0d      	ldr	r3, [pc, #52]	; (80020f4 <Injection_Init_InjectionCyl+0xd8>)
 80020be:	220a      	movs	r2, #10
 80020c0:	61da      	str	r2, [r3, #28]
	Injection_Cyl4.injectCamCycle = 0;	// DO NOT CHANGE!
 80020c2:	4b0c      	ldr	r3, [pc, #48]	; (80020f4 <Injection_Init_InjectionCyl+0xd8>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	621a      	str	r2, [r3, #32]
	Injection_Cyl4.injectiontimeus = 1000;
 80020c8:	4b0a      	ldr	r3, [pc, #40]	; (80020f4 <Injection_Init_InjectionCyl+0xd8>)
 80020ca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80020ce:	619a      	str	r2, [r3, #24]
}
 80020d0:	bf00      	nop
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr
 80020da:	bf00      	nop
 80020dc:	200002fc 	.word	0x200002fc
 80020e0:	41f00000 	.word	0x41f00000
 80020e4:	200002ac 	.word	0x200002ac
 80020e8:	42dc0000 	.word	0x42dc0000
 80020ec:	200002d0 	.word	0x200002d0
 80020f0:	43480000 	.word	0x43480000
 80020f4:	20000320 	.word	0x20000320
 80020f8:	438c0000 	.word	0x438c0000

080020fc <Injection_CalcFuelQty>:


// METHODS
void Injection_CalcFuelQty(){
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b084      	sub	sp, #16
 8002100:	af02      	add	r7, sp, #8
	float fuel = 0;
 8002102:	f04f 0300 	mov.w	r3, #0
 8002106:	607b      	str	r3, [r7, #4]
	uint16_t temp = ADC1_getVal(ADC1_Temp1);
 8002108:	2001      	movs	r0, #1
 800210a:	f7fe feb9 	bl	8000e80 <ADC1_getVal>
 800210e:	4603      	mov	r3, r0
 8002110:	807b      	strh	r3, [r7, #2]

	fuel = Common_GetFrom2Dmap(6,700,xx,yy,ax,ay,map);
 8002112:	4b0a      	ldr	r3, [pc, #40]	; (800213c <Injection_CalcFuelQty+0x40>)
 8002114:	6818      	ldr	r0, [r3, #0]
 8002116:	4b0a      	ldr	r3, [pc, #40]	; (8002140 <Injection_CalcFuelQty+0x44>)
 8002118:	6819      	ldr	r1, [r3, #0]
 800211a:	4b0a      	ldr	r3, [pc, #40]	; (8002144 <Injection_CalcFuelQty+0x48>)
 800211c:	9300      	str	r3, [sp, #0]
 800211e:	4b0a      	ldr	r3, [pc, #40]	; (8002148 <Injection_CalcFuelQty+0x4c>)
 8002120:	4a0a      	ldr	r2, [pc, #40]	; (800214c <Injection_CalcFuelQty+0x50>)
 8002122:	eddf 0a0b 	vldr	s1, [pc, #44]	; 8002150 <Injection_CalcFuelQty+0x54>
 8002126:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 800212a:	f7ff f9c8 	bl	80014be <Common_GetFrom2Dmap>
 800212e:	ed87 0a01 	vstr	s0, [r7, #4]

}
 8002132:	bf00      	nop
 8002134:	3708      	adds	r7, #8
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	20000004 	.word	0x20000004
 8002140:	20000008 	.word	0x20000008
 8002144:	20000030 	.word	0x20000030
 8002148:	2000001c 	.word	0x2000001c
 800214c:	2000000c 	.word	0x2000000c
 8002150:	442f0000 	.word	0x442f0000

08002154 <Injection_DriverLoop>:

// INECTOR DRIVER FUNCTIONS ========================================
void Injection_DriverLoop(int Cam_HalfCycle,uint8_t Crank_TeethCount){
 8002154:	b580      	push	{r7, lr}
 8002156:	b082      	sub	sp, #8
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
 800215c:	460b      	mov	r3, r1
 800215e:	70fb      	strb	r3, [r7, #3]
	// Start Injecting based on camshaft and crankshaft. At the moment, injection starts at specific tooth.

	if ((Cam_HalfCycle == Injection_Cyl1.injectCamCycle) && (Crank_TeethCount == Injection_Cyl1.injectiontooth))
 8002160:	4b1b      	ldr	r3, [pc, #108]	; (80021d0 <Injection_DriverLoop+0x7c>)
 8002162:	6a1b      	ldr	r3, [r3, #32]
 8002164:	687a      	ldr	r2, [r7, #4]
 8002166:	429a      	cmp	r2, r3
 8002168:	d107      	bne.n	800217a <Injection_DriverLoop+0x26>
 800216a:	78fa      	ldrb	r2, [r7, #3]
 800216c:	4b18      	ldr	r3, [pc, #96]	; (80021d0 <Injection_DriverLoop+0x7c>)
 800216e:	695b      	ldr	r3, [r3, #20]
 8002170:	429a      	cmp	r2, r3
 8002172:	d102      	bne.n	800217a <Injection_DriverLoop+0x26>
		Injection_StartTimerInjectCylinder(&Injection_Cyl1);
 8002174:	4816      	ldr	r0, [pc, #88]	; (80021d0 <Injection_DriverLoop+0x7c>)
 8002176:	f000 f833 	bl	80021e0 <Injection_StartTimerInjectCylinder>
	if ((Cam_HalfCycle == Injection_Cyl2.injectCamCycle) && (Crank_TeethCount == Injection_Cyl2.injectiontooth))
 800217a:	4b16      	ldr	r3, [pc, #88]	; (80021d4 <Injection_DriverLoop+0x80>)
 800217c:	6a1b      	ldr	r3, [r3, #32]
 800217e:	687a      	ldr	r2, [r7, #4]
 8002180:	429a      	cmp	r2, r3
 8002182:	d107      	bne.n	8002194 <Injection_DriverLoop+0x40>
 8002184:	78fa      	ldrb	r2, [r7, #3]
 8002186:	4b13      	ldr	r3, [pc, #76]	; (80021d4 <Injection_DriverLoop+0x80>)
 8002188:	695b      	ldr	r3, [r3, #20]
 800218a:	429a      	cmp	r2, r3
 800218c:	d102      	bne.n	8002194 <Injection_DriverLoop+0x40>
		Injection_StartTimerInjectCylinder(&Injection_Cyl2);
 800218e:	4811      	ldr	r0, [pc, #68]	; (80021d4 <Injection_DriverLoop+0x80>)
 8002190:	f000 f826 	bl	80021e0 <Injection_StartTimerInjectCylinder>
	if ((Cam_HalfCycle == Injection_Cyl3.injectCamCycle) && (Crank_TeethCount == Injection_Cyl3.injectiontooth))
 8002194:	4b10      	ldr	r3, [pc, #64]	; (80021d8 <Injection_DriverLoop+0x84>)
 8002196:	6a1b      	ldr	r3, [r3, #32]
 8002198:	687a      	ldr	r2, [r7, #4]
 800219a:	429a      	cmp	r2, r3
 800219c:	d107      	bne.n	80021ae <Injection_DriverLoop+0x5a>
 800219e:	78fa      	ldrb	r2, [r7, #3]
 80021a0:	4b0d      	ldr	r3, [pc, #52]	; (80021d8 <Injection_DriverLoop+0x84>)
 80021a2:	695b      	ldr	r3, [r3, #20]
 80021a4:	429a      	cmp	r2, r3
 80021a6:	d102      	bne.n	80021ae <Injection_DriverLoop+0x5a>
		Injection_StartTimerInjectCylinder(&Injection_Cyl3);
 80021a8:	480b      	ldr	r0, [pc, #44]	; (80021d8 <Injection_DriverLoop+0x84>)
 80021aa:	f000 f819 	bl	80021e0 <Injection_StartTimerInjectCylinder>
	if ((Cam_HalfCycle == Injection_Cyl4.injectCamCycle) && (Crank_TeethCount == Injection_Cyl4.injectiontooth))
 80021ae:	4b0b      	ldr	r3, [pc, #44]	; (80021dc <Injection_DriverLoop+0x88>)
 80021b0:	6a1b      	ldr	r3, [r3, #32]
 80021b2:	687a      	ldr	r2, [r7, #4]
 80021b4:	429a      	cmp	r2, r3
 80021b6:	d107      	bne.n	80021c8 <Injection_DriverLoop+0x74>
 80021b8:	78fa      	ldrb	r2, [r7, #3]
 80021ba:	4b08      	ldr	r3, [pc, #32]	; (80021dc <Injection_DriverLoop+0x88>)
 80021bc:	695b      	ldr	r3, [r3, #20]
 80021be:	429a      	cmp	r2, r3
 80021c0:	d102      	bne.n	80021c8 <Injection_DriverLoop+0x74>
		Injection_StartTimerInjectCylinder(&Injection_Cyl4);
 80021c2:	4806      	ldr	r0, [pc, #24]	; (80021dc <Injection_DriverLoop+0x88>)
 80021c4:	f000 f80c 	bl	80021e0 <Injection_StartTimerInjectCylinder>
}
 80021c8:	bf00      	nop
 80021ca:	3708      	adds	r7, #8
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	200002fc 	.word	0x200002fc
 80021d4:	200002ac 	.word	0x200002ac
 80021d8:	200002d0 	.word	0x200002d0
 80021dc:	20000320 	.word	0x20000320

080021e0 <Injection_StartTimerInjectCylinder>:

void Injection_StartTimerInjectCylinder(Injection_InjectorCyl *Cylinder){
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b084      	sub	sp, #16
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
	Cylinder->injectorstate = TRIG_INJECT;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2201      	movs	r2, #1
 80021ec:	711a      	strb	r2, [r3, #4]
	//uint32_t injectionStartInUs = Cylinder->time2injection;
	uint32_t injectForUs = 1000;
 80021ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021f2:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_WritePin(Cylinder->injectorport,Cylinder->injectorpin,GPIO_PIN_SET);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6898      	ldr	r0, [r3, #8]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	899b      	ldrh	r3, [r3, #12]
 80021fc:	b29b      	uxth	r3, r3
 80021fe:	2201      	movs	r2, #1
 8002200:	4619      	mov	r1, r3
 8002202:	f002 fc2b 	bl	8004a5c <HAL_GPIO_WritePin>
	// START IGNITION TIM OUTPUT
	Injection_InjectorTIM.Handler->Instance->ARR = injectForUs + 10;
 8002206:	4b0f      	ldr	r3, [pc, #60]	; (8002244 <Injection_StartTimerInjectCylinder+0x64>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	68fa      	ldr	r2, [r7, #12]
 800220e:	320a      	adds	r2, #10
 8002210:	62da      	str	r2, [r3, #44]	; 0x2c
	Injection_InjectorTIM.Handler->Instance->CCR1 = injectForUs;
 8002212:	4b0c      	ldr	r3, [pc, #48]	; (8002244 <Injection_StartTimerInjectCylinder+0x64>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	68fa      	ldr	r2, [r7, #12]
 800221a:	635a      	str	r2, [r3, #52]	; 0x34
	Injection_InjectorTIM.Handler->Instance->EGR = 1;
 800221c:	4b09      	ldr	r3, [pc, #36]	; (8002244 <Injection_StartTimerInjectCylinder+0x64>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	2201      	movs	r2, #1
 8002224:	615a      	str	r2, [r3, #20]
	Injection_InjectorTIM.Handler->Instance->CR1 |= TIM_CR1_CEN;
 8002226:	4b07      	ldr	r3, [pc, #28]	; (8002244 <Injection_StartTimerInjectCylinder+0x64>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	4b05      	ldr	r3, [pc, #20]	; (8002244 <Injection_StartTimerInjectCylinder+0x64>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f042 0201 	orr.w	r2, r2, #1
 8002238:	601a      	str	r2, [r3, #0]
}
 800223a:	bf00      	nop
 800223c:	3710      	adds	r7, #16
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	200002f4 	.word	0x200002f4

08002248 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002248:	b590      	push	{r4, r7, lr}
 800224a:	b089      	sub	sp, #36	; 0x24
 800224c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800224e:	f000 ffdf 	bl	8003210 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002252:	f000 f88d 	bl	8002370 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002256:	f000 fbcd 	bl	80029f4 <MX_GPIO_Init>
  MX_DMA_Init();
 800225a:	f000 fbb1 	bl	80029c0 <MX_DMA_Init>
  MX_TIM11_Init();
 800225e:	f000 fa9f 	bl	80027a0 <MX_TIM11_Init>
  MX_TIM3_Init();
 8002262:	f000 f9cb 	bl	80025fc <MX_TIM3_Init>
  MX_TIM12_Init();
 8002266:	f000 faef 	bl	8002848 <MX_TIM12_Init>
  MX_TIM10_Init();
 800226a:	f000 fa45 	bl	80026f8 <MX_TIM10_Init>
  MX_TIM14_Init();
 800226e:	f000 fb53 	bl	8002918 <MX_TIM14_Init>
  MX_ADC1_Init();
 8002272:	f000 f92b 	bl	80024cc <MX_ADC1_Init>
  MX_SPI1_Init();
 8002276:	f000 f989 	bl	800258c <MX_SPI1_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 800227a:	f000 f8e3 	bl	8002444 <MX_NVIC_Init>


  /* Put Custom INIT here, since peripherals need to be initialized first */
  // Scheduler_Init(); here the TIM channel is assigned to scheduler 10ms and initialized to run periodically

  ErrorHandler_Init();
 800227e:	f7ff f86f 	bl	8001360 <ErrorHandler_Init>

  Crank_Init(&htim12,TIM_CHANNEL_1,HAL_TIM_ACTIVE_CHANNEL_1);		// Initialize Crankshaft related sensing + (Hall Timer)
 8002282:	2201      	movs	r2, #1
 8002284:	2100      	movs	r1, #0
 8002286:	4830      	ldr	r0, [pc, #192]	; (8002348 <main+0x100>)
 8002288:	f7fe fe48 	bl	8000f1c <Crank_Init>
  Cam_Init(&htim12,TIM_CHANNEL_2,HAL_TIM_ACTIVE_CHANNEL_2);			// Initialize Camshaft related sensing + (Hall Timer)
 800228c:	2202      	movs	r2, #2
 800228e:	2104      	movs	r1, #4
 8002290:	482d      	ldr	r0, [pc, #180]	; (8002348 <main+0x100>)
 8002292:	f7fe fe07 	bl	8000ea4 <Cam_Init>


  Ignition_Init_FireTIM(&htim10,TIM_CHANNEL_1,HAL_TIM_ACTIVE_CHANNEL_1);
 8002296:	2201      	movs	r2, #1
 8002298:	2100      	movs	r1, #0
 800229a:	482c      	ldr	r0, [pc, #176]	; (800234c <main+0x104>)
 800229c:	f7ff fa86 	bl	80017ac <Ignition_Init_FireTIM>
  Ignition_Init_DwellTIM(&htim11,TIM_CHANNEL_1,HAL_TIM_ACTIVE_CHANNEL_1);
 80022a0:	2201      	movs	r2, #1
 80022a2:	2100      	movs	r1, #0
 80022a4:	482a      	ldr	r0, [pc, #168]	; (8002350 <main+0x108>)
 80022a6:	f7ff faa1 	bl	80017ec <Ignition_Init_DwellTIM>
  Ignition_Init_IOConfig(GPIOD,Ignition_Cyl1_Pin,GPIOD,Ignition_Cyl2_Pin,GPIOD,Ignition_Cyl3_Pin,GPIOD,Ignition_Cyl4_Pin);
 80022aa:	2310      	movs	r3, #16
 80022ac:	9303      	str	r3, [sp, #12]
 80022ae:	4b29      	ldr	r3, [pc, #164]	; (8002354 <main+0x10c>)
 80022b0:	9302      	str	r3, [sp, #8]
 80022b2:	2340      	movs	r3, #64	; 0x40
 80022b4:	9301      	str	r3, [sp, #4]
 80022b6:	4b27      	ldr	r3, [pc, #156]	; (8002354 <main+0x10c>)
 80022b8:	9300      	str	r3, [sp, #0]
 80022ba:	2320      	movs	r3, #32
 80022bc:	4a25      	ldr	r2, [pc, #148]	; (8002354 <main+0x10c>)
 80022be:	2180      	movs	r1, #128	; 0x80
 80022c0:	4824      	ldr	r0, [pc, #144]	; (8002354 <main+0x10c>)
 80022c2:	f7ff fab3 	bl	800182c <Ignition_Init_IOConfig>
  Ignition_Init_IgnitionCyl();
 80022c6:	f7ff fae5 	bl	8001894 <Ignition_Init_IgnitionCyl>

  // Injection Init Functions
  Injection_Init_InjectorTIM(&htim14,TIM_CHANNEL_1,HAL_TIM_ACTIVE_CHANNEL_1);
 80022ca:	2201      	movs	r2, #1
 80022cc:	2100      	movs	r1, #0
 80022ce:	4822      	ldr	r0, [pc, #136]	; (8002358 <main+0x110>)
 80022d0:	f7ff fe50 	bl	8001f74 <Injection_Init_InjectorTIM>
  Injection_Init_IOConfig(GPIOD,Injection_Cyl1_Pin,GPIOD,Injection_Cyl2_Pin,GPIOD,Injection_Cyl3_Pin,GPIOD,Injection_Cyl4_Pin);
 80022d4:	2308      	movs	r3, #8
 80022d6:	9303      	str	r3, [sp, #12]
 80022d8:	4b1e      	ldr	r3, [pc, #120]	; (8002354 <main+0x10c>)
 80022da:	9302      	str	r3, [sp, #8]
 80022dc:	2304      	movs	r3, #4
 80022de:	9301      	str	r3, [sp, #4]
 80022e0:	4b1c      	ldr	r3, [pc, #112]	; (8002354 <main+0x10c>)
 80022e2:	9300      	str	r3, [sp, #0]
 80022e4:	2302      	movs	r3, #2
 80022e6:	4a1b      	ldr	r2, [pc, #108]	; (8002354 <main+0x10c>)
 80022e8:	2101      	movs	r1, #1
 80022ea:	481a      	ldr	r0, [pc, #104]	; (8002354 <main+0x10c>)
 80022ec:	f7ff fe62 	bl	8001fb4 <Injection_Init_IOConfig>
  Injection_Init_InjectionCyl();
 80022f0:	f7ff fe94 	bl	800201c <Injection_Init_InjectionCyl>

  ADC_Init_TriggerTIM(&htim3,TIM_CHANNEL_1,HAL_TIM_ACTIVE_CHANNEL_1);
 80022f4:	2201      	movs	r2, #1
 80022f6:	2100      	movs	r1, #0
 80022f8:	4818      	ldr	r0, [pc, #96]	; (800235c <main+0x114>)
 80022fa:	f7fe fd93 	bl	8000e24 <ADC_Init_TriggerTIM>
  ADC_Init_ADC1(&hadc1);
 80022fe:	4818      	ldr	r0, [pc, #96]	; (8002360 <main+0x118>)
 8002300:	f7fe fda4 	bl	8000e4c <ADC_Init_ADC1>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  char message[] = "Hello, World";
 8002304:	4b17      	ldr	r3, [pc, #92]	; (8002364 <main+0x11c>)
 8002306:	463c      	mov	r4, r7
 8002308:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800230a:	c407      	stmia	r4!, {r0, r1, r2}
 800230c:	7023      	strb	r3, [r4, #0]
	  HAL_GPIO_WritePin(TLE8888_CS_GPIO_Port, TLE8888_CS_Pin, GPIO_PIN_RESET);
 800230e:	2200      	movs	r2, #0
 8002310:	2110      	movs	r1, #16
 8002312:	4815      	ldr	r0, [pc, #84]	; (8002368 <main+0x120>)
 8002314:	f002 fba2 	bl	8004a5c <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit(&hspi1, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);
 8002318:	463b      	mov	r3, r7
 800231a:	4618      	mov	r0, r3
 800231c:	f7fd ff54 	bl	80001c8 <strlen>
 8002320:	4603      	mov	r3, r0
 8002322:	b29a      	uxth	r2, r3
 8002324:	4639      	mov	r1, r7
 8002326:	f04f 33ff 	mov.w	r3, #4294967295
 800232a:	4810      	ldr	r0, [pc, #64]	; (800236c <main+0x124>)
 800232c:	f003 f86a 	bl	8005404 <HAL_SPI_Transmit>
	  HAL_GPIO_WritePin(TLE8888_CS_GPIO_Port, TLE8888_CS_Pin, GPIO_PIN_SET);
 8002330:	2201      	movs	r2, #1
 8002332:	2110      	movs	r1, #16
 8002334:	480c      	ldr	r0, [pc, #48]	; (8002368 <main+0x120>)
 8002336:	f002 fb91 	bl	8004a5c <HAL_GPIO_WritePin>
	  HAL_Delay(10);
 800233a:	200a      	movs	r0, #10
 800233c:	f000 ffda 	bl	80032f4 <HAL_Delay>
	  HAL_Delay(100);
 8002340:	2064      	movs	r0, #100	; 0x64
 8002342:	f000 ffd7 	bl	80032f4 <HAL_Delay>
  {
 8002346:	e7dd      	b.n	8002304 <main+0xbc>
 8002348:	20000544 	.word	0x20000544
 800234c:	20000344 	.word	0x20000344
 8002350:	2000040c 	.word	0x2000040c
 8002354:	40020c00 	.word	0x40020c00
 8002358:	20000504 	.word	0x20000504
 800235c:	20000384 	.word	0x20000384
 8002360:	200003c4 	.word	0x200003c4
 8002364:	08006ffc 	.word	0x08006ffc
 8002368:	40020800 	.word	0x40020800
 800236c:	200004ac 	.word	0x200004ac

08002370 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b094      	sub	sp, #80	; 0x50
 8002374:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002376:	f107 0320 	add.w	r3, r7, #32
 800237a:	2230      	movs	r2, #48	; 0x30
 800237c:	2100      	movs	r1, #0
 800237e:	4618      	mov	r0, r3
 8002380:	f004 fe26 	bl	8006fd0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002384:	f107 030c 	add.w	r3, r7, #12
 8002388:	2200      	movs	r2, #0
 800238a:	601a      	str	r2, [r3, #0]
 800238c:	605a      	str	r2, [r3, #4]
 800238e:	609a      	str	r2, [r3, #8]
 8002390:	60da      	str	r2, [r3, #12]
 8002392:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002394:	2300      	movs	r3, #0
 8002396:	60bb      	str	r3, [r7, #8]
 8002398:	4b28      	ldr	r3, [pc, #160]	; (800243c <SystemClock_Config+0xcc>)
 800239a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800239c:	4a27      	ldr	r2, [pc, #156]	; (800243c <SystemClock_Config+0xcc>)
 800239e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023a2:	6413      	str	r3, [r2, #64]	; 0x40
 80023a4:	4b25      	ldr	r3, [pc, #148]	; (800243c <SystemClock_Config+0xcc>)
 80023a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023ac:	60bb      	str	r3, [r7, #8]
 80023ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80023b0:	2300      	movs	r3, #0
 80023b2:	607b      	str	r3, [r7, #4]
 80023b4:	4b22      	ldr	r3, [pc, #136]	; (8002440 <SystemClock_Config+0xd0>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a21      	ldr	r2, [pc, #132]	; (8002440 <SystemClock_Config+0xd0>)
 80023ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023be:	6013      	str	r3, [r2, #0]
 80023c0:	4b1f      	ldr	r3, [pc, #124]	; (8002440 <SystemClock_Config+0xd0>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023c8:	607b      	str	r3, [r7, #4]
 80023ca:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80023cc:	2302      	movs	r3, #2
 80023ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80023d0:	2301      	movs	r3, #1
 80023d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80023d4:	2310      	movs	r3, #16
 80023d6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80023d8:	2302      	movs	r3, #2
 80023da:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80023dc:	2300      	movs	r3, #0
 80023de:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 80023e0:	230c      	movs	r3, #12
 80023e2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 252;
 80023e4:	23fc      	movs	r3, #252	; 0xfc
 80023e6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80023e8:	2302      	movs	r3, #2
 80023ea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80023ec:	2304      	movs	r3, #4
 80023ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80023f0:	f107 0320 	add.w	r3, r7, #32
 80023f4:	4618      	mov	r0, r3
 80023f6:	f002 fb65 	bl	8004ac4 <HAL_RCC_OscConfig>
 80023fa:	4603      	mov	r3, r0
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d001      	beq.n	8002404 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002400:	f000 fc98 	bl	8002d34 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002404:	230f      	movs	r3, #15
 8002406:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002408:	2302      	movs	r3, #2
 800240a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800240c:	2300      	movs	r3, #0
 800240e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002410:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002414:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002416:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800241a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800241c:	f107 030c 	add.w	r3, r7, #12
 8002420:	2105      	movs	r1, #5
 8002422:	4618      	mov	r0, r3
 8002424:	f002 fdbe 	bl	8004fa4 <HAL_RCC_ClockConfig>
 8002428:	4603      	mov	r3, r0
 800242a:	2b00      	cmp	r3, #0
 800242c:	d001      	beq.n	8002432 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800242e:	f000 fc81 	bl	8002d34 <Error_Handler>
  }
}
 8002432:	bf00      	nop
 8002434:	3750      	adds	r7, #80	; 0x50
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	40023800 	.word	0x40023800
 8002440:	40007000 	.word	0x40007000

08002444 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	af00      	add	r7, sp, #0
  /* TIM1_TRG_COM_TIM11_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8002448:	2200      	movs	r2, #0
 800244a:	2100      	movs	r1, #0
 800244c:	201a      	movs	r0, #26
 800244e:	f001 fd8c 	bl	8003f6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8002452:	201a      	movs	r0, #26
 8002454:	f001 fda5 	bl	8003fa2 <HAL_NVIC_EnableIRQ>
  /* TIM3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM3_IRQn, 2, 0);
 8002458:	2200      	movs	r2, #0
 800245a:	2102      	movs	r1, #2
 800245c:	201d      	movs	r0, #29
 800245e:	f001 fd84 	bl	8003f6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002462:	201d      	movs	r0, #29
 8002464:	f001 fd9d 	bl	8003fa2 <HAL_NVIC_EnableIRQ>
  /* TIM8_BRK_TIM12_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8002468:	2200      	movs	r2, #0
 800246a:	2100      	movs	r1, #0
 800246c:	202b      	movs	r0, #43	; 0x2b
 800246e:	f001 fd7c 	bl	8003f6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8002472:	202b      	movs	r0, #43	; 0x2b
 8002474:	f001 fd95 	bl	8003fa2 <HAL_NVIC_EnableIRQ>
  /* TIM1_UP_TIM10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002478:	2200      	movs	r2, #0
 800247a:	2100      	movs	r1, #0
 800247c:	2019      	movs	r0, #25
 800247e:	f001 fd74 	bl	8003f6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002482:	2019      	movs	r0, #25
 8002484:	f001 fd8d 	bl	8003fa2 <HAL_NVIC_EnableIRQ>
  /* TIM8_TRG_COM_TIM14_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8002488:	2200      	movs	r2, #0
 800248a:	2100      	movs	r1, #0
 800248c:	202d      	movs	r0, #45	; 0x2d
 800248e:	f001 fd6c 	bl	8003f6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8002492:	202d      	movs	r0, #45	; 0x2d
 8002494:	f001 fd85 	bl	8003fa2 <HAL_NVIC_EnableIRQ>
  /* ADC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(ADC_IRQn, 2, 0);
 8002498:	2200      	movs	r2, #0
 800249a:	2102      	movs	r1, #2
 800249c:	2012      	movs	r0, #18
 800249e:	f001 fd64 	bl	8003f6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADC_IRQn);
 80024a2:	2012      	movs	r0, #18
 80024a4:	f001 fd7d 	bl	8003fa2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 2, 0);
 80024a8:	2200      	movs	r2, #0
 80024aa:	2102      	movs	r1, #2
 80024ac:	2038      	movs	r0, #56	; 0x38
 80024ae:	f001 fd5c 	bl	8003f6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80024b2:	2038      	movs	r0, #56	; 0x38
 80024b4:	f001 fd75 	bl	8003fa2 <HAL_NVIC_EnableIRQ>
  /* SPI1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80024b8:	2200      	movs	r2, #0
 80024ba:	2100      	movs	r1, #0
 80024bc:	2023      	movs	r0, #35	; 0x23
 80024be:	f001 fd54 	bl	8003f6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80024c2:	2023      	movs	r0, #35	; 0x23
 80024c4:	f001 fd6d 	bl	8003fa2 <HAL_NVIC_EnableIRQ>
}
 80024c8:	bf00      	nop
 80024ca:	bd80      	pop	{r7, pc}

080024cc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b084      	sub	sp, #16
 80024d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80024d2:	463b      	mov	r3, r7
 80024d4:	2200      	movs	r2, #0
 80024d6:	601a      	str	r2, [r3, #0]
 80024d8:	605a      	str	r2, [r3, #4]
 80024da:	609a      	str	r2, [r3, #8]
 80024dc:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80024de:	4b29      	ldr	r3, [pc, #164]	; (8002584 <MX_ADC1_Init+0xb8>)
 80024e0:	4a29      	ldr	r2, [pc, #164]	; (8002588 <MX_ADC1_Init+0xbc>)
 80024e2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80024e4:	4b27      	ldr	r3, [pc, #156]	; (8002584 <MX_ADC1_Init+0xb8>)
 80024e6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80024ea:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80024ec:	4b25      	ldr	r3, [pc, #148]	; (8002584 <MX_ADC1_Init+0xb8>)
 80024ee:	2200      	movs	r2, #0
 80024f0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80024f2:	4b24      	ldr	r3, [pc, #144]	; (8002584 <MX_ADC1_Init+0xb8>)
 80024f4:	2201      	movs	r2, #1
 80024f6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80024f8:	4b22      	ldr	r3, [pc, #136]	; (8002584 <MX_ADC1_Init+0xb8>)
 80024fa:	2200      	movs	r2, #0
 80024fc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80024fe:	4b21      	ldr	r3, [pc, #132]	; (8002584 <MX_ADC1_Init+0xb8>)
 8002500:	2200      	movs	r2, #0
 8002502:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISINGFALLING;
 8002506:	4b1f      	ldr	r3, [pc, #124]	; (8002584 <MX_ADC1_Init+0xb8>)
 8002508:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 800250c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 800250e:	4b1d      	ldr	r3, [pc, #116]	; (8002584 <MX_ADC1_Init+0xb8>)
 8002510:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002514:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002516:	4b1b      	ldr	r3, [pc, #108]	; (8002584 <MX_ADC1_Init+0xb8>)
 8002518:	2200      	movs	r2, #0
 800251a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 800251c:	4b19      	ldr	r3, [pc, #100]	; (8002584 <MX_ADC1_Init+0xb8>)
 800251e:	2202      	movs	r2, #2
 8002520:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8002522:	4b18      	ldr	r3, [pc, #96]	; (8002584 <MX_ADC1_Init+0xb8>)
 8002524:	2201      	movs	r2, #1
 8002526:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800252a:	4b16      	ldr	r3, [pc, #88]	; (8002584 <MX_ADC1_Init+0xb8>)
 800252c:	2201      	movs	r2, #1
 800252e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002530:	4814      	ldr	r0, [pc, #80]	; (8002584 <MX_ADC1_Init+0xb8>)
 8002532:	f000 ff01 	bl	8003338 <HAL_ADC_Init>
 8002536:	4603      	mov	r3, r0
 8002538:	2b00      	cmp	r3, #0
 800253a:	d001      	beq.n	8002540 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 800253c:	f000 fbfa 	bl	8002d34 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002540:	2301      	movs	r3, #1
 8002542:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002544:	2301      	movs	r3, #1
 8002546:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 8002548:	2305      	movs	r3, #5
 800254a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800254c:	463b      	mov	r3, r7
 800254e:	4619      	mov	r1, r3
 8002550:	480c      	ldr	r0, [pc, #48]	; (8002584 <MX_ADC1_Init+0xb8>)
 8002552:	f001 f985 	bl	8003860 <HAL_ADC_ConfigChannel>
 8002556:	4603      	mov	r3, r0
 8002558:	2b00      	cmp	r3, #0
 800255a:	d001      	beq.n	8002560 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 800255c:	f000 fbea 	bl	8002d34 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8002560:	2302      	movs	r3, #2
 8002562:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8002564:	2302      	movs	r3, #2
 8002566:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002568:	463b      	mov	r3, r7
 800256a:	4619      	mov	r1, r3
 800256c:	4805      	ldr	r0, [pc, #20]	; (8002584 <MX_ADC1_Init+0xb8>)
 800256e:	f001 f977 	bl	8003860 <HAL_ADC_ConfigChannel>
 8002572:	4603      	mov	r3, r0
 8002574:	2b00      	cmp	r3, #0
 8002576:	d001      	beq.n	800257c <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8002578:	f000 fbdc 	bl	8002d34 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800257c:	bf00      	nop
 800257e:	3710      	adds	r7, #16
 8002580:	46bd      	mov	sp, r7
 8002582:	bd80      	pop	{r7, pc}
 8002584:	200003c4 	.word	0x200003c4
 8002588:	40012000 	.word	0x40012000

0800258c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002590:	4b18      	ldr	r3, [pc, #96]	; (80025f4 <MX_SPI1_Init+0x68>)
 8002592:	4a19      	ldr	r2, [pc, #100]	; (80025f8 <MX_SPI1_Init+0x6c>)
 8002594:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002596:	4b17      	ldr	r3, [pc, #92]	; (80025f4 <MX_SPI1_Init+0x68>)
 8002598:	f44f 7282 	mov.w	r2, #260	; 0x104
 800259c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800259e:	4b15      	ldr	r3, [pc, #84]	; (80025f4 <MX_SPI1_Init+0x68>)
 80025a0:	2200      	movs	r2, #0
 80025a2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80025a4:	4b13      	ldr	r3, [pc, #76]	; (80025f4 <MX_SPI1_Init+0x68>)
 80025a6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80025aa:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80025ac:	4b11      	ldr	r3, [pc, #68]	; (80025f4 <MX_SPI1_Init+0x68>)
 80025ae:	2200      	movs	r2, #0
 80025b0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80025b2:	4b10      	ldr	r3, [pc, #64]	; (80025f4 <MX_SPI1_Init+0x68>)
 80025b4:	2201      	movs	r2, #1
 80025b6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80025b8:	4b0e      	ldr	r3, [pc, #56]	; (80025f4 <MX_SPI1_Init+0x68>)
 80025ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025be:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80025c0:	4b0c      	ldr	r3, [pc, #48]	; (80025f4 <MX_SPI1_Init+0x68>)
 80025c2:	2230      	movs	r2, #48	; 0x30
 80025c4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_LSB;
 80025c6:	4b0b      	ldr	r3, [pc, #44]	; (80025f4 <MX_SPI1_Init+0x68>)
 80025c8:	2280      	movs	r2, #128	; 0x80
 80025ca:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80025cc:	4b09      	ldr	r3, [pc, #36]	; (80025f4 <MX_SPI1_Init+0x68>)
 80025ce:	2200      	movs	r2, #0
 80025d0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80025d2:	4b08      	ldr	r3, [pc, #32]	; (80025f4 <MX_SPI1_Init+0x68>)
 80025d4:	2200      	movs	r2, #0
 80025d6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80025d8:	4b06      	ldr	r3, [pc, #24]	; (80025f4 <MX_SPI1_Init+0x68>)
 80025da:	220a      	movs	r2, #10
 80025dc:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80025de:	4805      	ldr	r0, [pc, #20]	; (80025f4 <MX_SPI1_Init+0x68>)
 80025e0:	f002 feac 	bl	800533c <HAL_SPI_Init>
 80025e4:	4603      	mov	r3, r0
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d001      	beq.n	80025ee <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 80025ea:	f000 fba3 	bl	8002d34 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80025ee:	bf00      	nop
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	200004ac 	.word	0x200004ac
 80025f8:	40013000 	.word	0x40013000

080025fc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b08e      	sub	sp, #56	; 0x38
 8002600:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002602:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002606:	2200      	movs	r2, #0
 8002608:	601a      	str	r2, [r3, #0]
 800260a:	605a      	str	r2, [r3, #4]
 800260c:	609a      	str	r2, [r3, #8]
 800260e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002610:	f107 0320 	add.w	r3, r7, #32
 8002614:	2200      	movs	r2, #0
 8002616:	601a      	str	r2, [r3, #0]
 8002618:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800261a:	1d3b      	adds	r3, r7, #4
 800261c:	2200      	movs	r2, #0
 800261e:	601a      	str	r2, [r3, #0]
 8002620:	605a      	str	r2, [r3, #4]
 8002622:	609a      	str	r2, [r3, #8]
 8002624:	60da      	str	r2, [r3, #12]
 8002626:	611a      	str	r2, [r3, #16]
 8002628:	615a      	str	r2, [r3, #20]
 800262a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800262c:	4b30      	ldr	r3, [pc, #192]	; (80026f0 <MX_TIM3_Init+0xf4>)
 800262e:	4a31      	ldr	r2, [pc, #196]	; (80026f4 <MX_TIM3_Init+0xf8>)
 8002630:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84;
 8002632:	4b2f      	ldr	r3, [pc, #188]	; (80026f0 <MX_TIM3_Init+0xf4>)
 8002634:	2254      	movs	r2, #84	; 0x54
 8002636:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002638:	4b2d      	ldr	r3, [pc, #180]	; (80026f0 <MX_TIM3_Init+0xf4>)
 800263a:	2200      	movs	r2, #0
 800263c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 50000;
 800263e:	4b2c      	ldr	r3, [pc, #176]	; (80026f0 <MX_TIM3_Init+0xf4>)
 8002640:	f24c 3250 	movw	r2, #50000	; 0xc350
 8002644:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002646:	4b2a      	ldr	r3, [pc, #168]	; (80026f0 <MX_TIM3_Init+0xf4>)
 8002648:	2200      	movs	r2, #0
 800264a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800264c:	4b28      	ldr	r3, [pc, #160]	; (80026f0 <MX_TIM3_Init+0xf4>)
 800264e:	2280      	movs	r2, #128	; 0x80
 8002650:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002652:	4827      	ldr	r0, [pc, #156]	; (80026f0 <MX_TIM3_Init+0xf4>)
 8002654:	f003 f9d4 	bl	8005a00 <HAL_TIM_Base_Init>
 8002658:	4603      	mov	r3, r0
 800265a:	2b00      	cmp	r3, #0
 800265c:	d001      	beq.n	8002662 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800265e:	f000 fb69 	bl	8002d34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002662:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002666:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002668:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800266c:	4619      	mov	r1, r3
 800266e:	4820      	ldr	r0, [pc, #128]	; (80026f0 <MX_TIM3_Init+0xf4>)
 8002670:	f003 feb0 	bl	80063d4 <HAL_TIM_ConfigClockSource>
 8002674:	4603      	mov	r3, r0
 8002676:	2b00      	cmp	r3, #0
 8002678:	d001      	beq.n	800267e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800267a:	f000 fb5b 	bl	8002d34 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 800267e:	481c      	ldr	r0, [pc, #112]	; (80026f0 <MX_TIM3_Init+0xf4>)
 8002680:	f003 fa0d 	bl	8005a9e <HAL_TIM_OC_Init>
 8002684:	4603      	mov	r3, r0
 8002686:	2b00      	cmp	r3, #0
 8002688:	d001      	beq.n	800268e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800268a:	f000 fb53 	bl	8002d34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800268e:	2320      	movs	r3, #32
 8002690:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002692:	2300      	movs	r3, #0
 8002694:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002696:	f107 0320 	add.w	r3, r7, #32
 800269a:	4619      	mov	r1, r3
 800269c:	4814      	ldr	r0, [pc, #80]	; (80026f0 <MX_TIM3_Init+0xf4>)
 800269e:	f004 fbe3 	bl	8006e68 <HAL_TIMEx_MasterConfigSynchronization>
 80026a2:	4603      	mov	r3, r0
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d001      	beq.n	80026ac <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80026a8:	f000 fb44 	bl	8002d34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80026ac:	2300      	movs	r3, #0
 80026ae:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80026b0:	2300      	movs	r3, #0
 80026b2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80026b4:	2300      	movs	r3, #0
 80026b6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80026b8:	2300      	movs	r3, #0
 80026ba:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80026bc:	1d3b      	adds	r3, r7, #4
 80026be:	2200      	movs	r2, #0
 80026c0:	4619      	mov	r1, r3
 80026c2:	480b      	ldr	r0, [pc, #44]	; (80026f0 <MX_TIM3_Init+0xf4>)
 80026c4:	f003 fcc4 	bl	8006050 <HAL_TIM_OC_ConfigChannel>
 80026c8:	4603      	mov	r3, r0
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d001      	beq.n	80026d2 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80026ce:	f000 fb31 	bl	8002d34 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80026d2:	1d3b      	adds	r3, r7, #4
 80026d4:	2204      	movs	r2, #4
 80026d6:	4619      	mov	r1, r3
 80026d8:	4805      	ldr	r0, [pc, #20]	; (80026f0 <MX_TIM3_Init+0xf4>)
 80026da:	f003 fcb9 	bl	8006050 <HAL_TIM_OC_ConfigChannel>
 80026de:	4603      	mov	r3, r0
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d001      	beq.n	80026e8 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 80026e4:	f000 fb26 	bl	8002d34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80026e8:	bf00      	nop
 80026ea:	3738      	adds	r7, #56	; 0x38
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}
 80026f0:	20000384 	.word	0x20000384
 80026f4:	40000400 	.word	0x40000400

080026f8 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b088      	sub	sp, #32
 80026fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80026fe:	1d3b      	adds	r3, r7, #4
 8002700:	2200      	movs	r2, #0
 8002702:	601a      	str	r2, [r3, #0]
 8002704:	605a      	str	r2, [r3, #4]
 8002706:	609a      	str	r2, [r3, #8]
 8002708:	60da      	str	r2, [r3, #12]
 800270a:	611a      	str	r2, [r3, #16]
 800270c:	615a      	str	r2, [r3, #20]
 800270e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8002710:	4b21      	ldr	r3, [pc, #132]	; (8002798 <MX_TIM10_Init+0xa0>)
 8002712:	4a22      	ldr	r2, [pc, #136]	; (800279c <MX_TIM10_Init+0xa4>)
 8002714:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 167;
 8002716:	4b20      	ldr	r3, [pc, #128]	; (8002798 <MX_TIM10_Init+0xa0>)
 8002718:	22a7      	movs	r2, #167	; 0xa7
 800271a:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800271c:	4b1e      	ldr	r3, [pc, #120]	; (8002798 <MX_TIM10_Init+0xa0>)
 800271e:	2200      	movs	r2, #0
 8002720:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 10;
 8002722:	4b1d      	ldr	r3, [pc, #116]	; (8002798 <MX_TIM10_Init+0xa0>)
 8002724:	220a      	movs	r2, #10
 8002726:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002728:	4b1b      	ldr	r3, [pc, #108]	; (8002798 <MX_TIM10_Init+0xa0>)
 800272a:	2200      	movs	r2, #0
 800272c:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800272e:	4b1a      	ldr	r3, [pc, #104]	; (8002798 <MX_TIM10_Init+0xa0>)
 8002730:	2280      	movs	r2, #128	; 0x80
 8002732:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8002734:	4818      	ldr	r0, [pc, #96]	; (8002798 <MX_TIM10_Init+0xa0>)
 8002736:	f003 f963 	bl	8005a00 <HAL_TIM_Base_Init>
 800273a:	4603      	mov	r3, r0
 800273c:	2b00      	cmp	r3, #0
 800273e:	d001      	beq.n	8002744 <MX_TIM10_Init+0x4c>
  {
    Error_Handler();
 8002740:	f000 faf8 	bl	8002d34 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8002744:	4814      	ldr	r0, [pc, #80]	; (8002798 <MX_TIM10_Init+0xa0>)
 8002746:	f003 fa63 	bl	8005c10 <HAL_TIM_PWM_Init>
 800274a:	4603      	mov	r3, r0
 800274c:	2b00      	cmp	r3, #0
 800274e:	d001      	beq.n	8002754 <MX_TIM10_Init+0x5c>
  {
    Error_Handler();
 8002750:	f000 faf0 	bl	8002d34 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim10, TIM_OPMODE_SINGLE) != HAL_OK)
 8002754:	2108      	movs	r1, #8
 8002756:	4810      	ldr	r0, [pc, #64]	; (8002798 <MX_TIM10_Init+0xa0>)
 8002758:	f003 fb2c 	bl	8005db4 <HAL_TIM_OnePulse_Init>
 800275c:	4603      	mov	r3, r0
 800275e:	2b00      	cmp	r3, #0
 8002760:	d001      	beq.n	8002766 <MX_TIM10_Init+0x6e>
  {
    Error_Handler();
 8002762:	f000 fae7 	bl	8002d34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002766:	2360      	movs	r3, #96	; 0x60
 8002768:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 800276a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800276e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002770:	2300      	movs	r3, #0
 8002772:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002774:	2300      	movs	r3, #0
 8002776:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002778:	1d3b      	adds	r3, r7, #4
 800277a:	2200      	movs	r2, #0
 800277c:	4619      	mov	r1, r3
 800277e:	4806      	ldr	r0, [pc, #24]	; (8002798 <MX_TIM10_Init+0xa0>)
 8002780:	f003 fd62 	bl	8006248 <HAL_TIM_PWM_ConfigChannel>
 8002784:	4603      	mov	r3, r0
 8002786:	2b00      	cmp	r3, #0
 8002788:	d001      	beq.n	800278e <MX_TIM10_Init+0x96>
  {
    Error_Handler();
 800278a:	f000 fad3 	bl	8002d34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 800278e:	bf00      	nop
 8002790:	3720      	adds	r7, #32
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}
 8002796:	bf00      	nop
 8002798:	20000344 	.word	0x20000344
 800279c:	40014400 	.word	0x40014400

080027a0 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b088      	sub	sp, #32
 80027a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80027a6:	1d3b      	adds	r3, r7, #4
 80027a8:	2200      	movs	r2, #0
 80027aa:	601a      	str	r2, [r3, #0]
 80027ac:	605a      	str	r2, [r3, #4]
 80027ae:	609a      	str	r2, [r3, #8]
 80027b0:	60da      	str	r2, [r3, #12]
 80027b2:	611a      	str	r2, [r3, #16]
 80027b4:	615a      	str	r2, [r3, #20]
 80027b6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80027b8:	4b21      	ldr	r3, [pc, #132]	; (8002840 <MX_TIM11_Init+0xa0>)
 80027ba:	4a22      	ldr	r2, [pc, #136]	; (8002844 <MX_TIM11_Init+0xa4>)
 80027bc:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 167;
 80027be:	4b20      	ldr	r3, [pc, #128]	; (8002840 <MX_TIM11_Init+0xa0>)
 80027c0:	22a7      	movs	r2, #167	; 0xa7
 80027c2:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027c4:	4b1e      	ldr	r3, [pc, #120]	; (8002840 <MX_TIM11_Init+0xa0>)
 80027c6:	2200      	movs	r2, #0
 80027c8:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 10;
 80027ca:	4b1d      	ldr	r3, [pc, #116]	; (8002840 <MX_TIM11_Init+0xa0>)
 80027cc:	220a      	movs	r2, #10
 80027ce:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027d0:	4b1b      	ldr	r3, [pc, #108]	; (8002840 <MX_TIM11_Init+0xa0>)
 80027d2:	2200      	movs	r2, #0
 80027d4:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80027d6:	4b1a      	ldr	r3, [pc, #104]	; (8002840 <MX_TIM11_Init+0xa0>)
 80027d8:	2280      	movs	r2, #128	; 0x80
 80027da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80027dc:	4818      	ldr	r0, [pc, #96]	; (8002840 <MX_TIM11_Init+0xa0>)
 80027de:	f003 f90f 	bl	8005a00 <HAL_TIM_Base_Init>
 80027e2:	4603      	mov	r3, r0
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d001      	beq.n	80027ec <MX_TIM11_Init+0x4c>
  {
    Error_Handler();
 80027e8:	f000 faa4 	bl	8002d34 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 80027ec:	4814      	ldr	r0, [pc, #80]	; (8002840 <MX_TIM11_Init+0xa0>)
 80027ee:	f003 fa0f 	bl	8005c10 <HAL_TIM_PWM_Init>
 80027f2:	4603      	mov	r3, r0
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d001      	beq.n	80027fc <MX_TIM11_Init+0x5c>
  {
    Error_Handler();
 80027f8:	f000 fa9c 	bl	8002d34 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim11, TIM_OPMODE_SINGLE) != HAL_OK)
 80027fc:	2108      	movs	r1, #8
 80027fe:	4810      	ldr	r0, [pc, #64]	; (8002840 <MX_TIM11_Init+0xa0>)
 8002800:	f003 fad8 	bl	8005db4 <HAL_TIM_OnePulse_Init>
 8002804:	4603      	mov	r3, r0
 8002806:	2b00      	cmp	r3, #0
 8002808:	d001      	beq.n	800280e <MX_TIM11_Init+0x6e>
  {
    Error_Handler();
 800280a:	f000 fa93 	bl	8002d34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800280e:	2360      	movs	r3, #96	; 0x60
 8002810:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 8002812:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002816:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002818:	2300      	movs	r3, #0
 800281a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800281c:	2300      	movs	r3, #0
 800281e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002820:	1d3b      	adds	r3, r7, #4
 8002822:	2200      	movs	r2, #0
 8002824:	4619      	mov	r1, r3
 8002826:	4806      	ldr	r0, [pc, #24]	; (8002840 <MX_TIM11_Init+0xa0>)
 8002828:	f003 fd0e 	bl	8006248 <HAL_TIM_PWM_ConfigChannel>
 800282c:	4603      	mov	r3, r0
 800282e:	2b00      	cmp	r3, #0
 8002830:	d001      	beq.n	8002836 <MX_TIM11_Init+0x96>
  {
    Error_Handler();
 8002832:	f000 fa7f 	bl	8002d34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8002836:	bf00      	nop
 8002838:	3720      	adds	r7, #32
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}
 800283e:	bf00      	nop
 8002840:	2000040c 	.word	0x2000040c
 8002844:	40014800 	.word	0x40014800

08002848 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b088      	sub	sp, #32
 800284c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800284e:	f107 0310 	add.w	r3, r7, #16
 8002852:	2200      	movs	r2, #0
 8002854:	601a      	str	r2, [r3, #0]
 8002856:	605a      	str	r2, [r3, #4]
 8002858:	609a      	str	r2, [r3, #8]
 800285a:	60da      	str	r2, [r3, #12]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800285c:	463b      	mov	r3, r7
 800285e:	2200      	movs	r2, #0
 8002860:	601a      	str	r2, [r3, #0]
 8002862:	605a      	str	r2, [r3, #4]
 8002864:	609a      	str	r2, [r3, #8]
 8002866:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8002868:	4b29      	ldr	r3, [pc, #164]	; (8002910 <MX_TIM12_Init+0xc8>)
 800286a:	4a2a      	ldr	r2, [pc, #168]	; (8002914 <MX_TIM12_Init+0xcc>)
 800286c:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 83;
 800286e:	4b28      	ldr	r3, [pc, #160]	; (8002910 <MX_TIM12_Init+0xc8>)
 8002870:	2253      	movs	r2, #83	; 0x53
 8002872:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002874:	4b26      	ldr	r3, [pc, #152]	; (8002910 <MX_TIM12_Init+0xc8>)
 8002876:	2200      	movs	r2, #0
 8002878:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 800287a:	4b25      	ldr	r3, [pc, #148]	; (8002910 <MX_TIM12_Init+0xc8>)
 800287c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002880:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002882:	4b23      	ldr	r3, [pc, #140]	; (8002910 <MX_TIM12_Init+0xc8>)
 8002884:	2200      	movs	r2, #0
 8002886:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002888:	4b21      	ldr	r3, [pc, #132]	; (8002910 <MX_TIM12_Init+0xc8>)
 800288a:	2280      	movs	r2, #128	; 0x80
 800288c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 800288e:	4820      	ldr	r0, [pc, #128]	; (8002910 <MX_TIM12_Init+0xc8>)
 8002890:	f003 f8b6 	bl	8005a00 <HAL_TIM_Base_Init>
 8002894:	4603      	mov	r3, r0
 8002896:	2b00      	cmp	r3, #0
 8002898:	d001      	beq.n	800289e <MX_TIM12_Init+0x56>
  {
    Error_Handler();
 800289a:	f000 fa4b 	bl	8002d34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800289e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028a2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 80028a4:	f107 0310 	add.w	r3, r7, #16
 80028a8:	4619      	mov	r1, r3
 80028aa:	4819      	ldr	r0, [pc, #100]	; (8002910 <MX_TIM12_Init+0xc8>)
 80028ac:	f003 fd92 	bl	80063d4 <HAL_TIM_ConfigClockSource>
 80028b0:	4603      	mov	r3, r0
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d001      	beq.n	80028ba <MX_TIM12_Init+0x72>
  {
    Error_Handler();
 80028b6:	f000 fa3d 	bl	8002d34 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim12) != HAL_OK)
 80028ba:	4815      	ldr	r0, [pc, #84]	; (8002910 <MX_TIM12_Init+0xc8>)
 80028bc:	f003 f9dd 	bl	8005c7a <HAL_TIM_IC_Init>
 80028c0:	4603      	mov	r3, r0
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d001      	beq.n	80028ca <MX_TIM12_Init+0x82>
  {
    Error_Handler();
 80028c6:	f000 fa35 	bl	8002d34 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80028ca:	2300      	movs	r3, #0
 80028cc:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80028ce:	2301      	movs	r3, #1
 80028d0:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80028d2:	2300      	movs	r3, #0
 80028d4:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80028d6:	2300      	movs	r3, #0
 80028d8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim12, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80028da:	463b      	mov	r3, r7
 80028dc:	2200      	movs	r2, #0
 80028de:	4619      	mov	r1, r3
 80028e0:	480b      	ldr	r0, [pc, #44]	; (8002910 <MX_TIM12_Init+0xc8>)
 80028e2:	f003 fc15 	bl	8006110 <HAL_TIM_IC_ConfigChannel>
 80028e6:	4603      	mov	r3, r0
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d001      	beq.n	80028f0 <MX_TIM12_Init+0xa8>
  {
    Error_Handler();
 80028ec:	f000 fa22 	bl	8002d34 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim12, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80028f0:	463b      	mov	r3, r7
 80028f2:	2204      	movs	r2, #4
 80028f4:	4619      	mov	r1, r3
 80028f6:	4806      	ldr	r0, [pc, #24]	; (8002910 <MX_TIM12_Init+0xc8>)
 80028f8:	f003 fc0a 	bl	8006110 <HAL_TIM_IC_ConfigChannel>
 80028fc:	4603      	mov	r3, r0
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d001      	beq.n	8002906 <MX_TIM12_Init+0xbe>
  {
    Error_Handler();
 8002902:	f000 fa17 	bl	8002d34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */

}
 8002906:	bf00      	nop
 8002908:	3720      	adds	r7, #32
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}
 800290e:	bf00      	nop
 8002910:	20000544 	.word	0x20000544
 8002914:	40001800 	.word	0x40001800

08002918 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b088      	sub	sp, #32
 800291c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800291e:	1d3b      	adds	r3, r7, #4
 8002920:	2200      	movs	r2, #0
 8002922:	601a      	str	r2, [r3, #0]
 8002924:	605a      	str	r2, [r3, #4]
 8002926:	609a      	str	r2, [r3, #8]
 8002928:	60da      	str	r2, [r3, #12]
 800292a:	611a      	str	r2, [r3, #16]
 800292c:	615a      	str	r2, [r3, #20]
 800292e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8002930:	4b21      	ldr	r3, [pc, #132]	; (80029b8 <MX_TIM14_Init+0xa0>)
 8002932:	4a22      	ldr	r2, [pc, #136]	; (80029bc <MX_TIM14_Init+0xa4>)
 8002934:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 83;
 8002936:	4b20      	ldr	r3, [pc, #128]	; (80029b8 <MX_TIM14_Init+0xa0>)
 8002938:	2253      	movs	r2, #83	; 0x53
 800293a:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800293c:	4b1e      	ldr	r3, [pc, #120]	; (80029b8 <MX_TIM14_Init+0xa0>)
 800293e:	2200      	movs	r2, #0
 8002940:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 10;
 8002942:	4b1d      	ldr	r3, [pc, #116]	; (80029b8 <MX_TIM14_Init+0xa0>)
 8002944:	220a      	movs	r2, #10
 8002946:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002948:	4b1b      	ldr	r3, [pc, #108]	; (80029b8 <MX_TIM14_Init+0xa0>)
 800294a:	2200      	movs	r2, #0
 800294c:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800294e:	4b1a      	ldr	r3, [pc, #104]	; (80029b8 <MX_TIM14_Init+0xa0>)
 8002950:	2280      	movs	r2, #128	; 0x80
 8002952:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8002954:	4818      	ldr	r0, [pc, #96]	; (80029b8 <MX_TIM14_Init+0xa0>)
 8002956:	f003 f853 	bl	8005a00 <HAL_TIM_Base_Init>
 800295a:	4603      	mov	r3, r0
 800295c:	2b00      	cmp	r3, #0
 800295e:	d001      	beq.n	8002964 <MX_TIM14_Init+0x4c>
  {
    Error_Handler();
 8002960:	f000 f9e8 	bl	8002d34 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8002964:	4814      	ldr	r0, [pc, #80]	; (80029b8 <MX_TIM14_Init+0xa0>)
 8002966:	f003 f953 	bl	8005c10 <HAL_TIM_PWM_Init>
 800296a:	4603      	mov	r3, r0
 800296c:	2b00      	cmp	r3, #0
 800296e:	d001      	beq.n	8002974 <MX_TIM14_Init+0x5c>
  {
    Error_Handler();
 8002970:	f000 f9e0 	bl	8002d34 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim14, TIM_OPMODE_SINGLE) != HAL_OK)
 8002974:	2108      	movs	r1, #8
 8002976:	4810      	ldr	r0, [pc, #64]	; (80029b8 <MX_TIM14_Init+0xa0>)
 8002978:	f003 fa1c 	bl	8005db4 <HAL_TIM_OnePulse_Init>
 800297c:	4603      	mov	r3, r0
 800297e:	2b00      	cmp	r3, #0
 8002980:	d001      	beq.n	8002986 <MX_TIM14_Init+0x6e>
  {
    Error_Handler();
 8002982:	f000 f9d7 	bl	8002d34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002986:	2360      	movs	r3, #96	; 0x60
 8002988:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 800298a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800298e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002990:	2300      	movs	r3, #0
 8002992:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002994:	2300      	movs	r3, #0
 8002996:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002998:	1d3b      	adds	r3, r7, #4
 800299a:	2200      	movs	r2, #0
 800299c:	4619      	mov	r1, r3
 800299e:	4806      	ldr	r0, [pc, #24]	; (80029b8 <MX_TIM14_Init+0xa0>)
 80029a0:	f003 fc52 	bl	8006248 <HAL_TIM_PWM_ConfigChannel>
 80029a4:	4603      	mov	r3, r0
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d001      	beq.n	80029ae <MX_TIM14_Init+0x96>
  {
    Error_Handler();
 80029aa:	f000 f9c3 	bl	8002d34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 80029ae:	bf00      	nop
 80029b0:	3720      	adds	r7, #32
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}
 80029b6:	bf00      	nop
 80029b8:	20000504 	.word	0x20000504
 80029bc:	40002000 	.word	0x40002000

080029c0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b083      	sub	sp, #12
 80029c4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80029c6:	2300      	movs	r3, #0
 80029c8:	607b      	str	r3, [r7, #4]
 80029ca:	4b09      	ldr	r3, [pc, #36]	; (80029f0 <MX_DMA_Init+0x30>)
 80029cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ce:	4a08      	ldr	r2, [pc, #32]	; (80029f0 <MX_DMA_Init+0x30>)
 80029d0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80029d4:	6313      	str	r3, [r2, #48]	; 0x30
 80029d6:	4b06      	ldr	r3, [pc, #24]	; (80029f0 <MX_DMA_Init+0x30>)
 80029d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029de:	607b      	str	r3, [r7, #4]
 80029e0:	687b      	ldr	r3, [r7, #4]

}
 80029e2:	bf00      	nop
 80029e4:	370c      	adds	r7, #12
 80029e6:	46bd      	mov	sp, r7
 80029e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ec:	4770      	bx	lr
 80029ee:	bf00      	nop
 80029f0:	40023800 	.word	0x40023800

080029f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b08a      	sub	sp, #40	; 0x28
 80029f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029fa:	f107 0314 	add.w	r3, r7, #20
 80029fe:	2200      	movs	r2, #0
 8002a00:	601a      	str	r2, [r3, #0]
 8002a02:	605a      	str	r2, [r3, #4]
 8002a04:	609a      	str	r2, [r3, #8]
 8002a06:	60da      	str	r2, [r3, #12]
 8002a08:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	613b      	str	r3, [r7, #16]
 8002a0e:	4b3e      	ldr	r3, [pc, #248]	; (8002b08 <MX_GPIO_Init+0x114>)
 8002a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a12:	4a3d      	ldr	r2, [pc, #244]	; (8002b08 <MX_GPIO_Init+0x114>)
 8002a14:	f043 0301 	orr.w	r3, r3, #1
 8002a18:	6313      	str	r3, [r2, #48]	; 0x30
 8002a1a:	4b3b      	ldr	r3, [pc, #236]	; (8002b08 <MX_GPIO_Init+0x114>)
 8002a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a1e:	f003 0301 	and.w	r3, r3, #1
 8002a22:	613b      	str	r3, [r7, #16]
 8002a24:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a26:	2300      	movs	r3, #0
 8002a28:	60fb      	str	r3, [r7, #12]
 8002a2a:	4b37      	ldr	r3, [pc, #220]	; (8002b08 <MX_GPIO_Init+0x114>)
 8002a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a2e:	4a36      	ldr	r2, [pc, #216]	; (8002b08 <MX_GPIO_Init+0x114>)
 8002a30:	f043 0304 	orr.w	r3, r3, #4
 8002a34:	6313      	str	r3, [r2, #48]	; 0x30
 8002a36:	4b34      	ldr	r3, [pc, #208]	; (8002b08 <MX_GPIO_Init+0x114>)
 8002a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a3a:	f003 0304 	and.w	r3, r3, #4
 8002a3e:	60fb      	str	r3, [r7, #12]
 8002a40:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002a42:	2300      	movs	r3, #0
 8002a44:	60bb      	str	r3, [r7, #8]
 8002a46:	4b30      	ldr	r3, [pc, #192]	; (8002b08 <MX_GPIO_Init+0x114>)
 8002a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a4a:	4a2f      	ldr	r2, [pc, #188]	; (8002b08 <MX_GPIO_Init+0x114>)
 8002a4c:	f043 0310 	orr.w	r3, r3, #16
 8002a50:	6313      	str	r3, [r2, #48]	; 0x30
 8002a52:	4b2d      	ldr	r3, [pc, #180]	; (8002b08 <MX_GPIO_Init+0x114>)
 8002a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a56:	f003 0310 	and.w	r3, r3, #16
 8002a5a:	60bb      	str	r3, [r7, #8]
 8002a5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a5e:	2300      	movs	r3, #0
 8002a60:	607b      	str	r3, [r7, #4]
 8002a62:	4b29      	ldr	r3, [pc, #164]	; (8002b08 <MX_GPIO_Init+0x114>)
 8002a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a66:	4a28      	ldr	r2, [pc, #160]	; (8002b08 <MX_GPIO_Init+0x114>)
 8002a68:	f043 0302 	orr.w	r3, r3, #2
 8002a6c:	6313      	str	r3, [r2, #48]	; 0x30
 8002a6e:	4b26      	ldr	r3, [pc, #152]	; (8002b08 <MX_GPIO_Init+0x114>)
 8002a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a72:	f003 0302 	and.w	r3, r3, #2
 8002a76:	607b      	str	r3, [r7, #4]
 8002a78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	603b      	str	r3, [r7, #0]
 8002a7e:	4b22      	ldr	r3, [pc, #136]	; (8002b08 <MX_GPIO_Init+0x114>)
 8002a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a82:	4a21      	ldr	r2, [pc, #132]	; (8002b08 <MX_GPIO_Init+0x114>)
 8002a84:	f043 0308 	orr.w	r3, r3, #8
 8002a88:	6313      	str	r3, [r2, #48]	; 0x30
 8002a8a:	4b1f      	ldr	r3, [pc, #124]	; (8002b08 <MX_GPIO_Init+0x114>)
 8002a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a8e:	f003 0308 	and.w	r3, r3, #8
 8002a92:	603b      	str	r3, [r7, #0]
 8002a94:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TLE8888_CS_GPIO_Port, TLE8888_CS_Pin, GPIO_PIN_RESET);
 8002a96:	2200      	movs	r2, #0
 8002a98:	2110      	movs	r1, #16
 8002a9a:	481c      	ldr	r0, [pc, #112]	; (8002b0c <MX_GPIO_Init+0x118>)
 8002a9c:	f001 ffde 	bl	8004a5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, Led_Green_Pin|Led_Orange_Pin|Led_Red_Pin|Led_Blue_Pin
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	f24f 01ff 	movw	r1, #61695	; 0xf0ff
 8002aa6:	481a      	ldr	r0, [pc, #104]	; (8002b10 <MX_GPIO_Init+0x11c>)
 8002aa8:	f001 ffd8 	bl	8004a5c <HAL_GPIO_WritePin>
                          |Injection_Cyl1_Pin|Injection_Cyl2_Pin|Injection_Cyl3_Pin|Injection_Cyl4_Pin
                          |Ignition_Cyl4_Pin|Ignition_Cyl2_Pin|Ignition_Cyl3_Pin|Ignition_Cyl1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : TLE8888_CS_Pin */
  GPIO_InitStruct.Pin = TLE8888_CS_Pin;
 8002aac:	2310      	movs	r3, #16
 8002aae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TLE8888_CS_GPIO_Port, &GPIO_InitStruct);
 8002abc:	f107 0314 	add.w	r3, r7, #20
 8002ac0:	4619      	mov	r1, r3
 8002ac2:	4812      	ldr	r0, [pc, #72]	; (8002b0c <MX_GPIO_Init+0x118>)
 8002ac4:	f001 fe18 	bl	80046f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ECU_Term15_Pin ECU_Ignition_Pin */
  GPIO_InitStruct.Pin = ECU_Term15_Pin|ECU_Ignition_Pin;
 8002ac8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002acc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002ad2:	2302      	movs	r3, #2
 8002ad4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002ad6:	f107 0314 	add.w	r3, r7, #20
 8002ada:	4619      	mov	r1, r3
 8002adc:	480d      	ldr	r0, [pc, #52]	; (8002b14 <MX_GPIO_Init+0x120>)
 8002ade:	f001 fe0b 	bl	80046f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Led_Green_Pin Led_Orange_Pin Led_Red_Pin Led_Blue_Pin
                           Injection_Cyl1_Pin Injection_Cyl2_Pin Injection_Cyl3_Pin Injection_Cyl4_Pin
                           Ignition_Cyl4_Pin Ignition_Cyl2_Pin Ignition_Cyl3_Pin Ignition_Cyl1_Pin */
  GPIO_InitStruct.Pin = Led_Green_Pin|Led_Orange_Pin|Led_Red_Pin|Led_Blue_Pin
 8002ae2:	f24f 03ff 	movw	r3, #61695	; 0xf0ff
 8002ae6:	617b      	str	r3, [r7, #20]
                          |Injection_Cyl1_Pin|Injection_Cyl2_Pin|Injection_Cyl3_Pin|Injection_Cyl4_Pin
                          |Ignition_Cyl4_Pin|Ignition_Cyl2_Pin|Ignition_Cyl3_Pin|Ignition_Cyl1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002aec:	2302      	movs	r3, #2
 8002aee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002af0:	2300      	movs	r3, #0
 8002af2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002af4:	f107 0314 	add.w	r3, r7, #20
 8002af8:	4619      	mov	r1, r3
 8002afa:	4805      	ldr	r0, [pc, #20]	; (8002b10 <MX_GPIO_Init+0x11c>)
 8002afc:	f001 fdfc 	bl	80046f8 <HAL_GPIO_Init>

}
 8002b00:	bf00      	nop
 8002b02:	3728      	adds	r7, #40	; 0x28
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd80      	pop	{r7, pc}
 8002b08:	40023800 	.word	0x40023800
 8002b0c:	40020800 	.word	0x40020800
 8002b10:	40020c00 	.word	0x40020c00
 8002b14:	40021000 	.word	0x40021000

08002b18 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b082      	sub	sp, #8
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]

	ECU_MainLoop(); // Call ECU Main Loop after conversion finished
 8002b20:	f7fe fb74 	bl	800120c <ECU_MainLoop>
}
 8002b24:	bf00      	nop
 8002b26:	3708      	adds	r7, #8
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd80      	pop	{r7, pc}

08002b2c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8002b2c:	b480      	push	{r7}
 8002b2e:	b083      	sub	sp, #12
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
	if (htim == &htim3){
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	4a05      	ldr	r2, [pc, #20]	; (8002b4c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d000      	beq.n	8002b3e <HAL_TIM_PeriodElapsedCallback+0x12>
			//HAL_GPIO_TogglePin(GPIOD,Led_Green_Pin);
			//ECU_MainLoop(); // Call ECU Main Loop (10ms at the moment)
			// TODO add some diagnostic loop if necessary (100ms for example)
		}
	}else{
		__NOP();
 8002b3c:	bf00      	nop
	}
}
 8002b3e:	bf00      	nop
 8002b40:	370c      	adds	r7, #12
 8002b42:	46bd      	mov	sp, r7
 8002b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b48:	4770      	bx	lr
 8002b4a:	bf00      	nop
 8002b4c:	20000384 	.word	0x20000384

08002b50 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim){
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b082      	sub	sp, #8
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]



	if(htim == Injection_InjectorTIM.Handler){
 8002b58:	4b4c      	ldr	r3, [pc, #304]	; (8002c8c <HAL_TIM_PWM_PulseFinishedCallback+0x13c>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	687a      	ldr	r2, [r7, #4]
 8002b5e:	429a      	cmp	r2, r3
 8002b60:	d119      	bne.n	8002b96 <HAL_TIM_PWM_PulseFinishedCallback+0x46>
		// Injector OPM TIM Channels
		if(htim->Channel == Injection_InjectorTIM.ActiveChannel){
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	7f1a      	ldrb	r2, [r3, #28]
 8002b66:	4b49      	ldr	r3, [pc, #292]	; (8002c8c <HAL_TIM_PWM_PulseFinishedCallback+0x13c>)
 8002b68:	795b      	ldrb	r3, [r3, #5]
 8002b6a:	429a      	cmp	r2, r3
 8002b6c:	d113      	bne.n	8002b96 <HAL_TIM_PWM_PulseFinishedCallback+0x46>
			HAL_GPIO_WritePin(GPIOD,Injection_Cyl1_Pin,GPIO_PIN_RESET);
 8002b6e:	2200      	movs	r2, #0
 8002b70:	2101      	movs	r1, #1
 8002b72:	4847      	ldr	r0, [pc, #284]	; (8002c90 <HAL_TIM_PWM_PulseFinishedCallback+0x140>)
 8002b74:	f001 ff72 	bl	8004a5c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD,Injection_Cyl2_Pin,GPIO_PIN_RESET);
 8002b78:	2200      	movs	r2, #0
 8002b7a:	2102      	movs	r1, #2
 8002b7c:	4844      	ldr	r0, [pc, #272]	; (8002c90 <HAL_TIM_PWM_PulseFinishedCallback+0x140>)
 8002b7e:	f001 ff6d 	bl	8004a5c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD,Injection_Cyl3_Pin,GPIO_PIN_RESET);
 8002b82:	2200      	movs	r2, #0
 8002b84:	2104      	movs	r1, #4
 8002b86:	4842      	ldr	r0, [pc, #264]	; (8002c90 <HAL_TIM_PWM_PulseFinishedCallback+0x140>)
 8002b88:	f001 ff68 	bl	8004a5c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD,Injection_Cyl4_Pin,GPIO_PIN_RESET);
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	2108      	movs	r1, #8
 8002b90:	483f      	ldr	r0, [pc, #252]	; (8002c90 <HAL_TIM_PWM_PulseFinishedCallback+0x140>)
 8002b92:	f001 ff63 	bl	8004a5c <HAL_GPIO_WritePin>
		}
	}

	if(htim == Ignition_FireTIM.Handler){
 8002b96:	4b3f      	ldr	r3, [pc, #252]	; (8002c94 <HAL_TIM_PWM_PulseFinishedCallback+0x144>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	687a      	ldr	r2, [r7, #4]
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	d135      	bne.n	8002c0c <HAL_TIM_PWM_PulseFinishedCallback+0xbc>
		// Ignition OPM TIM Channels
		if(htim->Channel == Ignition_FireTIM.ActiveChannel){
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	7f1a      	ldrb	r2, [r3, #28]
 8002ba4:	4b3b      	ldr	r3, [pc, #236]	; (8002c94 <HAL_TIM_PWM_PulseFinishedCallback+0x144>)
 8002ba6:	795b      	ldrb	r3, [r3, #5]
 8002ba8:	429a      	cmp	r2, r3
 8002baa:	d12f      	bne.n	8002c0c <HAL_TIM_PWM_PulseFinishedCallback+0xbc>
			// Cylinder 1
			if (Ignition_Cyl1.firestate == TRIG_FIRE){
 8002bac:	4b3a      	ldr	r3, [pc, #232]	; (8002c98 <HAL_TIM_PWM_PulseFinishedCallback+0x148>)
 8002bae:	795b      	ldrb	r3, [r3, #5]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d107      	bne.n	8002bc4 <HAL_TIM_PWM_PulseFinishedCallback+0x74>
				HAL_GPIO_WritePin(GPIOD,Ignition_Cyl1_Pin,GPIO_PIN_RESET);
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	2180      	movs	r1, #128	; 0x80
 8002bb8:	4835      	ldr	r0, [pc, #212]	; (8002c90 <HAL_TIM_PWM_PulseFinishedCallback+0x140>)
 8002bba:	f001 ff4f 	bl	8004a5c <HAL_GPIO_WritePin>
				Ignition_FireStarted(&Ignition_Cyl1);
 8002bbe:	4836      	ldr	r0, [pc, #216]	; (8002c98 <HAL_TIM_PWM_PulseFinishedCallback+0x148>)
 8002bc0:	f7ff f990 	bl	8001ee4 <Ignition_FireStarted>
			}
			// Cylinder 2
			if (Ignition_Cyl2.firestate == TRIG_FIRE){
 8002bc4:	4b35      	ldr	r3, [pc, #212]	; (8002c9c <HAL_TIM_PWM_PulseFinishedCallback+0x14c>)
 8002bc6:	795b      	ldrb	r3, [r3, #5]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d107      	bne.n	8002bdc <HAL_TIM_PWM_PulseFinishedCallback+0x8c>
				HAL_GPIO_WritePin(GPIOD,Ignition_Cyl2_Pin,GPIO_PIN_RESET);
 8002bcc:	2200      	movs	r2, #0
 8002bce:	2120      	movs	r1, #32
 8002bd0:	482f      	ldr	r0, [pc, #188]	; (8002c90 <HAL_TIM_PWM_PulseFinishedCallback+0x140>)
 8002bd2:	f001 ff43 	bl	8004a5c <HAL_GPIO_WritePin>
				Ignition_FireStarted(&Ignition_Cyl2);}
 8002bd6:	4831      	ldr	r0, [pc, #196]	; (8002c9c <HAL_TIM_PWM_PulseFinishedCallback+0x14c>)
 8002bd8:	f7ff f984 	bl	8001ee4 <Ignition_FireStarted>
			// Cylinder 3
			if (Ignition_Cyl3.firestate == TRIG_FIRE){
 8002bdc:	4b30      	ldr	r3, [pc, #192]	; (8002ca0 <HAL_TIM_PWM_PulseFinishedCallback+0x150>)
 8002bde:	795b      	ldrb	r3, [r3, #5]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d107      	bne.n	8002bf4 <HAL_TIM_PWM_PulseFinishedCallback+0xa4>
				HAL_GPIO_WritePin(GPIOD,Ignition_Cyl3_Pin,GPIO_PIN_RESET);
 8002be4:	2200      	movs	r2, #0
 8002be6:	2140      	movs	r1, #64	; 0x40
 8002be8:	4829      	ldr	r0, [pc, #164]	; (8002c90 <HAL_TIM_PWM_PulseFinishedCallback+0x140>)
 8002bea:	f001 ff37 	bl	8004a5c <HAL_GPIO_WritePin>
				Ignition_FireStarted(&Ignition_Cyl3);
 8002bee:	482c      	ldr	r0, [pc, #176]	; (8002ca0 <HAL_TIM_PWM_PulseFinishedCallback+0x150>)
 8002bf0:	f7ff f978 	bl	8001ee4 <Ignition_FireStarted>
			}
			// Cylinder 4
			if (Ignition_Cyl4.firestate == TRIG_FIRE){
 8002bf4:	4b2b      	ldr	r3, [pc, #172]	; (8002ca4 <HAL_TIM_PWM_PulseFinishedCallback+0x154>)
 8002bf6:	795b      	ldrb	r3, [r3, #5]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d107      	bne.n	8002c0c <HAL_TIM_PWM_PulseFinishedCallback+0xbc>
				HAL_GPIO_WritePin(GPIOD,Ignition_Cyl4_Pin,GPIO_PIN_RESET);
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	2110      	movs	r1, #16
 8002c00:	4823      	ldr	r0, [pc, #140]	; (8002c90 <HAL_TIM_PWM_PulseFinishedCallback+0x140>)
 8002c02:	f001 ff2b 	bl	8004a5c <HAL_GPIO_WritePin>
				Ignition_FireStarted(&Ignition_Cyl4);}
 8002c06:	4827      	ldr	r0, [pc, #156]	; (8002ca4 <HAL_TIM_PWM_PulseFinishedCallback+0x154>)
 8002c08:	f7ff f96c 	bl	8001ee4 <Ignition_FireStarted>
		}
	}

	if(htim == Ignition_DwellTIM.Handler){
 8002c0c:	4b26      	ldr	r3, [pc, #152]	; (8002ca8 <HAL_TIM_PWM_PulseFinishedCallback+0x158>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	687a      	ldr	r2, [r7, #4]
 8002c12:	429a      	cmp	r2, r3
 8002c14:	d135      	bne.n	8002c82 <HAL_TIM_PWM_PulseFinishedCallback+0x132>
		// Dwell OPM TIM Channels
		if(htim->Channel == Ignition_DwellTIM.ActiveChannel){
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	7f1a      	ldrb	r2, [r3, #28]
 8002c1a:	4b23      	ldr	r3, [pc, #140]	; (8002ca8 <HAL_TIM_PWM_PulseFinishedCallback+0x158>)
 8002c1c:	795b      	ldrb	r3, [r3, #5]
 8002c1e:	429a      	cmp	r2, r3
 8002c20:	d12f      	bne.n	8002c82 <HAL_TIM_PWM_PulseFinishedCallback+0x132>
			// Cylinder 1
			if (Ignition_Cyl1.dwellstate == TRIG_DWELL){
 8002c22:	4b1d      	ldr	r3, [pc, #116]	; (8002c98 <HAL_TIM_PWM_PulseFinishedCallback+0x148>)
 8002c24:	791b      	ldrb	r3, [r3, #4]
 8002c26:	2b01      	cmp	r3, #1
 8002c28:	d107      	bne.n	8002c3a <HAL_TIM_PWM_PulseFinishedCallback+0xea>
				HAL_GPIO_WritePin(GPIOD,Ignition_Cyl1_Pin,GPIO_PIN_SET);
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	2180      	movs	r1, #128	; 0x80
 8002c2e:	4818      	ldr	r0, [pc, #96]	; (8002c90 <HAL_TIM_PWM_PulseFinishedCallback+0x140>)
 8002c30:	f001 ff14 	bl	8004a5c <HAL_GPIO_WritePin>
				Ignition_DwellStarted(&Ignition_Cyl1);
 8002c34:	4818      	ldr	r0, [pc, #96]	; (8002c98 <HAL_TIM_PWM_PulseFinishedCallback+0x148>)
 8002c36:	f7ff f98f 	bl	8001f58 <Ignition_DwellStarted>
			}
			// Cylinder 2
			if (Ignition_Cyl2.dwellstate == TRIG_DWELL){
 8002c3a:	4b18      	ldr	r3, [pc, #96]	; (8002c9c <HAL_TIM_PWM_PulseFinishedCallback+0x14c>)
 8002c3c:	791b      	ldrb	r3, [r3, #4]
 8002c3e:	2b01      	cmp	r3, #1
 8002c40:	d107      	bne.n	8002c52 <HAL_TIM_PWM_PulseFinishedCallback+0x102>
				HAL_GPIO_WritePin(GPIOD,Ignition_Cyl2_Pin,GPIO_PIN_SET);
 8002c42:	2201      	movs	r2, #1
 8002c44:	2120      	movs	r1, #32
 8002c46:	4812      	ldr	r0, [pc, #72]	; (8002c90 <HAL_TIM_PWM_PulseFinishedCallback+0x140>)
 8002c48:	f001 ff08 	bl	8004a5c <HAL_GPIO_WritePin>
				Ignition_DwellStarted(&Ignition_Cyl2);}
 8002c4c:	4813      	ldr	r0, [pc, #76]	; (8002c9c <HAL_TIM_PWM_PulseFinishedCallback+0x14c>)
 8002c4e:	f7ff f983 	bl	8001f58 <Ignition_DwellStarted>
			// Cylinder 3
			if (Ignition_Cyl3.dwellstate == TRIG_DWELL){
 8002c52:	4b13      	ldr	r3, [pc, #76]	; (8002ca0 <HAL_TIM_PWM_PulseFinishedCallback+0x150>)
 8002c54:	791b      	ldrb	r3, [r3, #4]
 8002c56:	2b01      	cmp	r3, #1
 8002c58:	d107      	bne.n	8002c6a <HAL_TIM_PWM_PulseFinishedCallback+0x11a>
				HAL_GPIO_WritePin(GPIOD,Ignition_Cyl3_Pin,GPIO_PIN_SET);
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	2140      	movs	r1, #64	; 0x40
 8002c5e:	480c      	ldr	r0, [pc, #48]	; (8002c90 <HAL_TIM_PWM_PulseFinishedCallback+0x140>)
 8002c60:	f001 fefc 	bl	8004a5c <HAL_GPIO_WritePin>
				Ignition_DwellStarted(&Ignition_Cyl3);
 8002c64:	480e      	ldr	r0, [pc, #56]	; (8002ca0 <HAL_TIM_PWM_PulseFinishedCallback+0x150>)
 8002c66:	f7ff f977 	bl	8001f58 <Ignition_DwellStarted>
			}
			// Cylinder 4
			if (Ignition_Cyl4.dwellstate == TRIG_DWELL){
 8002c6a:	4b0e      	ldr	r3, [pc, #56]	; (8002ca4 <HAL_TIM_PWM_PulseFinishedCallback+0x154>)
 8002c6c:	791b      	ldrb	r3, [r3, #4]
 8002c6e:	2b01      	cmp	r3, #1
 8002c70:	d107      	bne.n	8002c82 <HAL_TIM_PWM_PulseFinishedCallback+0x132>
				HAL_GPIO_WritePin(GPIOD,Ignition_Cyl4_Pin,GPIO_PIN_SET);
 8002c72:	2201      	movs	r2, #1
 8002c74:	2110      	movs	r1, #16
 8002c76:	4806      	ldr	r0, [pc, #24]	; (8002c90 <HAL_TIM_PWM_PulseFinishedCallback+0x140>)
 8002c78:	f001 fef0 	bl	8004a5c <HAL_GPIO_WritePin>
				Ignition_DwellStarted(&Ignition_Cyl4);}
 8002c7c:	4809      	ldr	r0, [pc, #36]	; (8002ca4 <HAL_TIM_PWM_PulseFinishedCallback+0x154>)
 8002c7e:	f7ff f96b 	bl	8001f58 <Ignition_DwellStarted>
		}
	}
}
 8002c82:	bf00      	nop
 8002c84:	3708      	adds	r7, #8
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}
 8002c8a:	bf00      	nop
 8002c8c:	200002f4 	.word	0x200002f4
 8002c90:	40020c00 	.word	0x40020c00
 8002c94:	2000026c 	.word	0x2000026c
 8002c98:	200001dc 	.word	0x200001dc
 8002c9c:	2000020c 	.word	0x2000020c
 8002ca0:	2000023c 	.word	0x2000023c
 8002ca4:	2000027c 	.word	0x2000027c
 8002ca8:	20000274 	.word	0x20000274

08002cac <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback( TIM_HandleTypeDef *htim ){
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b082      	sub	sp, #8
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]

	if(htim == Cam_HallTIM.Handler){
 8002cb4:	4b1b      	ldr	r3, [pc, #108]	; (8002d24 <HAL_TIM_IC_CaptureCallback+0x78>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	687a      	ldr	r2, [r7, #4]
 8002cba:	429a      	cmp	r2, r3
 8002cbc:	d107      	bne.n	8002cce <HAL_TIM_IC_CaptureCallback+0x22>
		if(htim->Channel == Cam_HallTIM.ActiveChannel){
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	7f1a      	ldrb	r2, [r3, #28]
 8002cc2:	4b18      	ldr	r3, [pc, #96]	; (8002d24 <HAL_TIM_IC_CaptureCallback+0x78>)
 8002cc4:	795b      	ldrb	r3, [r3, #5]
 8002cc6:	429a      	cmp	r2, r3
 8002cc8:	d101      	bne.n	8002cce <HAL_TIM_IC_CaptureCallback+0x22>
			Cam_HalGeberDriver(); // TODO implement real driver, for now its only deteting a singl rising signal.
 8002cca:	f7fe f91b 	bl	8000f04 <Cam_HalGeberDriver>
		}
	}

	if(htim == Crank_HallTIM.Handler){
 8002cce:	4b16      	ldr	r3, [pc, #88]	; (8002d28 <HAL_TIM_IC_CaptureCallback+0x7c>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	687a      	ldr	r2, [r7, #4]
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	d120      	bne.n	8002d1a <HAL_TIM_IC_CaptureCallback+0x6e>
		if(htim->Channel == Crank_HallTIM.ActiveChannel){
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	7f1a      	ldrb	r2, [r3, #28]
 8002cdc:	4b12      	ldr	r3, [pc, #72]	; (8002d28 <HAL_TIM_IC_CaptureCallback+0x7c>)
 8002cde:	795b      	ldrb	r3, [r3, #5]
 8002ce0:	429a      	cmp	r2, r3
 8002ce2:	d11b      	bne.n	8002d1c <HAL_TIM_IC_CaptureCallback+0x70>
			// Ignite before halgeber driver, if the tooth is fine. There is huge delay (30-40us) in high speed9:
			Crank_AngleCalc(); // roughly 10us computation time
 8002ce4:	f7fe fa52 	bl	800118c <Crank_AngleCalc>
			if (Crank_TeethCount == 1)
 8002ce8:	4b10      	ldr	r3, [pc, #64]	; (8002d2c <HAL_TIM_IC_CaptureCallback+0x80>)
 8002cea:	781b      	ldrb	r3, [r3, #0]
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	d101      	bne.n	8002cf4 <HAL_TIM_IC_CaptureCallback+0x48>
				Cam_CrankPositionSync();
 8002cf0:	f7fe f8f8 	bl	8000ee4 <Cam_CrankPositionSync>

			Injection_DriverLoop(Cam_HalfCycle,Crank_TeethCount);
 8002cf4:	4b0e      	ldr	r3, [pc, #56]	; (8002d30 <HAL_TIM_IC_CaptureCallback+0x84>)
 8002cf6:	681a      	ldr	r2, [r3, #0]
 8002cf8:	4b0c      	ldr	r3, [pc, #48]	; (8002d2c <HAL_TIM_IC_CaptureCallback+0x80>)
 8002cfa:	781b      	ldrb	r3, [r3, #0]
 8002cfc:	4619      	mov	r1, r3
 8002cfe:	4610      	mov	r0, r2
 8002d00:	f7ff fa28 	bl	8002154 <Injection_DriverLoop>

			Ignition_DriverLoop(Cam_HalfCycle,Crank_TeethCount);
 8002d04:	4b0a      	ldr	r3, [pc, #40]	; (8002d30 <HAL_TIM_IC_CaptureCallback+0x84>)
 8002d06:	681a      	ldr	r2, [r3, #0]
 8002d08:	4b08      	ldr	r3, [pc, #32]	; (8002d2c <HAL_TIM_IC_CaptureCallback+0x80>)
 8002d0a:	781b      	ldrb	r3, [r3, #0]
 8002d0c:	4619      	mov	r1, r3
 8002d0e:	4610      	mov	r0, r2
 8002d10:	f7ff f842 	bl	8001d98 <Ignition_DriverLoop>

			// Call the Hall driver at the end. Since it takes most time and it can be called at the end, since the tooth counter is implemented at the beginning,
			// therefore it is not critical for performance.
			Crank_HalGeberDriver();
 8002d14:	f7fe f934 	bl	8000f80 <Crank_HalGeberDriver>
		}
	}else{
		__NOP();
	}
}
 8002d18:	e000      	b.n	8002d1c <HAL_TIM_IC_CaptureCallback+0x70>
		__NOP();
 8002d1a:	bf00      	nop
}
 8002d1c:	bf00      	nop
 8002d1e:	3708      	adds	r7, #8
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}
 8002d24:	20000100 	.word	0x20000100
 8002d28:	20000108 	.word	0x20000108
 8002d2c:	200000c4 	.word	0x200000c4
 8002d30:	200000a8 	.word	0x200000a8

08002d34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002d34:	b480      	push	{r7}
 8002d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002d38:	bf00      	nop
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d40:	4770      	bx	lr
	...

08002d44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b083      	sub	sp, #12
 8002d48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	607b      	str	r3, [r7, #4]
 8002d4e:	4b10      	ldr	r3, [pc, #64]	; (8002d90 <HAL_MspInit+0x4c>)
 8002d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d52:	4a0f      	ldr	r2, [pc, #60]	; (8002d90 <HAL_MspInit+0x4c>)
 8002d54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d58:	6453      	str	r3, [r2, #68]	; 0x44
 8002d5a:	4b0d      	ldr	r3, [pc, #52]	; (8002d90 <HAL_MspInit+0x4c>)
 8002d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d62:	607b      	str	r3, [r7, #4]
 8002d64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d66:	2300      	movs	r3, #0
 8002d68:	603b      	str	r3, [r7, #0]
 8002d6a:	4b09      	ldr	r3, [pc, #36]	; (8002d90 <HAL_MspInit+0x4c>)
 8002d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d6e:	4a08      	ldr	r2, [pc, #32]	; (8002d90 <HAL_MspInit+0x4c>)
 8002d70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d74:	6413      	str	r3, [r2, #64]	; 0x40
 8002d76:	4b06      	ldr	r3, [pc, #24]	; (8002d90 <HAL_MspInit+0x4c>)
 8002d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d7e:	603b      	str	r3, [r7, #0]
 8002d80:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d82:	bf00      	nop
 8002d84:	370c      	adds	r7, #12
 8002d86:	46bd      	mov	sp, r7
 8002d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8c:	4770      	bx	lr
 8002d8e:	bf00      	nop
 8002d90:	40023800 	.word	0x40023800

08002d94 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b08a      	sub	sp, #40	; 0x28
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d9c:	f107 0314 	add.w	r3, r7, #20
 8002da0:	2200      	movs	r2, #0
 8002da2:	601a      	str	r2, [r3, #0]
 8002da4:	605a      	str	r2, [r3, #4]
 8002da6:	609a      	str	r2, [r3, #8]
 8002da8:	60da      	str	r2, [r3, #12]
 8002daa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a2f      	ldr	r2, [pc, #188]	; (8002e70 <HAL_ADC_MspInit+0xdc>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d157      	bne.n	8002e66 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002db6:	2300      	movs	r3, #0
 8002db8:	613b      	str	r3, [r7, #16]
 8002dba:	4b2e      	ldr	r3, [pc, #184]	; (8002e74 <HAL_ADC_MspInit+0xe0>)
 8002dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dbe:	4a2d      	ldr	r2, [pc, #180]	; (8002e74 <HAL_ADC_MspInit+0xe0>)
 8002dc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dc4:	6453      	str	r3, [r2, #68]	; 0x44
 8002dc6:	4b2b      	ldr	r3, [pc, #172]	; (8002e74 <HAL_ADC_MspInit+0xe0>)
 8002dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dce:	613b      	str	r3, [r7, #16]
 8002dd0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	60fb      	str	r3, [r7, #12]
 8002dd6:	4b27      	ldr	r3, [pc, #156]	; (8002e74 <HAL_ADC_MspInit+0xe0>)
 8002dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dda:	4a26      	ldr	r2, [pc, #152]	; (8002e74 <HAL_ADC_MspInit+0xe0>)
 8002ddc:	f043 0301 	orr.w	r3, r3, #1
 8002de0:	6313      	str	r3, [r2, #48]	; 0x30
 8002de2:	4b24      	ldr	r3, [pc, #144]	; (8002e74 <HAL_ADC_MspInit+0xe0>)
 8002de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002de6:	f003 0301 	and.w	r3, r3, #1
 8002dea:	60fb      	str	r3, [r7, #12]
 8002dec:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8002dee:	2306      	movs	r3, #6
 8002df0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002df2:	2303      	movs	r3, #3
 8002df4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002df6:	2300      	movs	r3, #0
 8002df8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dfa:	f107 0314 	add.w	r3, r7, #20
 8002dfe:	4619      	mov	r1, r3
 8002e00:	481d      	ldr	r0, [pc, #116]	; (8002e78 <HAL_ADC_MspInit+0xe4>)
 8002e02:	f001 fc79 	bl	80046f8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002e06:	4b1d      	ldr	r3, [pc, #116]	; (8002e7c <HAL_ADC_MspInit+0xe8>)
 8002e08:	4a1d      	ldr	r2, [pc, #116]	; (8002e80 <HAL_ADC_MspInit+0xec>)
 8002e0a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002e0c:	4b1b      	ldr	r3, [pc, #108]	; (8002e7c <HAL_ADC_MspInit+0xe8>)
 8002e0e:	2200      	movs	r2, #0
 8002e10:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002e12:	4b1a      	ldr	r3, [pc, #104]	; (8002e7c <HAL_ADC_MspInit+0xe8>)
 8002e14:	2200      	movs	r2, #0
 8002e16:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e18:	4b18      	ldr	r3, [pc, #96]	; (8002e7c <HAL_ADC_MspInit+0xe8>)
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002e1e:	4b17      	ldr	r3, [pc, #92]	; (8002e7c <HAL_ADC_MspInit+0xe8>)
 8002e20:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e24:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002e26:	4b15      	ldr	r3, [pc, #84]	; (8002e7c <HAL_ADC_MspInit+0xe8>)
 8002e28:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002e2c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002e2e:	4b13      	ldr	r3, [pc, #76]	; (8002e7c <HAL_ADC_MspInit+0xe8>)
 8002e30:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002e34:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002e36:	4b11      	ldr	r3, [pc, #68]	; (8002e7c <HAL_ADC_MspInit+0xe8>)
 8002e38:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e3c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002e3e:	4b0f      	ldr	r3, [pc, #60]	; (8002e7c <HAL_ADC_MspInit+0xe8>)
 8002e40:	2200      	movs	r2, #0
 8002e42:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002e44:	4b0d      	ldr	r3, [pc, #52]	; (8002e7c <HAL_ADC_MspInit+0xe8>)
 8002e46:	2200      	movs	r2, #0
 8002e48:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002e4a:	480c      	ldr	r0, [pc, #48]	; (8002e7c <HAL_ADC_MspInit+0xe8>)
 8002e4c:	f001 f8c4 	bl	8003fd8 <HAL_DMA_Init>
 8002e50:	4603      	mov	r3, r0
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d001      	beq.n	8002e5a <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8002e56:	f7ff ff6d 	bl	8002d34 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	4a07      	ldr	r2, [pc, #28]	; (8002e7c <HAL_ADC_MspInit+0xe8>)
 8002e5e:	639a      	str	r2, [r3, #56]	; 0x38
 8002e60:	4a06      	ldr	r2, [pc, #24]	; (8002e7c <HAL_ADC_MspInit+0xe8>)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002e66:	bf00      	nop
 8002e68:	3728      	adds	r7, #40	; 0x28
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}
 8002e6e:	bf00      	nop
 8002e70:	40012000 	.word	0x40012000
 8002e74:	40023800 	.word	0x40023800
 8002e78:	40020000 	.word	0x40020000
 8002e7c:	2000044c 	.word	0x2000044c
 8002e80:	40026410 	.word	0x40026410

08002e84 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b08a      	sub	sp, #40	; 0x28
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e8c:	f107 0314 	add.w	r3, r7, #20
 8002e90:	2200      	movs	r2, #0
 8002e92:	601a      	str	r2, [r3, #0]
 8002e94:	605a      	str	r2, [r3, #4]
 8002e96:	609a      	str	r2, [r3, #8]
 8002e98:	60da      	str	r2, [r3, #12]
 8002e9a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a19      	ldr	r2, [pc, #100]	; (8002f08 <HAL_SPI_MspInit+0x84>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d12b      	bne.n	8002efe <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	613b      	str	r3, [r7, #16]
 8002eaa:	4b18      	ldr	r3, [pc, #96]	; (8002f0c <HAL_SPI_MspInit+0x88>)
 8002eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eae:	4a17      	ldr	r2, [pc, #92]	; (8002f0c <HAL_SPI_MspInit+0x88>)
 8002eb0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002eb4:	6453      	str	r3, [r2, #68]	; 0x44
 8002eb6:	4b15      	ldr	r3, [pc, #84]	; (8002f0c <HAL_SPI_MspInit+0x88>)
 8002eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ebe:	613b      	str	r3, [r7, #16]
 8002ec0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	60fb      	str	r3, [r7, #12]
 8002ec6:	4b11      	ldr	r3, [pc, #68]	; (8002f0c <HAL_SPI_MspInit+0x88>)
 8002ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eca:	4a10      	ldr	r2, [pc, #64]	; (8002f0c <HAL_SPI_MspInit+0x88>)
 8002ecc:	f043 0301 	orr.w	r3, r3, #1
 8002ed0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ed2:	4b0e      	ldr	r3, [pc, #56]	; (8002f0c <HAL_SPI_MspInit+0x88>)
 8002ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed6:	f003 0301 	and.w	r3, r3, #1
 8002eda:	60fb      	str	r3, [r7, #12]
 8002edc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002ede:	23e0      	movs	r3, #224	; 0xe0
 8002ee0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ee2:	2302      	movs	r3, #2
 8002ee4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002eea:	2303      	movs	r3, #3
 8002eec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002eee:	2305      	movs	r3, #5
 8002ef0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ef2:	f107 0314 	add.w	r3, r7, #20
 8002ef6:	4619      	mov	r1, r3
 8002ef8:	4805      	ldr	r0, [pc, #20]	; (8002f10 <HAL_SPI_MspInit+0x8c>)
 8002efa:	f001 fbfd 	bl	80046f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002efe:	bf00      	nop
 8002f00:	3728      	adds	r7, #40	; 0x28
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}
 8002f06:	bf00      	nop
 8002f08:	40013000 	.word	0x40013000
 8002f0c:	40023800 	.word	0x40023800
 8002f10:	40020000 	.word	0x40020000

08002f14 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b08e      	sub	sp, #56	; 0x38
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f20:	2200      	movs	r2, #0
 8002f22:	601a      	str	r2, [r3, #0]
 8002f24:	605a      	str	r2, [r3, #4]
 8002f26:	609a      	str	r2, [r3, #8]
 8002f28:	60da      	str	r2, [r3, #12]
 8002f2a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM3)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a51      	ldr	r2, [pc, #324]	; (8003078 <HAL_TIM_Base_MspInit+0x164>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d10e      	bne.n	8002f54 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002f36:	2300      	movs	r3, #0
 8002f38:	623b      	str	r3, [r7, #32]
 8002f3a:	4b50      	ldr	r3, [pc, #320]	; (800307c <HAL_TIM_Base_MspInit+0x168>)
 8002f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f3e:	4a4f      	ldr	r2, [pc, #316]	; (800307c <HAL_TIM_Base_MspInit+0x168>)
 8002f40:	f043 0302 	orr.w	r3, r3, #2
 8002f44:	6413      	str	r3, [r2, #64]	; 0x40
 8002f46:	4b4d      	ldr	r3, [pc, #308]	; (800307c <HAL_TIM_Base_MspInit+0x168>)
 8002f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f4a:	f003 0302 	and.w	r3, r3, #2
 8002f4e:	623b      	str	r3, [r7, #32]
 8002f50:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8002f52:	e08c      	b.n	800306e <HAL_TIM_Base_MspInit+0x15a>
  else if(htim_base->Instance==TIM10)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a49      	ldr	r2, [pc, #292]	; (8003080 <HAL_TIM_Base_MspInit+0x16c>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d10e      	bne.n	8002f7c <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8002f5e:	2300      	movs	r3, #0
 8002f60:	61fb      	str	r3, [r7, #28]
 8002f62:	4b46      	ldr	r3, [pc, #280]	; (800307c <HAL_TIM_Base_MspInit+0x168>)
 8002f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f66:	4a45      	ldr	r2, [pc, #276]	; (800307c <HAL_TIM_Base_MspInit+0x168>)
 8002f68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f6c:	6453      	str	r3, [r2, #68]	; 0x44
 8002f6e:	4b43      	ldr	r3, [pc, #268]	; (800307c <HAL_TIM_Base_MspInit+0x168>)
 8002f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f76:	61fb      	str	r3, [r7, #28]
 8002f78:	69fb      	ldr	r3, [r7, #28]
}
 8002f7a:	e078      	b.n	800306e <HAL_TIM_Base_MspInit+0x15a>
  else if(htim_base->Instance==TIM11)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a40      	ldr	r2, [pc, #256]	; (8003084 <HAL_TIM_Base_MspInit+0x170>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d12d      	bne.n	8002fe2 <HAL_TIM_Base_MspInit+0xce>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8002f86:	2300      	movs	r3, #0
 8002f88:	61bb      	str	r3, [r7, #24]
 8002f8a:	4b3c      	ldr	r3, [pc, #240]	; (800307c <HAL_TIM_Base_MspInit+0x168>)
 8002f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f8e:	4a3b      	ldr	r2, [pc, #236]	; (800307c <HAL_TIM_Base_MspInit+0x168>)
 8002f90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f94:	6453      	str	r3, [r2, #68]	; 0x44
 8002f96:	4b39      	ldr	r3, [pc, #228]	; (800307c <HAL_TIM_Base_MspInit+0x168>)
 8002f98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f9a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f9e:	61bb      	str	r3, [r7, #24]
 8002fa0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	617b      	str	r3, [r7, #20]
 8002fa6:	4b35      	ldr	r3, [pc, #212]	; (800307c <HAL_TIM_Base_MspInit+0x168>)
 8002fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002faa:	4a34      	ldr	r2, [pc, #208]	; (800307c <HAL_TIM_Base_MspInit+0x168>)
 8002fac:	f043 0302 	orr.w	r3, r3, #2
 8002fb0:	6313      	str	r3, [r2, #48]	; 0x30
 8002fb2:	4b32      	ldr	r3, [pc, #200]	; (800307c <HAL_TIM_Base_MspInit+0x168>)
 8002fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fb6:	f003 0302 	and.w	r3, r3, #2
 8002fba:	617b      	str	r3, [r7, #20]
 8002fbc:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002fbe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002fc2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fc4:	2302      	movs	r3, #2
 8002fc6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fcc:	2300      	movs	r3, #0
 8002fce:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8002fd0:	2303      	movs	r3, #3
 8002fd2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002fd8:	4619      	mov	r1, r3
 8002fda:	482b      	ldr	r0, [pc, #172]	; (8003088 <HAL_TIM_Base_MspInit+0x174>)
 8002fdc:	f001 fb8c 	bl	80046f8 <HAL_GPIO_Init>
}
 8002fe0:	e045      	b.n	800306e <HAL_TIM_Base_MspInit+0x15a>
  else if(htim_base->Instance==TIM12)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a29      	ldr	r2, [pc, #164]	; (800308c <HAL_TIM_Base_MspInit+0x178>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d12d      	bne.n	8003048 <HAL_TIM_Base_MspInit+0x134>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8002fec:	2300      	movs	r3, #0
 8002fee:	613b      	str	r3, [r7, #16]
 8002ff0:	4b22      	ldr	r3, [pc, #136]	; (800307c <HAL_TIM_Base_MspInit+0x168>)
 8002ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff4:	4a21      	ldr	r2, [pc, #132]	; (800307c <HAL_TIM_Base_MspInit+0x168>)
 8002ff6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ffa:	6413      	str	r3, [r2, #64]	; 0x40
 8002ffc:	4b1f      	ldr	r3, [pc, #124]	; (800307c <HAL_TIM_Base_MspInit+0x168>)
 8002ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003000:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003004:	613b      	str	r3, [r7, #16]
 8003006:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003008:	2300      	movs	r3, #0
 800300a:	60fb      	str	r3, [r7, #12]
 800300c:	4b1b      	ldr	r3, [pc, #108]	; (800307c <HAL_TIM_Base_MspInit+0x168>)
 800300e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003010:	4a1a      	ldr	r2, [pc, #104]	; (800307c <HAL_TIM_Base_MspInit+0x168>)
 8003012:	f043 0302 	orr.w	r3, r3, #2
 8003016:	6313      	str	r3, [r2, #48]	; 0x30
 8003018:	4b18      	ldr	r3, [pc, #96]	; (800307c <HAL_TIM_Base_MspInit+0x168>)
 800301a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800301c:	f003 0302 	and.w	r3, r3, #2
 8003020:	60fb      	str	r3, [r7, #12]
 8003022:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8003024:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8003028:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800302a:	2302      	movs	r3, #2
 800302c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800302e:	2300      	movs	r3, #0
 8003030:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003032:	2300      	movs	r3, #0
 8003034:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8003036:	2309      	movs	r3, #9
 8003038:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800303a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800303e:	4619      	mov	r1, r3
 8003040:	4811      	ldr	r0, [pc, #68]	; (8003088 <HAL_TIM_Base_MspInit+0x174>)
 8003042:	f001 fb59 	bl	80046f8 <HAL_GPIO_Init>
}
 8003046:	e012      	b.n	800306e <HAL_TIM_Base_MspInit+0x15a>
  else if(htim_base->Instance==TIM14)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a10      	ldr	r2, [pc, #64]	; (8003090 <HAL_TIM_Base_MspInit+0x17c>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d10d      	bne.n	800306e <HAL_TIM_Base_MspInit+0x15a>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8003052:	2300      	movs	r3, #0
 8003054:	60bb      	str	r3, [r7, #8]
 8003056:	4b09      	ldr	r3, [pc, #36]	; (800307c <HAL_TIM_Base_MspInit+0x168>)
 8003058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800305a:	4a08      	ldr	r2, [pc, #32]	; (800307c <HAL_TIM_Base_MspInit+0x168>)
 800305c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003060:	6413      	str	r3, [r2, #64]	; 0x40
 8003062:	4b06      	ldr	r3, [pc, #24]	; (800307c <HAL_TIM_Base_MspInit+0x168>)
 8003064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003066:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800306a:	60bb      	str	r3, [r7, #8]
 800306c:	68bb      	ldr	r3, [r7, #8]
}
 800306e:	bf00      	nop
 8003070:	3738      	adds	r7, #56	; 0x38
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}
 8003076:	bf00      	nop
 8003078:	40000400 	.word	0x40000400
 800307c:	40023800 	.word	0x40023800
 8003080:	40014400 	.word	0x40014400
 8003084:	40014800 	.word	0x40014800
 8003088:	40020400 	.word	0x40020400
 800308c:	40001800 	.word	0x40001800
 8003090:	40002000 	.word	0x40002000

08003094 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003094:	b480      	push	{r7}
 8003096:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003098:	bf00      	nop
 800309a:	46bd      	mov	sp, r7
 800309c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a0:	4770      	bx	lr

080030a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80030a2:	b480      	push	{r7}
 80030a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80030a6:	e7fe      	b.n	80030a6 <HardFault_Handler+0x4>

080030a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80030a8:	b480      	push	{r7}
 80030aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80030ac:	e7fe      	b.n	80030ac <MemManage_Handler+0x4>

080030ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80030ae:	b480      	push	{r7}
 80030b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80030b2:	e7fe      	b.n	80030b2 <BusFault_Handler+0x4>

080030b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80030b4:	b480      	push	{r7}
 80030b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80030b8:	e7fe      	b.n	80030b8 <UsageFault_Handler+0x4>

080030ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80030ba:	b480      	push	{r7}
 80030bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80030be:	bf00      	nop
 80030c0:	46bd      	mov	sp, r7
 80030c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c6:	4770      	bx	lr

080030c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80030c8:	b480      	push	{r7}
 80030ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80030cc:	bf00      	nop
 80030ce:	46bd      	mov	sp, r7
 80030d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d4:	4770      	bx	lr

080030d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80030d6:	b480      	push	{r7}
 80030d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80030da:	bf00      	nop
 80030dc:	46bd      	mov	sp, r7
 80030de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e2:	4770      	bx	lr

080030e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80030e8:	f000 f8e4 	bl	80032b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80030ec:	bf00      	nop
 80030ee:	bd80      	pop	{r7, pc}

080030f0 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80030f4:	4802      	ldr	r0, [pc, #8]	; (8003100 <ADC_IRQHandler+0x10>)
 80030f6:	f000 f962 	bl	80033be <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80030fa:	bf00      	nop
 80030fc:	bd80      	pop	{r7, pc}
 80030fe:	bf00      	nop
 8003100:	200003c4 	.word	0x200003c4

08003104 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8003108:	4802      	ldr	r0, [pc, #8]	; (8003114 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800310a:	f002 fe99 	bl	8005e40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800310e:	bf00      	nop
 8003110:	bd80      	pop	{r7, pc}
 8003112:	bf00      	nop
 8003114:	20000344 	.word	0x20000344

08003118 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 800311c:	4802      	ldr	r0, [pc, #8]	; (8003128 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 800311e:	f002 fe8f 	bl	8005e40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8003122:	bf00      	nop
 8003124:	bd80      	pop	{r7, pc}
 8003126:	bf00      	nop
 8003128:	2000040c 	.word	0x2000040c

0800312c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003130:	4802      	ldr	r0, [pc, #8]	; (800313c <TIM3_IRQHandler+0x10>)
 8003132:	f002 fe85 	bl	8005e40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003136:	bf00      	nop
 8003138:	bd80      	pop	{r7, pc}
 800313a:	bf00      	nop
 800313c:	20000384 	.word	0x20000384

08003140 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8003144:	4802      	ldr	r0, [pc, #8]	; (8003150 <SPI1_IRQHandler+0x10>)
 8003146:	f002 fa91 	bl	800566c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800314a:	bf00      	nop
 800314c:	bd80      	pop	{r7, pc}
 800314e:	bf00      	nop
 8003150:	200004ac 	.word	0x200004ac

08003154 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim12);
 8003158:	4802      	ldr	r0, [pc, #8]	; (8003164 <TIM8_BRK_TIM12_IRQHandler+0x10>)
 800315a:	f002 fe71 	bl	8005e40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 800315e:	bf00      	nop
 8003160:	bd80      	pop	{r7, pc}
 8003162:	bf00      	nop
 8003164:	20000544 	.word	0x20000544

08003168 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 800316c:	4802      	ldr	r0, [pc, #8]	; (8003178 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 800316e:	f002 fe67 	bl	8005e40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8003172:	bf00      	nop
 8003174:	bd80      	pop	{r7, pc}
 8003176:	bf00      	nop
 8003178:	20000504 	.word	0x20000504

0800317c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003180:	4802      	ldr	r0, [pc, #8]	; (800318c <DMA2_Stream0_IRQHandler+0x10>)
 8003182:	f001 f851 	bl	8004228 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003186:	bf00      	nop
 8003188:	bd80      	pop	{r7, pc}
 800318a:	bf00      	nop
 800318c:	2000044c 	.word	0x2000044c

08003190 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003190:	b480      	push	{r7}
 8003192:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003194:	4b08      	ldr	r3, [pc, #32]	; (80031b8 <SystemInit+0x28>)
 8003196:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800319a:	4a07      	ldr	r2, [pc, #28]	; (80031b8 <SystemInit+0x28>)
 800319c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80031a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80031a4:	4b04      	ldr	r3, [pc, #16]	; (80031b8 <SystemInit+0x28>)
 80031a6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80031aa:	609a      	str	r2, [r3, #8]
#endif
}
 80031ac:	bf00      	nop
 80031ae:	46bd      	mov	sp, r7
 80031b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b4:	4770      	bx	lr
 80031b6:	bf00      	nop
 80031b8:	e000ed00 	.word	0xe000ed00

080031bc <Reset_Handler>:
 80031bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80031f4 <LoopFillZerobss+0x14>
 80031c0:	2100      	movs	r1, #0
 80031c2:	e003      	b.n	80031cc <LoopCopyDataInit>

080031c4 <CopyDataInit>:
 80031c4:	4b0c      	ldr	r3, [pc, #48]	; (80031f8 <LoopFillZerobss+0x18>)
 80031c6:	585b      	ldr	r3, [r3, r1]
 80031c8:	5043      	str	r3, [r0, r1]
 80031ca:	3104      	adds	r1, #4

080031cc <LoopCopyDataInit>:
 80031cc:	480b      	ldr	r0, [pc, #44]	; (80031fc <LoopFillZerobss+0x1c>)
 80031ce:	4b0c      	ldr	r3, [pc, #48]	; (8003200 <LoopFillZerobss+0x20>)
 80031d0:	1842      	adds	r2, r0, r1
 80031d2:	429a      	cmp	r2, r3
 80031d4:	d3f6      	bcc.n	80031c4 <CopyDataInit>
 80031d6:	4a0b      	ldr	r2, [pc, #44]	; (8003204 <LoopFillZerobss+0x24>)
 80031d8:	e002      	b.n	80031e0 <LoopFillZerobss>

080031da <FillZerobss>:
 80031da:	2300      	movs	r3, #0
 80031dc:	f842 3b04 	str.w	r3, [r2], #4

080031e0 <LoopFillZerobss>:
 80031e0:	4b09      	ldr	r3, [pc, #36]	; (8003208 <LoopFillZerobss+0x28>)
 80031e2:	429a      	cmp	r2, r3
 80031e4:	d3f9      	bcc.n	80031da <FillZerobss>
 80031e6:	f7ff ffd3 	bl	8003190 <SystemInit>
 80031ea:	f003 fecd 	bl	8006f88 <__libc_init_array>
 80031ee:	f7ff f82b 	bl	8002248 <main>
 80031f2:	4770      	bx	lr
 80031f4:	20020000 	.word	0x20020000
 80031f8:	0800703c 	.word	0x0800703c
 80031fc:	20000000 	.word	0x20000000
 8003200:	2000008c 	.word	0x2000008c
 8003204:	2000008c 	.word	0x2000008c
 8003208:	20000590 	.word	0x20000590

0800320c <CAN1_RX0_IRQHandler>:
 800320c:	e7fe      	b.n	800320c <CAN1_RX0_IRQHandler>
	...

08003210 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003214:	4b0e      	ldr	r3, [pc, #56]	; (8003250 <HAL_Init+0x40>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a0d      	ldr	r2, [pc, #52]	; (8003250 <HAL_Init+0x40>)
 800321a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800321e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003220:	4b0b      	ldr	r3, [pc, #44]	; (8003250 <HAL_Init+0x40>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a0a      	ldr	r2, [pc, #40]	; (8003250 <HAL_Init+0x40>)
 8003226:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800322a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800322c:	4b08      	ldr	r3, [pc, #32]	; (8003250 <HAL_Init+0x40>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a07      	ldr	r2, [pc, #28]	; (8003250 <HAL_Init+0x40>)
 8003232:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003236:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003238:	2003      	movs	r0, #3
 800323a:	f000 fe8b 	bl	8003f54 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800323e:	2000      	movs	r0, #0
 8003240:	f000 f808 	bl	8003254 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003244:	f7ff fd7e 	bl	8002d44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003248:	2300      	movs	r3, #0
}
 800324a:	4618      	mov	r0, r3
 800324c:	bd80      	pop	{r7, pc}
 800324e:	bf00      	nop
 8003250:	40023c00 	.word	0x40023c00

08003254 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b082      	sub	sp, #8
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800325c:	4b12      	ldr	r3, [pc, #72]	; (80032a8 <HAL_InitTick+0x54>)
 800325e:	681a      	ldr	r2, [r3, #0]
 8003260:	4b12      	ldr	r3, [pc, #72]	; (80032ac <HAL_InitTick+0x58>)
 8003262:	781b      	ldrb	r3, [r3, #0]
 8003264:	4619      	mov	r1, r3
 8003266:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800326a:	fbb3 f3f1 	udiv	r3, r3, r1
 800326e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003272:	4618      	mov	r0, r3
 8003274:	f000 fea3 	bl	8003fbe <HAL_SYSTICK_Config>
 8003278:	4603      	mov	r3, r0
 800327a:	2b00      	cmp	r3, #0
 800327c:	d001      	beq.n	8003282 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	e00e      	b.n	80032a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2b0f      	cmp	r3, #15
 8003286:	d80a      	bhi.n	800329e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003288:	2200      	movs	r2, #0
 800328a:	6879      	ldr	r1, [r7, #4]
 800328c:	f04f 30ff 	mov.w	r0, #4294967295
 8003290:	f000 fe6b 	bl	8003f6a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003294:	4a06      	ldr	r2, [pc, #24]	; (80032b0 <HAL_InitTick+0x5c>)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800329a:	2300      	movs	r3, #0
 800329c:	e000      	b.n	80032a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800329e:	2301      	movs	r3, #1
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	3708      	adds	r7, #8
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bd80      	pop	{r7, pc}
 80032a8:	20000080 	.word	0x20000080
 80032ac:	20000088 	.word	0x20000088
 80032b0:	20000084 	.word	0x20000084

080032b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80032b4:	b480      	push	{r7}
 80032b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80032b8:	4b06      	ldr	r3, [pc, #24]	; (80032d4 <HAL_IncTick+0x20>)
 80032ba:	781b      	ldrb	r3, [r3, #0]
 80032bc:	461a      	mov	r2, r3
 80032be:	4b06      	ldr	r3, [pc, #24]	; (80032d8 <HAL_IncTick+0x24>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4413      	add	r3, r2
 80032c4:	4a04      	ldr	r2, [pc, #16]	; (80032d8 <HAL_IncTick+0x24>)
 80032c6:	6013      	str	r3, [r2, #0]
}
 80032c8:	bf00      	nop
 80032ca:	46bd      	mov	sp, r7
 80032cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d0:	4770      	bx	lr
 80032d2:	bf00      	nop
 80032d4:	20000088 	.word	0x20000088
 80032d8:	2000058c 	.word	0x2000058c

080032dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80032dc:	b480      	push	{r7}
 80032de:	af00      	add	r7, sp, #0
  return uwTick;
 80032e0:	4b03      	ldr	r3, [pc, #12]	; (80032f0 <HAL_GetTick+0x14>)
 80032e2:	681b      	ldr	r3, [r3, #0]
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	46bd      	mov	sp, r7
 80032e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ec:	4770      	bx	lr
 80032ee:	bf00      	nop
 80032f0:	2000058c 	.word	0x2000058c

080032f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b084      	sub	sp, #16
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80032fc:	f7ff ffee 	bl	80032dc <HAL_GetTick>
 8003300:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	f1b3 3fff 	cmp.w	r3, #4294967295
 800330c:	d005      	beq.n	800331a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800330e:	4b09      	ldr	r3, [pc, #36]	; (8003334 <HAL_Delay+0x40>)
 8003310:	781b      	ldrb	r3, [r3, #0]
 8003312:	461a      	mov	r2, r3
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	4413      	add	r3, r2
 8003318:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800331a:	bf00      	nop
 800331c:	f7ff ffde 	bl	80032dc <HAL_GetTick>
 8003320:	4602      	mov	r2, r0
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	1ad3      	subs	r3, r2, r3
 8003326:	68fa      	ldr	r2, [r7, #12]
 8003328:	429a      	cmp	r2, r3
 800332a:	d8f7      	bhi.n	800331c <HAL_Delay+0x28>
  {
  }
}
 800332c:	bf00      	nop
 800332e:	3710      	adds	r7, #16
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}
 8003334:	20000088 	.word	0x20000088

08003338 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b084      	sub	sp, #16
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003340:	2300      	movs	r3, #0
 8003342:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d101      	bne.n	800334e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	e033      	b.n	80033b6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003352:	2b00      	cmp	r3, #0
 8003354:	d109      	bne.n	800336a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003356:	6878      	ldr	r0, [r7, #4]
 8003358:	f7ff fd1c 	bl	8002d94 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2200      	movs	r2, #0
 8003360:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2200      	movs	r2, #0
 8003366:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800336e:	f003 0310 	and.w	r3, r3, #16
 8003372:	2b00      	cmp	r3, #0
 8003374:	d118      	bne.n	80033a8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800337a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800337e:	f023 0302 	bic.w	r3, r3, #2
 8003382:	f043 0202 	orr.w	r2, r3, #2
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	f000 fb8a 	bl	8003aa4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2200      	movs	r2, #0
 8003394:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800339a:	f023 0303 	bic.w	r3, r3, #3
 800339e:	f043 0201 	orr.w	r2, r3, #1
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	641a      	str	r2, [r3, #64]	; 0x40
 80033a6:	e001      	b.n	80033ac <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80033a8:	2301      	movs	r3, #1
 80033aa:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2200      	movs	r2, #0
 80033b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80033b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	3710      	adds	r7, #16
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}

080033be <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80033be:	b580      	push	{r7, lr}
 80033c0:	b084      	sub	sp, #16
 80033c2:	af00      	add	r7, sp, #0
 80033c4:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80033c6:	2300      	movs	r3, #0
 80033c8:	60fb      	str	r3, [r7, #12]
 80033ca:	2300      	movs	r3, #0
 80033cc:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f003 0302 	and.w	r3, r3, #2
 80033d8:	2b02      	cmp	r3, #2
 80033da:	bf0c      	ite	eq
 80033dc:	2301      	moveq	r3, #1
 80033de:	2300      	movne	r3, #0
 80033e0:	b2db      	uxtb	r3, r3
 80033e2:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	f003 0320 	and.w	r3, r3, #32
 80033ee:	2b20      	cmp	r3, #32
 80033f0:	bf0c      	ite	eq
 80033f2:	2301      	moveq	r3, #1
 80033f4:	2300      	movne	r3, #0
 80033f6:	b2db      	uxtb	r3, r3
 80033f8:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d049      	beq.n	8003494 <HAL_ADC_IRQHandler+0xd6>
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d046      	beq.n	8003494 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800340a:	f003 0310 	and.w	r3, r3, #16
 800340e:	2b00      	cmp	r3, #0
 8003410:	d105      	bne.n	800341e <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003416:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003428:	2b00      	cmp	r3, #0
 800342a:	d12b      	bne.n	8003484 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003430:	2b00      	cmp	r3, #0
 8003432:	d127      	bne.n	8003484 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800343a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800343e:	2b00      	cmp	r3, #0
 8003440:	d006      	beq.n	8003450 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800344c:	2b00      	cmp	r3, #0
 800344e:	d119      	bne.n	8003484 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	685a      	ldr	r2, [r3, #4]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f022 0220 	bic.w	r2, r2, #32
 800345e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003464:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003470:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003474:	2b00      	cmp	r3, #0
 8003476:	d105      	bne.n	8003484 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800347c:	f043 0201 	orr.w	r2, r3, #1
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003484:	6878      	ldr	r0, [r7, #4]
 8003486:	f7ff fb47 	bl	8002b18 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f06f 0212 	mvn.w	r2, #18
 8003492:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 0304 	and.w	r3, r3, #4
 800349e:	2b04      	cmp	r3, #4
 80034a0:	bf0c      	ite	eq
 80034a2:	2301      	moveq	r3, #1
 80034a4:	2300      	movne	r3, #0
 80034a6:	b2db      	uxtb	r3, r3
 80034a8:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034b4:	2b80      	cmp	r3, #128	; 0x80
 80034b6:	bf0c      	ite	eq
 80034b8:	2301      	moveq	r3, #1
 80034ba:	2300      	movne	r3, #0
 80034bc:	b2db      	uxtb	r3, r3
 80034be:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d057      	beq.n	8003576 <HAL_ADC_IRQHandler+0x1b8>
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d054      	beq.n	8003576 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d0:	f003 0310 	and.w	r3, r3, #16
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d105      	bne.n	80034e4 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034dc:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d139      	bne.n	8003566 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034f8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d006      	beq.n	800350e <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800350a:	2b00      	cmp	r3, #0
 800350c:	d12b      	bne.n	8003566 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8003518:	2b00      	cmp	r3, #0
 800351a:	d124      	bne.n	8003566 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	689b      	ldr	r3, [r3, #8]
 8003522:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003526:	2b00      	cmp	r3, #0
 8003528:	d11d      	bne.n	8003566 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800352e:	2b00      	cmp	r3, #0
 8003530:	d119      	bne.n	8003566 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	685a      	ldr	r2, [r3, #4]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003540:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003546:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003552:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003556:	2b00      	cmp	r3, #0
 8003558:	d105      	bne.n	8003566 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800355e:	f043 0201 	orr.w	r2, r3, #1
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003566:	6878      	ldr	r0, [r7, #4]
 8003568:	f000 fc1a 	bl	8003da0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f06f 020c 	mvn.w	r2, #12
 8003574:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f003 0301 	and.w	r3, r3, #1
 8003580:	2b01      	cmp	r3, #1
 8003582:	bf0c      	ite	eq
 8003584:	2301      	moveq	r3, #1
 8003586:	2300      	movne	r3, #0
 8003588:	b2db      	uxtb	r3, r3
 800358a:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003596:	2b40      	cmp	r3, #64	; 0x40
 8003598:	bf0c      	ite	eq
 800359a:	2301      	moveq	r3, #1
 800359c:	2300      	movne	r3, #0
 800359e:	b2db      	uxtb	r3, r3
 80035a0:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d017      	beq.n	80035d8 <HAL_ADC_IRQHandler+0x21a>
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d014      	beq.n	80035d8 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f003 0301 	and.w	r3, r3, #1
 80035b8:	2b01      	cmp	r3, #1
 80035ba:	d10d      	bne.n	80035d8 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80035c8:	6878      	ldr	r0, [r7, #4]
 80035ca:	f000 f935 	bl	8003838 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f06f 0201 	mvn.w	r2, #1
 80035d6:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f003 0320 	and.w	r3, r3, #32
 80035e2:	2b20      	cmp	r3, #32
 80035e4:	bf0c      	ite	eq
 80035e6:	2301      	moveq	r3, #1
 80035e8:	2300      	movne	r3, #0
 80035ea:	b2db      	uxtb	r3, r3
 80035ec:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80035f8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80035fc:	bf0c      	ite	eq
 80035fe:	2301      	moveq	r3, #1
 8003600:	2300      	movne	r3, #0
 8003602:	b2db      	uxtb	r3, r3
 8003604:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d015      	beq.n	8003638 <HAL_ADC_IRQHandler+0x27a>
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d012      	beq.n	8003638 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003616:	f043 0202 	orr.w	r2, r3, #2
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f06f 0220 	mvn.w	r2, #32
 8003626:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003628:	6878      	ldr	r0, [r7, #4]
 800362a:	f000 f90f 	bl	800384c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f06f 0220 	mvn.w	r2, #32
 8003636:	601a      	str	r2, [r3, #0]
  }
}
 8003638:	bf00      	nop
 800363a:	3710      	adds	r7, #16
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}

08003640 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b086      	sub	sp, #24
 8003644:	af00      	add	r7, sp, #0
 8003646:	60f8      	str	r0, [r7, #12]
 8003648:	60b9      	str	r1, [r7, #8]
 800364a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800364c:	2300      	movs	r3, #0
 800364e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003656:	2b01      	cmp	r3, #1
 8003658:	d101      	bne.n	800365e <HAL_ADC_Start_DMA+0x1e>
 800365a:	2302      	movs	r3, #2
 800365c:	e0cc      	b.n	80037f8 <HAL_ADC_Start_DMA+0x1b8>
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	2201      	movs	r2, #1
 8003662:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	689b      	ldr	r3, [r3, #8]
 800366c:	f003 0301 	and.w	r3, r3, #1
 8003670:	2b01      	cmp	r3, #1
 8003672:	d018      	beq.n	80036a6 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	689a      	ldr	r2, [r3, #8]
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f042 0201 	orr.w	r2, r2, #1
 8003682:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003684:	4b5e      	ldr	r3, [pc, #376]	; (8003800 <HAL_ADC_Start_DMA+0x1c0>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a5e      	ldr	r2, [pc, #376]	; (8003804 <HAL_ADC_Start_DMA+0x1c4>)
 800368a:	fba2 2303 	umull	r2, r3, r2, r3
 800368e:	0c9a      	lsrs	r2, r3, #18
 8003690:	4613      	mov	r3, r2
 8003692:	005b      	lsls	r3, r3, #1
 8003694:	4413      	add	r3, r2
 8003696:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003698:	e002      	b.n	80036a0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	3b01      	subs	r3, #1
 800369e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d1f9      	bne.n	800369a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	f003 0301 	and.w	r3, r3, #1
 80036b0:	2b01      	cmp	r3, #1
 80036b2:	f040 80a0 	bne.w	80037f6 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ba:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80036be:	f023 0301 	bic.w	r3, r3, #1
 80036c2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d007      	beq.n	80036e8 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036dc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80036e0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80036f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036f4:	d106      	bne.n	8003704 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036fa:	f023 0206 	bic.w	r2, r3, #6
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	645a      	str	r2, [r3, #68]	; 0x44
 8003702:	e002      	b.n	800370a <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2200      	movs	r2, #0
 8003708:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	2200      	movs	r2, #0
 800370e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003712:	4b3d      	ldr	r3, [pc, #244]	; (8003808 <HAL_ADC_Start_DMA+0x1c8>)
 8003714:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800371a:	4a3c      	ldr	r2, [pc, #240]	; (800380c <HAL_ADC_Start_DMA+0x1cc>)
 800371c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003722:	4a3b      	ldr	r2, [pc, #236]	; (8003810 <HAL_ADC_Start_DMA+0x1d0>)
 8003724:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800372a:	4a3a      	ldr	r2, [pc, #232]	; (8003814 <HAL_ADC_Start_DMA+0x1d4>)
 800372c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003736:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	685a      	ldr	r2, [r3, #4]
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003746:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	689a      	ldr	r2, [r3, #8]
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003756:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	334c      	adds	r3, #76	; 0x4c
 8003762:	4619      	mov	r1, r3
 8003764:	68ba      	ldr	r2, [r7, #8]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	f000 fce4 	bl	8004134 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800376c:	697b      	ldr	r3, [r7, #20]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	f003 031f 	and.w	r3, r3, #31
 8003774:	2b00      	cmp	r3, #0
 8003776:	d12a      	bne.n	80037ce <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a26      	ldr	r2, [pc, #152]	; (8003818 <HAL_ADC_Start_DMA+0x1d8>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d015      	beq.n	80037ae <HAL_ADC_Start_DMA+0x16e>
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a25      	ldr	r2, [pc, #148]	; (800381c <HAL_ADC_Start_DMA+0x1dc>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d105      	bne.n	8003798 <HAL_ADC_Start_DMA+0x158>
 800378c:	4b1e      	ldr	r3, [pc, #120]	; (8003808 <HAL_ADC_Start_DMA+0x1c8>)
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	f003 031f 	and.w	r3, r3, #31
 8003794:	2b00      	cmp	r3, #0
 8003796:	d00a      	beq.n	80037ae <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a20      	ldr	r2, [pc, #128]	; (8003820 <HAL_ADC_Start_DMA+0x1e0>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d129      	bne.n	80037f6 <HAL_ADC_Start_DMA+0x1b6>
 80037a2:	4b19      	ldr	r3, [pc, #100]	; (8003808 <HAL_ADC_Start_DMA+0x1c8>)
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	f003 031f 	and.w	r3, r3, #31
 80037aa:	2b0f      	cmp	r3, #15
 80037ac:	d823      	bhi.n	80037f6 <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	689b      	ldr	r3, [r3, #8]
 80037b4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d11c      	bne.n	80037f6 <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	689a      	ldr	r2, [r3, #8]
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80037ca:	609a      	str	r2, [r3, #8]
 80037cc:	e013      	b.n	80037f6 <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a11      	ldr	r2, [pc, #68]	; (8003818 <HAL_ADC_Start_DMA+0x1d8>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d10e      	bne.n	80037f6 <HAL_ADC_Start_DMA+0x1b6>
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	689b      	ldr	r3, [r3, #8]
 80037de:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d107      	bne.n	80037f6 <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	689a      	ldr	r2, [r3, #8]
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80037f4:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80037f6:	2300      	movs	r3, #0
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	3718      	adds	r7, #24
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bd80      	pop	{r7, pc}
 8003800:	20000080 	.word	0x20000080
 8003804:	431bde83 	.word	0x431bde83
 8003808:	40012300 	.word	0x40012300
 800380c:	08003c9d 	.word	0x08003c9d
 8003810:	08003d57 	.word	0x08003d57
 8003814:	08003d73 	.word	0x08003d73
 8003818:	40012000 	.word	0x40012000
 800381c:	40012100 	.word	0x40012100
 8003820:	40012200 	.word	0x40012200

08003824 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003824:	b480      	push	{r7}
 8003826:	b083      	sub	sp, #12
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800382c:	bf00      	nop
 800382e:	370c      	adds	r7, #12
 8003830:	46bd      	mov	sp, r7
 8003832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003836:	4770      	bx	lr

08003838 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8003838:	b480      	push	{r7}
 800383a:	b083      	sub	sp, #12
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8003840:	bf00      	nop
 8003842:	370c      	adds	r7, #12
 8003844:	46bd      	mov	sp, r7
 8003846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384a:	4770      	bx	lr

0800384c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800384c:	b480      	push	{r7}
 800384e:	b083      	sub	sp, #12
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003854:	bf00      	nop
 8003856:	370c      	adds	r7, #12
 8003858:	46bd      	mov	sp, r7
 800385a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385e:	4770      	bx	lr

08003860 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003860:	b480      	push	{r7}
 8003862:	b085      	sub	sp, #20
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
 8003868:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800386a:	2300      	movs	r3, #0
 800386c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003874:	2b01      	cmp	r3, #1
 8003876:	d101      	bne.n	800387c <HAL_ADC_ConfigChannel+0x1c>
 8003878:	2302      	movs	r3, #2
 800387a:	e105      	b.n	8003a88 <HAL_ADC_ConfigChannel+0x228>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2201      	movs	r2, #1
 8003880:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	2b09      	cmp	r3, #9
 800388a:	d925      	bls.n	80038d8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	68d9      	ldr	r1, [r3, #12]
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	b29b      	uxth	r3, r3
 8003898:	461a      	mov	r2, r3
 800389a:	4613      	mov	r3, r2
 800389c:	005b      	lsls	r3, r3, #1
 800389e:	4413      	add	r3, r2
 80038a0:	3b1e      	subs	r3, #30
 80038a2:	2207      	movs	r2, #7
 80038a4:	fa02 f303 	lsl.w	r3, r2, r3
 80038a8:	43da      	mvns	r2, r3
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	400a      	ands	r2, r1
 80038b0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	68d9      	ldr	r1, [r3, #12]
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	689a      	ldr	r2, [r3, #8]
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	b29b      	uxth	r3, r3
 80038c2:	4618      	mov	r0, r3
 80038c4:	4603      	mov	r3, r0
 80038c6:	005b      	lsls	r3, r3, #1
 80038c8:	4403      	add	r3, r0
 80038ca:	3b1e      	subs	r3, #30
 80038cc:	409a      	lsls	r2, r3
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	430a      	orrs	r2, r1
 80038d4:	60da      	str	r2, [r3, #12]
 80038d6:	e022      	b.n	800391e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	6919      	ldr	r1, [r3, #16]
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	b29b      	uxth	r3, r3
 80038e4:	461a      	mov	r2, r3
 80038e6:	4613      	mov	r3, r2
 80038e8:	005b      	lsls	r3, r3, #1
 80038ea:	4413      	add	r3, r2
 80038ec:	2207      	movs	r2, #7
 80038ee:	fa02 f303 	lsl.w	r3, r2, r3
 80038f2:	43da      	mvns	r2, r3
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	400a      	ands	r2, r1
 80038fa:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	6919      	ldr	r1, [r3, #16]
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	689a      	ldr	r2, [r3, #8]
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	b29b      	uxth	r3, r3
 800390c:	4618      	mov	r0, r3
 800390e:	4603      	mov	r3, r0
 8003910:	005b      	lsls	r3, r3, #1
 8003912:	4403      	add	r3, r0
 8003914:	409a      	lsls	r2, r3
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	430a      	orrs	r2, r1
 800391c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	2b06      	cmp	r3, #6
 8003924:	d824      	bhi.n	8003970 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	685a      	ldr	r2, [r3, #4]
 8003930:	4613      	mov	r3, r2
 8003932:	009b      	lsls	r3, r3, #2
 8003934:	4413      	add	r3, r2
 8003936:	3b05      	subs	r3, #5
 8003938:	221f      	movs	r2, #31
 800393a:	fa02 f303 	lsl.w	r3, r2, r3
 800393e:	43da      	mvns	r2, r3
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	400a      	ands	r2, r1
 8003946:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	b29b      	uxth	r3, r3
 8003954:	4618      	mov	r0, r3
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	685a      	ldr	r2, [r3, #4]
 800395a:	4613      	mov	r3, r2
 800395c:	009b      	lsls	r3, r3, #2
 800395e:	4413      	add	r3, r2
 8003960:	3b05      	subs	r3, #5
 8003962:	fa00 f203 	lsl.w	r2, r0, r3
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	430a      	orrs	r2, r1
 800396c:	635a      	str	r2, [r3, #52]	; 0x34
 800396e:	e04c      	b.n	8003a0a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	2b0c      	cmp	r3, #12
 8003976:	d824      	bhi.n	80039c2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	685a      	ldr	r2, [r3, #4]
 8003982:	4613      	mov	r3, r2
 8003984:	009b      	lsls	r3, r3, #2
 8003986:	4413      	add	r3, r2
 8003988:	3b23      	subs	r3, #35	; 0x23
 800398a:	221f      	movs	r2, #31
 800398c:	fa02 f303 	lsl.w	r3, r2, r3
 8003990:	43da      	mvns	r2, r3
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	400a      	ands	r2, r1
 8003998:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	b29b      	uxth	r3, r3
 80039a6:	4618      	mov	r0, r3
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	685a      	ldr	r2, [r3, #4]
 80039ac:	4613      	mov	r3, r2
 80039ae:	009b      	lsls	r3, r3, #2
 80039b0:	4413      	add	r3, r2
 80039b2:	3b23      	subs	r3, #35	; 0x23
 80039b4:	fa00 f203 	lsl.w	r2, r0, r3
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	430a      	orrs	r2, r1
 80039be:	631a      	str	r2, [r3, #48]	; 0x30
 80039c0:	e023      	b.n	8003a0a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	685a      	ldr	r2, [r3, #4]
 80039cc:	4613      	mov	r3, r2
 80039ce:	009b      	lsls	r3, r3, #2
 80039d0:	4413      	add	r3, r2
 80039d2:	3b41      	subs	r3, #65	; 0x41
 80039d4:	221f      	movs	r2, #31
 80039d6:	fa02 f303 	lsl.w	r3, r2, r3
 80039da:	43da      	mvns	r2, r3
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	400a      	ands	r2, r1
 80039e2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	b29b      	uxth	r3, r3
 80039f0:	4618      	mov	r0, r3
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	685a      	ldr	r2, [r3, #4]
 80039f6:	4613      	mov	r3, r2
 80039f8:	009b      	lsls	r3, r3, #2
 80039fa:	4413      	add	r3, r2
 80039fc:	3b41      	subs	r3, #65	; 0x41
 80039fe:	fa00 f203 	lsl.w	r2, r0, r3
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	430a      	orrs	r2, r1
 8003a08:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003a0a:	4b22      	ldr	r3, [pc, #136]	; (8003a94 <HAL_ADC_ConfigChannel+0x234>)
 8003a0c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a21      	ldr	r2, [pc, #132]	; (8003a98 <HAL_ADC_ConfigChannel+0x238>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d109      	bne.n	8003a2c <HAL_ADC_ConfigChannel+0x1cc>
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	2b12      	cmp	r3, #18
 8003a1e:	d105      	bne.n	8003a2c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a19      	ldr	r2, [pc, #100]	; (8003a98 <HAL_ADC_ConfigChannel+0x238>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d123      	bne.n	8003a7e <HAL_ADC_ConfigChannel+0x21e>
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	2b10      	cmp	r3, #16
 8003a3c:	d003      	beq.n	8003a46 <HAL_ADC_ConfigChannel+0x1e6>
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	2b11      	cmp	r3, #17
 8003a44:	d11b      	bne.n	8003a7e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	2b10      	cmp	r3, #16
 8003a58:	d111      	bne.n	8003a7e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003a5a:	4b10      	ldr	r3, [pc, #64]	; (8003a9c <HAL_ADC_ConfigChannel+0x23c>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a10      	ldr	r2, [pc, #64]	; (8003aa0 <HAL_ADC_ConfigChannel+0x240>)
 8003a60:	fba2 2303 	umull	r2, r3, r2, r3
 8003a64:	0c9a      	lsrs	r2, r3, #18
 8003a66:	4613      	mov	r3, r2
 8003a68:	009b      	lsls	r3, r3, #2
 8003a6a:	4413      	add	r3, r2
 8003a6c:	005b      	lsls	r3, r3, #1
 8003a6e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003a70:	e002      	b.n	8003a78 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	3b01      	subs	r3, #1
 8003a76:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d1f9      	bne.n	8003a72 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2200      	movs	r2, #0
 8003a82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003a86:	2300      	movs	r3, #0
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	3714      	adds	r7, #20
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a92:	4770      	bx	lr
 8003a94:	40012300 	.word	0x40012300
 8003a98:	40012000 	.word	0x40012000
 8003a9c:	20000080 	.word	0x20000080
 8003aa0:	431bde83 	.word	0x431bde83

08003aa4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b085      	sub	sp, #20
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003aac:	4b79      	ldr	r3, [pc, #484]	; (8003c94 <ADC_Init+0x1f0>)
 8003aae:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	685a      	ldr	r2, [r3, #4]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	431a      	orrs	r2, r3
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	685a      	ldr	r2, [r3, #4]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003ad8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	6859      	ldr	r1, [r3, #4]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	691b      	ldr	r3, [r3, #16]
 8003ae4:	021a      	lsls	r2, r3, #8
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	430a      	orrs	r2, r1
 8003aec:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	685a      	ldr	r2, [r3, #4]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003afc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	6859      	ldr	r1, [r3, #4]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	689a      	ldr	r2, [r3, #8]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	430a      	orrs	r2, r1
 8003b0e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	689a      	ldr	r2, [r3, #8]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b1e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	6899      	ldr	r1, [r3, #8]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	68da      	ldr	r2, [r3, #12]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	430a      	orrs	r2, r1
 8003b30:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b36:	4a58      	ldr	r2, [pc, #352]	; (8003c98 <ADC_Init+0x1f4>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d022      	beq.n	8003b82 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	689a      	ldr	r2, [r3, #8]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003b4a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	6899      	ldr	r1, [r3, #8]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	430a      	orrs	r2, r1
 8003b5c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	689a      	ldr	r2, [r3, #8]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003b6c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	6899      	ldr	r1, [r3, #8]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	430a      	orrs	r2, r1
 8003b7e:	609a      	str	r2, [r3, #8]
 8003b80:	e00f      	b.n	8003ba2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	689a      	ldr	r2, [r3, #8]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003b90:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	689a      	ldr	r2, [r3, #8]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003ba0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	689a      	ldr	r2, [r3, #8]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f022 0202 	bic.w	r2, r2, #2
 8003bb0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	6899      	ldr	r1, [r3, #8]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	7e1b      	ldrb	r3, [r3, #24]
 8003bbc:	005a      	lsls	r2, r3, #1
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	430a      	orrs	r2, r1
 8003bc4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d01b      	beq.n	8003c08 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	685a      	ldr	r2, [r3, #4]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003bde:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	685a      	ldr	r2, [r3, #4]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003bee:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	6859      	ldr	r1, [r3, #4]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bfa:	3b01      	subs	r3, #1
 8003bfc:	035a      	lsls	r2, r3, #13
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	430a      	orrs	r2, r1
 8003c04:	605a      	str	r2, [r3, #4]
 8003c06:	e007      	b.n	8003c18 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	685a      	ldr	r2, [r3, #4]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c16:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003c26:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	69db      	ldr	r3, [r3, #28]
 8003c32:	3b01      	subs	r3, #1
 8003c34:	051a      	lsls	r2, r3, #20
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	430a      	orrs	r2, r1
 8003c3c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	689a      	ldr	r2, [r3, #8]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003c4c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	6899      	ldr	r1, [r3, #8]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003c5a:	025a      	lsls	r2, r3, #9
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	430a      	orrs	r2, r1
 8003c62:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	689a      	ldr	r2, [r3, #8]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c72:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	6899      	ldr	r1, [r3, #8]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	695b      	ldr	r3, [r3, #20]
 8003c7e:	029a      	lsls	r2, r3, #10
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	430a      	orrs	r2, r1
 8003c86:	609a      	str	r2, [r3, #8]
}
 8003c88:	bf00      	nop
 8003c8a:	3714      	adds	r7, #20
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c92:	4770      	bx	lr
 8003c94:	40012300 	.word	0x40012300
 8003c98:	0f000001 	.word	0x0f000001

08003c9c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b084      	sub	sp, #16
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ca8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cae:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d13c      	bne.n	8003d30 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cba:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	689b      	ldr	r3, [r3, #8]
 8003cc8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d12b      	bne.n	8003d28 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d127      	bne.n	8003d28 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cde:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d006      	beq.n	8003cf4 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	689b      	ldr	r3, [r3, #8]
 8003cec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d119      	bne.n	8003d28 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	685a      	ldr	r2, [r3, #4]
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f022 0220 	bic.w	r2, r2, #32
 8003d02:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d08:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d14:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d105      	bne.n	8003d28 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d20:	f043 0201 	orr.w	r2, r3, #1
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003d28:	68f8      	ldr	r0, [r7, #12]
 8003d2a:	f7fe fef5 	bl	8002b18 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003d2e:	e00e      	b.n	8003d4e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d34:	f003 0310 	and.w	r3, r3, #16
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d003      	beq.n	8003d44 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003d3c:	68f8      	ldr	r0, [r7, #12]
 8003d3e:	f7ff fd85 	bl	800384c <HAL_ADC_ErrorCallback>
}
 8003d42:	e004      	b.n	8003d4e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	4798      	blx	r3
}
 8003d4e:	bf00      	nop
 8003d50:	3710      	adds	r7, #16
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}

08003d56 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003d56:	b580      	push	{r7, lr}
 8003d58:	b084      	sub	sp, #16
 8003d5a:	af00      	add	r7, sp, #0
 8003d5c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d62:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003d64:	68f8      	ldr	r0, [r7, #12]
 8003d66:	f7ff fd5d 	bl	8003824 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003d6a:	bf00      	nop
 8003d6c:	3710      	adds	r7, #16
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}

08003d72 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003d72:	b580      	push	{r7, lr}
 8003d74:	b084      	sub	sp, #16
 8003d76:	af00      	add	r7, sp, #0
 8003d78:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d7e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	2240      	movs	r2, #64	; 0x40
 8003d84:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d8a:	f043 0204 	orr.w	r2, r3, #4
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003d92:	68f8      	ldr	r0, [r7, #12]
 8003d94:	f7ff fd5a 	bl	800384c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003d98:	bf00      	nop
 8003d9a:	3710      	adds	r7, #16
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bd80      	pop	{r7, pc}

08003da0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003da0:	b480      	push	{r7}
 8003da2:	b083      	sub	sp, #12
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8003da8:	bf00      	nop
 8003daa:	370c      	adds	r7, #12
 8003dac:	46bd      	mov	sp, r7
 8003dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db2:	4770      	bx	lr

08003db4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003db4:	b480      	push	{r7}
 8003db6:	b085      	sub	sp, #20
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	f003 0307 	and.w	r3, r3, #7
 8003dc2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003dc4:	4b0c      	ldr	r3, [pc, #48]	; (8003df8 <__NVIC_SetPriorityGrouping+0x44>)
 8003dc6:	68db      	ldr	r3, [r3, #12]
 8003dc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003dca:	68ba      	ldr	r2, [r7, #8]
 8003dcc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003dd0:	4013      	ands	r3, r2
 8003dd2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003ddc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003de0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003de4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003de6:	4a04      	ldr	r2, [pc, #16]	; (8003df8 <__NVIC_SetPriorityGrouping+0x44>)
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	60d3      	str	r3, [r2, #12]
}
 8003dec:	bf00      	nop
 8003dee:	3714      	adds	r7, #20
 8003df0:	46bd      	mov	sp, r7
 8003df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df6:	4770      	bx	lr
 8003df8:	e000ed00 	.word	0xe000ed00

08003dfc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003e00:	4b04      	ldr	r3, [pc, #16]	; (8003e14 <__NVIC_GetPriorityGrouping+0x18>)
 8003e02:	68db      	ldr	r3, [r3, #12]
 8003e04:	0a1b      	lsrs	r3, r3, #8
 8003e06:	f003 0307 	and.w	r3, r3, #7
}
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e12:	4770      	bx	lr
 8003e14:	e000ed00 	.word	0xe000ed00

08003e18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b083      	sub	sp, #12
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	4603      	mov	r3, r0
 8003e20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	db0b      	blt.n	8003e42 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e2a:	79fb      	ldrb	r3, [r7, #7]
 8003e2c:	f003 021f 	and.w	r2, r3, #31
 8003e30:	4907      	ldr	r1, [pc, #28]	; (8003e50 <__NVIC_EnableIRQ+0x38>)
 8003e32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e36:	095b      	lsrs	r3, r3, #5
 8003e38:	2001      	movs	r0, #1
 8003e3a:	fa00 f202 	lsl.w	r2, r0, r2
 8003e3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003e42:	bf00      	nop
 8003e44:	370c      	adds	r7, #12
 8003e46:	46bd      	mov	sp, r7
 8003e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4c:	4770      	bx	lr
 8003e4e:	bf00      	nop
 8003e50:	e000e100 	.word	0xe000e100

08003e54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003e54:	b480      	push	{r7}
 8003e56:	b083      	sub	sp, #12
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	6039      	str	r1, [r7, #0]
 8003e5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	db0a      	blt.n	8003e7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	b2da      	uxtb	r2, r3
 8003e6c:	490c      	ldr	r1, [pc, #48]	; (8003ea0 <__NVIC_SetPriority+0x4c>)
 8003e6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e72:	0112      	lsls	r2, r2, #4
 8003e74:	b2d2      	uxtb	r2, r2
 8003e76:	440b      	add	r3, r1
 8003e78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003e7c:	e00a      	b.n	8003e94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	b2da      	uxtb	r2, r3
 8003e82:	4908      	ldr	r1, [pc, #32]	; (8003ea4 <__NVIC_SetPriority+0x50>)
 8003e84:	79fb      	ldrb	r3, [r7, #7]
 8003e86:	f003 030f 	and.w	r3, r3, #15
 8003e8a:	3b04      	subs	r3, #4
 8003e8c:	0112      	lsls	r2, r2, #4
 8003e8e:	b2d2      	uxtb	r2, r2
 8003e90:	440b      	add	r3, r1
 8003e92:	761a      	strb	r2, [r3, #24]
}
 8003e94:	bf00      	nop
 8003e96:	370c      	adds	r7, #12
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9e:	4770      	bx	lr
 8003ea0:	e000e100 	.word	0xe000e100
 8003ea4:	e000ed00 	.word	0xe000ed00

08003ea8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	b089      	sub	sp, #36	; 0x24
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	60f8      	str	r0, [r7, #12]
 8003eb0:	60b9      	str	r1, [r7, #8]
 8003eb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	f003 0307 	and.w	r3, r3, #7
 8003eba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ebc:	69fb      	ldr	r3, [r7, #28]
 8003ebe:	f1c3 0307 	rsb	r3, r3, #7
 8003ec2:	2b04      	cmp	r3, #4
 8003ec4:	bf28      	it	cs
 8003ec6:	2304      	movcs	r3, #4
 8003ec8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003eca:	69fb      	ldr	r3, [r7, #28]
 8003ecc:	3304      	adds	r3, #4
 8003ece:	2b06      	cmp	r3, #6
 8003ed0:	d902      	bls.n	8003ed8 <NVIC_EncodePriority+0x30>
 8003ed2:	69fb      	ldr	r3, [r7, #28]
 8003ed4:	3b03      	subs	r3, #3
 8003ed6:	e000      	b.n	8003eda <NVIC_EncodePriority+0x32>
 8003ed8:	2300      	movs	r3, #0
 8003eda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003edc:	f04f 32ff 	mov.w	r2, #4294967295
 8003ee0:	69bb      	ldr	r3, [r7, #24]
 8003ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee6:	43da      	mvns	r2, r3
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	401a      	ands	r2, r3
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ef0:	f04f 31ff 	mov.w	r1, #4294967295
 8003ef4:	697b      	ldr	r3, [r7, #20]
 8003ef6:	fa01 f303 	lsl.w	r3, r1, r3
 8003efa:	43d9      	mvns	r1, r3
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f00:	4313      	orrs	r3, r2
         );
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	3724      	adds	r7, #36	; 0x24
 8003f06:	46bd      	mov	sp, r7
 8003f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0c:	4770      	bx	lr
	...

08003f10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b082      	sub	sp, #8
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	3b01      	subs	r3, #1
 8003f1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003f20:	d301      	bcc.n	8003f26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003f22:	2301      	movs	r3, #1
 8003f24:	e00f      	b.n	8003f46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003f26:	4a0a      	ldr	r2, [pc, #40]	; (8003f50 <SysTick_Config+0x40>)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	3b01      	subs	r3, #1
 8003f2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003f2e:	210f      	movs	r1, #15
 8003f30:	f04f 30ff 	mov.w	r0, #4294967295
 8003f34:	f7ff ff8e 	bl	8003e54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003f38:	4b05      	ldr	r3, [pc, #20]	; (8003f50 <SysTick_Config+0x40>)
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003f3e:	4b04      	ldr	r3, [pc, #16]	; (8003f50 <SysTick_Config+0x40>)
 8003f40:	2207      	movs	r2, #7
 8003f42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003f44:	2300      	movs	r3, #0
}
 8003f46:	4618      	mov	r0, r3
 8003f48:	3708      	adds	r7, #8
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}
 8003f4e:	bf00      	nop
 8003f50:	e000e010 	.word	0xe000e010

08003f54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b082      	sub	sp, #8
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003f5c:	6878      	ldr	r0, [r7, #4]
 8003f5e:	f7ff ff29 	bl	8003db4 <__NVIC_SetPriorityGrouping>
}
 8003f62:	bf00      	nop
 8003f64:	3708      	adds	r7, #8
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd80      	pop	{r7, pc}

08003f6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003f6a:	b580      	push	{r7, lr}
 8003f6c:	b086      	sub	sp, #24
 8003f6e:	af00      	add	r7, sp, #0
 8003f70:	4603      	mov	r3, r0
 8003f72:	60b9      	str	r1, [r7, #8]
 8003f74:	607a      	str	r2, [r7, #4]
 8003f76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003f78:	2300      	movs	r3, #0
 8003f7a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003f7c:	f7ff ff3e 	bl	8003dfc <__NVIC_GetPriorityGrouping>
 8003f80:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f82:	687a      	ldr	r2, [r7, #4]
 8003f84:	68b9      	ldr	r1, [r7, #8]
 8003f86:	6978      	ldr	r0, [r7, #20]
 8003f88:	f7ff ff8e 	bl	8003ea8 <NVIC_EncodePriority>
 8003f8c:	4602      	mov	r2, r0
 8003f8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f92:	4611      	mov	r1, r2
 8003f94:	4618      	mov	r0, r3
 8003f96:	f7ff ff5d 	bl	8003e54 <__NVIC_SetPriority>
}
 8003f9a:	bf00      	nop
 8003f9c:	3718      	adds	r7, #24
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}

08003fa2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003fa2:	b580      	push	{r7, lr}
 8003fa4:	b082      	sub	sp, #8
 8003fa6:	af00      	add	r7, sp, #0
 8003fa8:	4603      	mov	r3, r0
 8003faa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003fac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	f7ff ff31 	bl	8003e18 <__NVIC_EnableIRQ>
}
 8003fb6:	bf00      	nop
 8003fb8:	3708      	adds	r7, #8
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}

08003fbe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003fbe:	b580      	push	{r7, lr}
 8003fc0:	b082      	sub	sp, #8
 8003fc2:	af00      	add	r7, sp, #0
 8003fc4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003fc6:	6878      	ldr	r0, [r7, #4]
 8003fc8:	f7ff ffa2 	bl	8003f10 <SysTick_Config>
 8003fcc:	4603      	mov	r3, r0
}
 8003fce:	4618      	mov	r0, r3
 8003fd0:	3708      	adds	r7, #8
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd80      	pop	{r7, pc}
	...

08003fd8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b086      	sub	sp, #24
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003fe4:	f7ff f97a 	bl	80032dc <HAL_GetTick>
 8003fe8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d101      	bne.n	8003ff4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	e099      	b.n	8004128 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2202      	movs	r2, #2
 8004000:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	681a      	ldr	r2, [r3, #0]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f022 0201 	bic.w	r2, r2, #1
 8004012:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004014:	e00f      	b.n	8004036 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004016:	f7ff f961 	bl	80032dc <HAL_GetTick>
 800401a:	4602      	mov	r2, r0
 800401c:	693b      	ldr	r3, [r7, #16]
 800401e:	1ad3      	subs	r3, r2, r3
 8004020:	2b05      	cmp	r3, #5
 8004022:	d908      	bls.n	8004036 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2220      	movs	r2, #32
 8004028:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2203      	movs	r2, #3
 800402e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004032:	2303      	movs	r3, #3
 8004034:	e078      	b.n	8004128 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f003 0301 	and.w	r3, r3, #1
 8004040:	2b00      	cmp	r3, #0
 8004042:	d1e8      	bne.n	8004016 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800404c:	697a      	ldr	r2, [r7, #20]
 800404e:	4b38      	ldr	r3, [pc, #224]	; (8004130 <HAL_DMA_Init+0x158>)
 8004050:	4013      	ands	r3, r2
 8004052:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	685a      	ldr	r2, [r3, #4]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	689b      	ldr	r3, [r3, #8]
 800405c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004062:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	691b      	ldr	r3, [r3, #16]
 8004068:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800406e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	699b      	ldr	r3, [r3, #24]
 8004074:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800407a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6a1b      	ldr	r3, [r3, #32]
 8004080:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004082:	697a      	ldr	r2, [r7, #20]
 8004084:	4313      	orrs	r3, r2
 8004086:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800408c:	2b04      	cmp	r3, #4
 800408e:	d107      	bne.n	80040a0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004098:	4313      	orrs	r3, r2
 800409a:	697a      	ldr	r2, [r7, #20]
 800409c:	4313      	orrs	r3, r2
 800409e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	697a      	ldr	r2, [r7, #20]
 80040a6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	695b      	ldr	r3, [r3, #20]
 80040ae:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80040b0:	697b      	ldr	r3, [r7, #20]
 80040b2:	f023 0307 	bic.w	r3, r3, #7
 80040b6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040bc:	697a      	ldr	r2, [r7, #20]
 80040be:	4313      	orrs	r3, r2
 80040c0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c6:	2b04      	cmp	r3, #4
 80040c8:	d117      	bne.n	80040fa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040ce:	697a      	ldr	r2, [r7, #20]
 80040d0:	4313      	orrs	r3, r2
 80040d2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d00e      	beq.n	80040fa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80040dc:	6878      	ldr	r0, [r7, #4]
 80040de:	f000 fa91 	bl	8004604 <DMA_CheckFifoParam>
 80040e2:	4603      	mov	r3, r0
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d008      	beq.n	80040fa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2240      	movs	r2, #64	; 0x40
 80040ec:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2201      	movs	r2, #1
 80040f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80040f6:	2301      	movs	r3, #1
 80040f8:	e016      	b.n	8004128 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	697a      	ldr	r2, [r7, #20]
 8004100:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004102:	6878      	ldr	r0, [r7, #4]
 8004104:	f000 fa48 	bl	8004598 <DMA_CalcBaseAndBitshift>
 8004108:	4603      	mov	r3, r0
 800410a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004110:	223f      	movs	r2, #63	; 0x3f
 8004112:	409a      	lsls	r2, r3
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2200      	movs	r2, #0
 800411c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2201      	movs	r2, #1
 8004122:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004126:	2300      	movs	r3, #0
}
 8004128:	4618      	mov	r0, r3
 800412a:	3718      	adds	r7, #24
 800412c:	46bd      	mov	sp, r7
 800412e:	bd80      	pop	{r7, pc}
 8004130:	f010803f 	.word	0xf010803f

08004134 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b086      	sub	sp, #24
 8004138:	af00      	add	r7, sp, #0
 800413a:	60f8      	str	r0, [r7, #12]
 800413c:	60b9      	str	r1, [r7, #8]
 800413e:	607a      	str	r2, [r7, #4]
 8004140:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004142:	2300      	movs	r3, #0
 8004144:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800414a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004152:	2b01      	cmp	r3, #1
 8004154:	d101      	bne.n	800415a <HAL_DMA_Start_IT+0x26>
 8004156:	2302      	movs	r3, #2
 8004158:	e040      	b.n	80041dc <HAL_DMA_Start_IT+0xa8>
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	2201      	movs	r2, #1
 800415e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004168:	b2db      	uxtb	r3, r3
 800416a:	2b01      	cmp	r3, #1
 800416c:	d12f      	bne.n	80041ce <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	2202      	movs	r2, #2
 8004172:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	2200      	movs	r2, #0
 800417a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	687a      	ldr	r2, [r7, #4]
 8004180:	68b9      	ldr	r1, [r7, #8]
 8004182:	68f8      	ldr	r0, [r7, #12]
 8004184:	f000 f9da 	bl	800453c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800418c:	223f      	movs	r2, #63	; 0x3f
 800418e:	409a      	lsls	r2, r3
 8004190:	693b      	ldr	r3, [r7, #16]
 8004192:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	681a      	ldr	r2, [r3, #0]
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f042 0216 	orr.w	r2, r2, #22
 80041a2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d007      	beq.n	80041bc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	681a      	ldr	r2, [r3, #0]
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f042 0208 	orr.w	r2, r2, #8
 80041ba:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	681a      	ldr	r2, [r3, #0]
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f042 0201 	orr.w	r2, r2, #1
 80041ca:	601a      	str	r2, [r3, #0]
 80041cc:	e005      	b.n	80041da <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	2200      	movs	r2, #0
 80041d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80041d6:	2302      	movs	r3, #2
 80041d8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80041da:	7dfb      	ldrb	r3, [r7, #23]
}
 80041dc:	4618      	mov	r0, r3
 80041de:	3718      	adds	r7, #24
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd80      	pop	{r7, pc}

080041e4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80041e4:	b480      	push	{r7}
 80041e6:	b083      	sub	sp, #12
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80041f2:	b2db      	uxtb	r3, r3
 80041f4:	2b02      	cmp	r3, #2
 80041f6:	d004      	beq.n	8004202 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2280      	movs	r2, #128	; 0x80
 80041fc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80041fe:	2301      	movs	r3, #1
 8004200:	e00c      	b.n	800421c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2205      	movs	r2, #5
 8004206:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	681a      	ldr	r2, [r3, #0]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f022 0201 	bic.w	r2, r2, #1
 8004218:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800421a:	2300      	movs	r3, #0
}
 800421c:	4618      	mov	r0, r3
 800421e:	370c      	adds	r7, #12
 8004220:	46bd      	mov	sp, r7
 8004222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004226:	4770      	bx	lr

08004228 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b086      	sub	sp, #24
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004230:	2300      	movs	r3, #0
 8004232:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004234:	4b92      	ldr	r3, [pc, #584]	; (8004480 <HAL_DMA_IRQHandler+0x258>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a92      	ldr	r2, [pc, #584]	; (8004484 <HAL_DMA_IRQHandler+0x25c>)
 800423a:	fba2 2303 	umull	r2, r3, r2, r3
 800423e:	0a9b      	lsrs	r3, r3, #10
 8004240:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004246:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004248:	693b      	ldr	r3, [r7, #16]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004252:	2208      	movs	r2, #8
 8004254:	409a      	lsls	r2, r3
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	4013      	ands	r3, r2
 800425a:	2b00      	cmp	r3, #0
 800425c:	d01a      	beq.n	8004294 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f003 0304 	and.w	r3, r3, #4
 8004268:	2b00      	cmp	r3, #0
 800426a:	d013      	beq.n	8004294 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	681a      	ldr	r2, [r3, #0]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f022 0204 	bic.w	r2, r2, #4
 800427a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004280:	2208      	movs	r2, #8
 8004282:	409a      	lsls	r2, r3
 8004284:	693b      	ldr	r3, [r7, #16]
 8004286:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800428c:	f043 0201 	orr.w	r2, r3, #1
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004298:	2201      	movs	r2, #1
 800429a:	409a      	lsls	r2, r3
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	4013      	ands	r3, r2
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d012      	beq.n	80042ca <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	695b      	ldr	r3, [r3, #20]
 80042aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d00b      	beq.n	80042ca <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042b6:	2201      	movs	r2, #1
 80042b8:	409a      	lsls	r2, r3
 80042ba:	693b      	ldr	r3, [r7, #16]
 80042bc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042c2:	f043 0202 	orr.w	r2, r3, #2
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042ce:	2204      	movs	r2, #4
 80042d0:	409a      	lsls	r2, r3
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	4013      	ands	r3, r2
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d012      	beq.n	8004300 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f003 0302 	and.w	r3, r3, #2
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d00b      	beq.n	8004300 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042ec:	2204      	movs	r2, #4
 80042ee:	409a      	lsls	r2, r3
 80042f0:	693b      	ldr	r3, [r7, #16]
 80042f2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042f8:	f043 0204 	orr.w	r2, r3, #4
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004304:	2210      	movs	r2, #16
 8004306:	409a      	lsls	r2, r3
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	4013      	ands	r3, r2
 800430c:	2b00      	cmp	r3, #0
 800430e:	d043      	beq.n	8004398 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f003 0308 	and.w	r3, r3, #8
 800431a:	2b00      	cmp	r3, #0
 800431c:	d03c      	beq.n	8004398 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004322:	2210      	movs	r2, #16
 8004324:	409a      	lsls	r2, r3
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004334:	2b00      	cmp	r3, #0
 8004336:	d018      	beq.n	800436a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004342:	2b00      	cmp	r3, #0
 8004344:	d108      	bne.n	8004358 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800434a:	2b00      	cmp	r3, #0
 800434c:	d024      	beq.n	8004398 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004352:	6878      	ldr	r0, [r7, #4]
 8004354:	4798      	blx	r3
 8004356:	e01f      	b.n	8004398 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800435c:	2b00      	cmp	r3, #0
 800435e:	d01b      	beq.n	8004398 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004364:	6878      	ldr	r0, [r7, #4]
 8004366:	4798      	blx	r3
 8004368:	e016      	b.n	8004398 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004374:	2b00      	cmp	r3, #0
 8004376:	d107      	bne.n	8004388 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f022 0208 	bic.w	r2, r2, #8
 8004386:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800438c:	2b00      	cmp	r3, #0
 800438e:	d003      	beq.n	8004398 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004394:	6878      	ldr	r0, [r7, #4]
 8004396:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800439c:	2220      	movs	r2, #32
 800439e:	409a      	lsls	r2, r3
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	4013      	ands	r3, r2
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	f000 808e 	beq.w	80044c6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f003 0310 	and.w	r3, r3, #16
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	f000 8086 	beq.w	80044c6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043be:	2220      	movs	r2, #32
 80043c0:	409a      	lsls	r2, r3
 80043c2:	693b      	ldr	r3, [r7, #16]
 80043c4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80043cc:	b2db      	uxtb	r3, r3
 80043ce:	2b05      	cmp	r3, #5
 80043d0:	d136      	bne.n	8004440 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	681a      	ldr	r2, [r3, #0]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f022 0216 	bic.w	r2, r2, #22
 80043e0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	695a      	ldr	r2, [r3, #20]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80043f0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d103      	bne.n	8004402 <HAL_DMA_IRQHandler+0x1da>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d007      	beq.n	8004412 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	681a      	ldr	r2, [r3, #0]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f022 0208 	bic.w	r2, r2, #8
 8004410:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004416:	223f      	movs	r2, #63	; 0x3f
 8004418:	409a      	lsls	r2, r3
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2200      	movs	r2, #0
 8004422:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2201      	movs	r2, #1
 800442a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004432:	2b00      	cmp	r3, #0
 8004434:	d07d      	beq.n	8004532 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800443a:	6878      	ldr	r0, [r7, #4]
 800443c:	4798      	blx	r3
        }
        return;
 800443e:	e078      	b.n	8004532 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800444a:	2b00      	cmp	r3, #0
 800444c:	d01c      	beq.n	8004488 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004458:	2b00      	cmp	r3, #0
 800445a:	d108      	bne.n	800446e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004460:	2b00      	cmp	r3, #0
 8004462:	d030      	beq.n	80044c6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004468:	6878      	ldr	r0, [r7, #4]
 800446a:	4798      	blx	r3
 800446c:	e02b      	b.n	80044c6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004472:	2b00      	cmp	r3, #0
 8004474:	d027      	beq.n	80044c6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800447a:	6878      	ldr	r0, [r7, #4]
 800447c:	4798      	blx	r3
 800447e:	e022      	b.n	80044c6 <HAL_DMA_IRQHandler+0x29e>
 8004480:	20000080 	.word	0x20000080
 8004484:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004492:	2b00      	cmp	r3, #0
 8004494:	d10f      	bne.n	80044b6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	681a      	ldr	r2, [r3, #0]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f022 0210 	bic.w	r2, r2, #16
 80044a4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2200      	movs	r2, #0
 80044aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2201      	movs	r2, #1
 80044b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d003      	beq.n	80044c6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044c2:	6878      	ldr	r0, [r7, #4]
 80044c4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d032      	beq.n	8004534 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044d2:	f003 0301 	and.w	r3, r3, #1
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d022      	beq.n	8004520 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2205      	movs	r2, #5
 80044de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	681a      	ldr	r2, [r3, #0]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f022 0201 	bic.w	r2, r2, #1
 80044f0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	3301      	adds	r3, #1
 80044f6:	60bb      	str	r3, [r7, #8]
 80044f8:	697a      	ldr	r2, [r7, #20]
 80044fa:	429a      	cmp	r2, r3
 80044fc:	d307      	bcc.n	800450e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f003 0301 	and.w	r3, r3, #1
 8004508:	2b00      	cmp	r3, #0
 800450a:	d1f2      	bne.n	80044f2 <HAL_DMA_IRQHandler+0x2ca>
 800450c:	e000      	b.n	8004510 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800450e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2200      	movs	r2, #0
 8004514:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2201      	movs	r2, #1
 800451c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004524:	2b00      	cmp	r3, #0
 8004526:	d005      	beq.n	8004534 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800452c:	6878      	ldr	r0, [r7, #4]
 800452e:	4798      	blx	r3
 8004530:	e000      	b.n	8004534 <HAL_DMA_IRQHandler+0x30c>
        return;
 8004532:	bf00      	nop
    }
  }
}
 8004534:	3718      	adds	r7, #24
 8004536:	46bd      	mov	sp, r7
 8004538:	bd80      	pop	{r7, pc}
 800453a:	bf00      	nop

0800453c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800453c:	b480      	push	{r7}
 800453e:	b085      	sub	sp, #20
 8004540:	af00      	add	r7, sp, #0
 8004542:	60f8      	str	r0, [r7, #12]
 8004544:	60b9      	str	r1, [r7, #8]
 8004546:	607a      	str	r2, [r7, #4]
 8004548:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	681a      	ldr	r2, [r3, #0]
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004558:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	683a      	ldr	r2, [r7, #0]
 8004560:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	689b      	ldr	r3, [r3, #8]
 8004566:	2b40      	cmp	r3, #64	; 0x40
 8004568:	d108      	bne.n	800457c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	687a      	ldr	r2, [r7, #4]
 8004570:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	68ba      	ldr	r2, [r7, #8]
 8004578:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800457a:	e007      	b.n	800458c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	68ba      	ldr	r2, [r7, #8]
 8004582:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	687a      	ldr	r2, [r7, #4]
 800458a:	60da      	str	r2, [r3, #12]
}
 800458c:	bf00      	nop
 800458e:	3714      	adds	r7, #20
 8004590:	46bd      	mov	sp, r7
 8004592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004596:	4770      	bx	lr

08004598 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004598:	b480      	push	{r7}
 800459a:	b085      	sub	sp, #20
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	b2db      	uxtb	r3, r3
 80045a6:	3b10      	subs	r3, #16
 80045a8:	4a14      	ldr	r2, [pc, #80]	; (80045fc <DMA_CalcBaseAndBitshift+0x64>)
 80045aa:	fba2 2303 	umull	r2, r3, r2, r3
 80045ae:	091b      	lsrs	r3, r3, #4
 80045b0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80045b2:	4a13      	ldr	r2, [pc, #76]	; (8004600 <DMA_CalcBaseAndBitshift+0x68>)
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	4413      	add	r3, r2
 80045b8:	781b      	ldrb	r3, [r3, #0]
 80045ba:	461a      	mov	r2, r3
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	2b03      	cmp	r3, #3
 80045c4:	d909      	bls.n	80045da <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80045ce:	f023 0303 	bic.w	r3, r3, #3
 80045d2:	1d1a      	adds	r2, r3, #4
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	659a      	str	r2, [r3, #88]	; 0x58
 80045d8:	e007      	b.n	80045ea <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80045e2:	f023 0303 	bic.w	r3, r3, #3
 80045e6:	687a      	ldr	r2, [r7, #4]
 80045e8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80045ee:	4618      	mov	r0, r3
 80045f0:	3714      	adds	r7, #20
 80045f2:	46bd      	mov	sp, r7
 80045f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f8:	4770      	bx	lr
 80045fa:	bf00      	nop
 80045fc:	aaaaaaab 	.word	0xaaaaaaab
 8004600:	08007024 	.word	0x08007024

08004604 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004604:	b480      	push	{r7}
 8004606:	b085      	sub	sp, #20
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800460c:	2300      	movs	r3, #0
 800460e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004614:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	699b      	ldr	r3, [r3, #24]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d11f      	bne.n	800465e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	2b03      	cmp	r3, #3
 8004622:	d855      	bhi.n	80046d0 <DMA_CheckFifoParam+0xcc>
 8004624:	a201      	add	r2, pc, #4	; (adr r2, 800462c <DMA_CheckFifoParam+0x28>)
 8004626:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800462a:	bf00      	nop
 800462c:	0800463d 	.word	0x0800463d
 8004630:	0800464f 	.word	0x0800464f
 8004634:	0800463d 	.word	0x0800463d
 8004638:	080046d1 	.word	0x080046d1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004640:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004644:	2b00      	cmp	r3, #0
 8004646:	d045      	beq.n	80046d4 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8004648:	2301      	movs	r3, #1
 800464a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800464c:	e042      	b.n	80046d4 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004652:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004656:	d13f      	bne.n	80046d8 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8004658:	2301      	movs	r3, #1
 800465a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800465c:	e03c      	b.n	80046d8 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	699b      	ldr	r3, [r3, #24]
 8004662:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004666:	d121      	bne.n	80046ac <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	2b03      	cmp	r3, #3
 800466c:	d836      	bhi.n	80046dc <DMA_CheckFifoParam+0xd8>
 800466e:	a201      	add	r2, pc, #4	; (adr r2, 8004674 <DMA_CheckFifoParam+0x70>)
 8004670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004674:	08004685 	.word	0x08004685
 8004678:	0800468b 	.word	0x0800468b
 800467c:	08004685 	.word	0x08004685
 8004680:	0800469d 	.word	0x0800469d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004684:	2301      	movs	r3, #1
 8004686:	73fb      	strb	r3, [r7, #15]
      break;
 8004688:	e02f      	b.n	80046ea <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800468e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004692:	2b00      	cmp	r3, #0
 8004694:	d024      	beq.n	80046e0 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8004696:	2301      	movs	r3, #1
 8004698:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800469a:	e021      	b.n	80046e0 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046a0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80046a4:	d11e      	bne.n	80046e4 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80046a6:	2301      	movs	r3, #1
 80046a8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80046aa:	e01b      	b.n	80046e4 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	2b02      	cmp	r3, #2
 80046b0:	d902      	bls.n	80046b8 <DMA_CheckFifoParam+0xb4>
 80046b2:	2b03      	cmp	r3, #3
 80046b4:	d003      	beq.n	80046be <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80046b6:	e018      	b.n	80046ea <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80046b8:	2301      	movs	r3, #1
 80046ba:	73fb      	strb	r3, [r7, #15]
      break;
 80046bc:	e015      	b.n	80046ea <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046c2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d00e      	beq.n	80046e8 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80046ca:	2301      	movs	r3, #1
 80046cc:	73fb      	strb	r3, [r7, #15]
      break;
 80046ce:	e00b      	b.n	80046e8 <DMA_CheckFifoParam+0xe4>
      break;
 80046d0:	bf00      	nop
 80046d2:	e00a      	b.n	80046ea <DMA_CheckFifoParam+0xe6>
      break;
 80046d4:	bf00      	nop
 80046d6:	e008      	b.n	80046ea <DMA_CheckFifoParam+0xe6>
      break;
 80046d8:	bf00      	nop
 80046da:	e006      	b.n	80046ea <DMA_CheckFifoParam+0xe6>
      break;
 80046dc:	bf00      	nop
 80046de:	e004      	b.n	80046ea <DMA_CheckFifoParam+0xe6>
      break;
 80046e0:	bf00      	nop
 80046e2:	e002      	b.n	80046ea <DMA_CheckFifoParam+0xe6>
      break;   
 80046e4:	bf00      	nop
 80046e6:	e000      	b.n	80046ea <DMA_CheckFifoParam+0xe6>
      break;
 80046e8:	bf00      	nop
    }
  } 
  
  return status; 
 80046ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80046ec:	4618      	mov	r0, r3
 80046ee:	3714      	adds	r7, #20
 80046f0:	46bd      	mov	sp, r7
 80046f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f6:	4770      	bx	lr

080046f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80046f8:	b480      	push	{r7}
 80046fa:	b089      	sub	sp, #36	; 0x24
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
 8004700:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004702:	2300      	movs	r3, #0
 8004704:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004706:	2300      	movs	r3, #0
 8004708:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800470a:	2300      	movs	r3, #0
 800470c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800470e:	2300      	movs	r3, #0
 8004710:	61fb      	str	r3, [r7, #28]
 8004712:	e16b      	b.n	80049ec <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004714:	2201      	movs	r2, #1
 8004716:	69fb      	ldr	r3, [r7, #28]
 8004718:	fa02 f303 	lsl.w	r3, r2, r3
 800471c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	697a      	ldr	r2, [r7, #20]
 8004724:	4013      	ands	r3, r2
 8004726:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004728:	693a      	ldr	r2, [r7, #16]
 800472a:	697b      	ldr	r3, [r7, #20]
 800472c:	429a      	cmp	r2, r3
 800472e:	f040 815a 	bne.w	80049e6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	2b01      	cmp	r3, #1
 8004738:	d00b      	beq.n	8004752 <HAL_GPIO_Init+0x5a>
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	2b02      	cmp	r3, #2
 8004740:	d007      	beq.n	8004752 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004746:	2b11      	cmp	r3, #17
 8004748:	d003      	beq.n	8004752 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	2b12      	cmp	r3, #18
 8004750:	d130      	bne.n	80047b4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	689b      	ldr	r3, [r3, #8]
 8004756:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004758:	69fb      	ldr	r3, [r7, #28]
 800475a:	005b      	lsls	r3, r3, #1
 800475c:	2203      	movs	r2, #3
 800475e:	fa02 f303 	lsl.w	r3, r2, r3
 8004762:	43db      	mvns	r3, r3
 8004764:	69ba      	ldr	r2, [r7, #24]
 8004766:	4013      	ands	r3, r2
 8004768:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	68da      	ldr	r2, [r3, #12]
 800476e:	69fb      	ldr	r3, [r7, #28]
 8004770:	005b      	lsls	r3, r3, #1
 8004772:	fa02 f303 	lsl.w	r3, r2, r3
 8004776:	69ba      	ldr	r2, [r7, #24]
 8004778:	4313      	orrs	r3, r2
 800477a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	69ba      	ldr	r2, [r7, #24]
 8004780:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004788:	2201      	movs	r2, #1
 800478a:	69fb      	ldr	r3, [r7, #28]
 800478c:	fa02 f303 	lsl.w	r3, r2, r3
 8004790:	43db      	mvns	r3, r3
 8004792:	69ba      	ldr	r2, [r7, #24]
 8004794:	4013      	ands	r3, r2
 8004796:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	091b      	lsrs	r3, r3, #4
 800479e:	f003 0201 	and.w	r2, r3, #1
 80047a2:	69fb      	ldr	r3, [r7, #28]
 80047a4:	fa02 f303 	lsl.w	r3, r2, r3
 80047a8:	69ba      	ldr	r2, [r7, #24]
 80047aa:	4313      	orrs	r3, r2
 80047ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	69ba      	ldr	r2, [r7, #24]
 80047b2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	68db      	ldr	r3, [r3, #12]
 80047b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80047ba:	69fb      	ldr	r3, [r7, #28]
 80047bc:	005b      	lsls	r3, r3, #1
 80047be:	2203      	movs	r2, #3
 80047c0:	fa02 f303 	lsl.w	r3, r2, r3
 80047c4:	43db      	mvns	r3, r3
 80047c6:	69ba      	ldr	r2, [r7, #24]
 80047c8:	4013      	ands	r3, r2
 80047ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	689a      	ldr	r2, [r3, #8]
 80047d0:	69fb      	ldr	r3, [r7, #28]
 80047d2:	005b      	lsls	r3, r3, #1
 80047d4:	fa02 f303 	lsl.w	r3, r2, r3
 80047d8:	69ba      	ldr	r2, [r7, #24]
 80047da:	4313      	orrs	r3, r2
 80047dc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	69ba      	ldr	r2, [r7, #24]
 80047e2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	2b02      	cmp	r3, #2
 80047ea:	d003      	beq.n	80047f4 <HAL_GPIO_Init+0xfc>
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	2b12      	cmp	r3, #18
 80047f2:	d123      	bne.n	800483c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80047f4:	69fb      	ldr	r3, [r7, #28]
 80047f6:	08da      	lsrs	r2, r3, #3
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	3208      	adds	r2, #8
 80047fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004800:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004802:	69fb      	ldr	r3, [r7, #28]
 8004804:	f003 0307 	and.w	r3, r3, #7
 8004808:	009b      	lsls	r3, r3, #2
 800480a:	220f      	movs	r2, #15
 800480c:	fa02 f303 	lsl.w	r3, r2, r3
 8004810:	43db      	mvns	r3, r3
 8004812:	69ba      	ldr	r2, [r7, #24]
 8004814:	4013      	ands	r3, r2
 8004816:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	691a      	ldr	r2, [r3, #16]
 800481c:	69fb      	ldr	r3, [r7, #28]
 800481e:	f003 0307 	and.w	r3, r3, #7
 8004822:	009b      	lsls	r3, r3, #2
 8004824:	fa02 f303 	lsl.w	r3, r2, r3
 8004828:	69ba      	ldr	r2, [r7, #24]
 800482a:	4313      	orrs	r3, r2
 800482c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800482e:	69fb      	ldr	r3, [r7, #28]
 8004830:	08da      	lsrs	r2, r3, #3
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	3208      	adds	r2, #8
 8004836:	69b9      	ldr	r1, [r7, #24]
 8004838:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004842:	69fb      	ldr	r3, [r7, #28]
 8004844:	005b      	lsls	r3, r3, #1
 8004846:	2203      	movs	r2, #3
 8004848:	fa02 f303 	lsl.w	r3, r2, r3
 800484c:	43db      	mvns	r3, r3
 800484e:	69ba      	ldr	r2, [r7, #24]
 8004850:	4013      	ands	r3, r2
 8004852:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	f003 0203 	and.w	r2, r3, #3
 800485c:	69fb      	ldr	r3, [r7, #28]
 800485e:	005b      	lsls	r3, r3, #1
 8004860:	fa02 f303 	lsl.w	r3, r2, r3
 8004864:	69ba      	ldr	r2, [r7, #24]
 8004866:	4313      	orrs	r3, r2
 8004868:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	69ba      	ldr	r2, [r7, #24]
 800486e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004878:	2b00      	cmp	r3, #0
 800487a:	f000 80b4 	beq.w	80049e6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800487e:	2300      	movs	r3, #0
 8004880:	60fb      	str	r3, [r7, #12]
 8004882:	4b5f      	ldr	r3, [pc, #380]	; (8004a00 <HAL_GPIO_Init+0x308>)
 8004884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004886:	4a5e      	ldr	r2, [pc, #376]	; (8004a00 <HAL_GPIO_Init+0x308>)
 8004888:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800488c:	6453      	str	r3, [r2, #68]	; 0x44
 800488e:	4b5c      	ldr	r3, [pc, #368]	; (8004a00 <HAL_GPIO_Init+0x308>)
 8004890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004892:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004896:	60fb      	str	r3, [r7, #12]
 8004898:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800489a:	4a5a      	ldr	r2, [pc, #360]	; (8004a04 <HAL_GPIO_Init+0x30c>)
 800489c:	69fb      	ldr	r3, [r7, #28]
 800489e:	089b      	lsrs	r3, r3, #2
 80048a0:	3302      	adds	r3, #2
 80048a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80048a8:	69fb      	ldr	r3, [r7, #28]
 80048aa:	f003 0303 	and.w	r3, r3, #3
 80048ae:	009b      	lsls	r3, r3, #2
 80048b0:	220f      	movs	r2, #15
 80048b2:	fa02 f303 	lsl.w	r3, r2, r3
 80048b6:	43db      	mvns	r3, r3
 80048b8:	69ba      	ldr	r2, [r7, #24]
 80048ba:	4013      	ands	r3, r2
 80048bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	4a51      	ldr	r2, [pc, #324]	; (8004a08 <HAL_GPIO_Init+0x310>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d02b      	beq.n	800491e <HAL_GPIO_Init+0x226>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	4a50      	ldr	r2, [pc, #320]	; (8004a0c <HAL_GPIO_Init+0x314>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d025      	beq.n	800491a <HAL_GPIO_Init+0x222>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	4a4f      	ldr	r2, [pc, #316]	; (8004a10 <HAL_GPIO_Init+0x318>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d01f      	beq.n	8004916 <HAL_GPIO_Init+0x21e>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	4a4e      	ldr	r2, [pc, #312]	; (8004a14 <HAL_GPIO_Init+0x31c>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d019      	beq.n	8004912 <HAL_GPIO_Init+0x21a>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	4a4d      	ldr	r2, [pc, #308]	; (8004a18 <HAL_GPIO_Init+0x320>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d013      	beq.n	800490e <HAL_GPIO_Init+0x216>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	4a4c      	ldr	r2, [pc, #304]	; (8004a1c <HAL_GPIO_Init+0x324>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d00d      	beq.n	800490a <HAL_GPIO_Init+0x212>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	4a4b      	ldr	r2, [pc, #300]	; (8004a20 <HAL_GPIO_Init+0x328>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d007      	beq.n	8004906 <HAL_GPIO_Init+0x20e>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	4a4a      	ldr	r2, [pc, #296]	; (8004a24 <HAL_GPIO_Init+0x32c>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d101      	bne.n	8004902 <HAL_GPIO_Init+0x20a>
 80048fe:	2307      	movs	r3, #7
 8004900:	e00e      	b.n	8004920 <HAL_GPIO_Init+0x228>
 8004902:	2308      	movs	r3, #8
 8004904:	e00c      	b.n	8004920 <HAL_GPIO_Init+0x228>
 8004906:	2306      	movs	r3, #6
 8004908:	e00a      	b.n	8004920 <HAL_GPIO_Init+0x228>
 800490a:	2305      	movs	r3, #5
 800490c:	e008      	b.n	8004920 <HAL_GPIO_Init+0x228>
 800490e:	2304      	movs	r3, #4
 8004910:	e006      	b.n	8004920 <HAL_GPIO_Init+0x228>
 8004912:	2303      	movs	r3, #3
 8004914:	e004      	b.n	8004920 <HAL_GPIO_Init+0x228>
 8004916:	2302      	movs	r3, #2
 8004918:	e002      	b.n	8004920 <HAL_GPIO_Init+0x228>
 800491a:	2301      	movs	r3, #1
 800491c:	e000      	b.n	8004920 <HAL_GPIO_Init+0x228>
 800491e:	2300      	movs	r3, #0
 8004920:	69fa      	ldr	r2, [r7, #28]
 8004922:	f002 0203 	and.w	r2, r2, #3
 8004926:	0092      	lsls	r2, r2, #2
 8004928:	4093      	lsls	r3, r2
 800492a:	69ba      	ldr	r2, [r7, #24]
 800492c:	4313      	orrs	r3, r2
 800492e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004930:	4934      	ldr	r1, [pc, #208]	; (8004a04 <HAL_GPIO_Init+0x30c>)
 8004932:	69fb      	ldr	r3, [r7, #28]
 8004934:	089b      	lsrs	r3, r3, #2
 8004936:	3302      	adds	r3, #2
 8004938:	69ba      	ldr	r2, [r7, #24]
 800493a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800493e:	4b3a      	ldr	r3, [pc, #232]	; (8004a28 <HAL_GPIO_Init+0x330>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004944:	693b      	ldr	r3, [r7, #16]
 8004946:	43db      	mvns	r3, r3
 8004948:	69ba      	ldr	r2, [r7, #24]
 800494a:	4013      	ands	r3, r2
 800494c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004956:	2b00      	cmp	r3, #0
 8004958:	d003      	beq.n	8004962 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800495a:	69ba      	ldr	r2, [r7, #24]
 800495c:	693b      	ldr	r3, [r7, #16]
 800495e:	4313      	orrs	r3, r2
 8004960:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004962:	4a31      	ldr	r2, [pc, #196]	; (8004a28 <HAL_GPIO_Init+0x330>)
 8004964:	69bb      	ldr	r3, [r7, #24]
 8004966:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004968:	4b2f      	ldr	r3, [pc, #188]	; (8004a28 <HAL_GPIO_Init+0x330>)
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800496e:	693b      	ldr	r3, [r7, #16]
 8004970:	43db      	mvns	r3, r3
 8004972:	69ba      	ldr	r2, [r7, #24]
 8004974:	4013      	ands	r3, r2
 8004976:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004980:	2b00      	cmp	r3, #0
 8004982:	d003      	beq.n	800498c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004984:	69ba      	ldr	r2, [r7, #24]
 8004986:	693b      	ldr	r3, [r7, #16]
 8004988:	4313      	orrs	r3, r2
 800498a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800498c:	4a26      	ldr	r2, [pc, #152]	; (8004a28 <HAL_GPIO_Init+0x330>)
 800498e:	69bb      	ldr	r3, [r7, #24]
 8004990:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004992:	4b25      	ldr	r3, [pc, #148]	; (8004a28 <HAL_GPIO_Init+0x330>)
 8004994:	689b      	ldr	r3, [r3, #8]
 8004996:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004998:	693b      	ldr	r3, [r7, #16]
 800499a:	43db      	mvns	r3, r3
 800499c:	69ba      	ldr	r2, [r7, #24]
 800499e:	4013      	ands	r3, r2
 80049a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d003      	beq.n	80049b6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80049ae:	69ba      	ldr	r2, [r7, #24]
 80049b0:	693b      	ldr	r3, [r7, #16]
 80049b2:	4313      	orrs	r3, r2
 80049b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80049b6:	4a1c      	ldr	r2, [pc, #112]	; (8004a28 <HAL_GPIO_Init+0x330>)
 80049b8:	69bb      	ldr	r3, [r7, #24]
 80049ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80049bc:	4b1a      	ldr	r3, [pc, #104]	; (8004a28 <HAL_GPIO_Init+0x330>)
 80049be:	68db      	ldr	r3, [r3, #12]
 80049c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80049c2:	693b      	ldr	r3, [r7, #16]
 80049c4:	43db      	mvns	r3, r3
 80049c6:	69ba      	ldr	r2, [r7, #24]
 80049c8:	4013      	ands	r3, r2
 80049ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	685b      	ldr	r3, [r3, #4]
 80049d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d003      	beq.n	80049e0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80049d8:	69ba      	ldr	r2, [r7, #24]
 80049da:	693b      	ldr	r3, [r7, #16]
 80049dc:	4313      	orrs	r3, r2
 80049de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80049e0:	4a11      	ldr	r2, [pc, #68]	; (8004a28 <HAL_GPIO_Init+0x330>)
 80049e2:	69bb      	ldr	r3, [r7, #24]
 80049e4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80049e6:	69fb      	ldr	r3, [r7, #28]
 80049e8:	3301      	adds	r3, #1
 80049ea:	61fb      	str	r3, [r7, #28]
 80049ec:	69fb      	ldr	r3, [r7, #28]
 80049ee:	2b0f      	cmp	r3, #15
 80049f0:	f67f ae90 	bls.w	8004714 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80049f4:	bf00      	nop
 80049f6:	3724      	adds	r7, #36	; 0x24
 80049f8:	46bd      	mov	sp, r7
 80049fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fe:	4770      	bx	lr
 8004a00:	40023800 	.word	0x40023800
 8004a04:	40013800 	.word	0x40013800
 8004a08:	40020000 	.word	0x40020000
 8004a0c:	40020400 	.word	0x40020400
 8004a10:	40020800 	.word	0x40020800
 8004a14:	40020c00 	.word	0x40020c00
 8004a18:	40021000 	.word	0x40021000
 8004a1c:	40021400 	.word	0x40021400
 8004a20:	40021800 	.word	0x40021800
 8004a24:	40021c00 	.word	0x40021c00
 8004a28:	40013c00 	.word	0x40013c00

08004a2c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b085      	sub	sp, #20
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
 8004a34:	460b      	mov	r3, r1
 8004a36:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	691a      	ldr	r2, [r3, #16]
 8004a3c:	887b      	ldrh	r3, [r7, #2]
 8004a3e:	4013      	ands	r3, r2
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d002      	beq.n	8004a4a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004a44:	2301      	movs	r3, #1
 8004a46:	73fb      	strb	r3, [r7, #15]
 8004a48:	e001      	b.n	8004a4e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004a4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a50:	4618      	mov	r0, r3
 8004a52:	3714      	adds	r7, #20
 8004a54:	46bd      	mov	sp, r7
 8004a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5a:	4770      	bx	lr

08004a5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b083      	sub	sp, #12
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
 8004a64:	460b      	mov	r3, r1
 8004a66:	807b      	strh	r3, [r7, #2]
 8004a68:	4613      	mov	r3, r2
 8004a6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004a6c:	787b      	ldrb	r3, [r7, #1]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d003      	beq.n	8004a7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004a72:	887a      	ldrh	r2, [r7, #2]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004a78:	e003      	b.n	8004a82 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004a7a:	887b      	ldrh	r3, [r7, #2]
 8004a7c:	041a      	lsls	r2, r3, #16
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	619a      	str	r2, [r3, #24]
}
 8004a82:	bf00      	nop
 8004a84:	370c      	adds	r7, #12
 8004a86:	46bd      	mov	sp, r7
 8004a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8c:	4770      	bx	lr

08004a8e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004a8e:	b480      	push	{r7}
 8004a90:	b083      	sub	sp, #12
 8004a92:	af00      	add	r7, sp, #0
 8004a94:	6078      	str	r0, [r7, #4]
 8004a96:	460b      	mov	r3, r1
 8004a98:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	695a      	ldr	r2, [r3, #20]
 8004a9e:	887b      	ldrh	r3, [r7, #2]
 8004aa0:	401a      	ands	r2, r3
 8004aa2:	887b      	ldrh	r3, [r7, #2]
 8004aa4:	429a      	cmp	r2, r3
 8004aa6:	d104      	bne.n	8004ab2 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004aa8:	887b      	ldrh	r3, [r7, #2]
 8004aaa:	041a      	lsls	r2, r3, #16
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8004ab0:	e002      	b.n	8004ab8 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8004ab2:	887a      	ldrh	r2, [r7, #2]
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	619a      	str	r2, [r3, #24]
}
 8004ab8:	bf00      	nop
 8004aba:	370c      	adds	r7, #12
 8004abc:	46bd      	mov	sp, r7
 8004abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac2:	4770      	bx	lr

08004ac4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b086      	sub	sp, #24
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d101      	bne.n	8004ad6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	e25b      	b.n	8004f8e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f003 0301 	and.w	r3, r3, #1
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d075      	beq.n	8004bce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004ae2:	4ba3      	ldr	r3, [pc, #652]	; (8004d70 <HAL_RCC_OscConfig+0x2ac>)
 8004ae4:	689b      	ldr	r3, [r3, #8]
 8004ae6:	f003 030c 	and.w	r3, r3, #12
 8004aea:	2b04      	cmp	r3, #4
 8004aec:	d00c      	beq.n	8004b08 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004aee:	4ba0      	ldr	r3, [pc, #640]	; (8004d70 <HAL_RCC_OscConfig+0x2ac>)
 8004af0:	689b      	ldr	r3, [r3, #8]
 8004af2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004af6:	2b08      	cmp	r3, #8
 8004af8:	d112      	bne.n	8004b20 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004afa:	4b9d      	ldr	r3, [pc, #628]	; (8004d70 <HAL_RCC_OscConfig+0x2ac>)
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b02:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b06:	d10b      	bne.n	8004b20 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b08:	4b99      	ldr	r3, [pc, #612]	; (8004d70 <HAL_RCC_OscConfig+0x2ac>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d05b      	beq.n	8004bcc <HAL_RCC_OscConfig+0x108>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	685b      	ldr	r3, [r3, #4]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d157      	bne.n	8004bcc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	e236      	b.n	8004f8e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	685b      	ldr	r3, [r3, #4]
 8004b24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b28:	d106      	bne.n	8004b38 <HAL_RCC_OscConfig+0x74>
 8004b2a:	4b91      	ldr	r3, [pc, #580]	; (8004d70 <HAL_RCC_OscConfig+0x2ac>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4a90      	ldr	r2, [pc, #576]	; (8004d70 <HAL_RCC_OscConfig+0x2ac>)
 8004b30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b34:	6013      	str	r3, [r2, #0]
 8004b36:	e01d      	b.n	8004b74 <HAL_RCC_OscConfig+0xb0>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b40:	d10c      	bne.n	8004b5c <HAL_RCC_OscConfig+0x98>
 8004b42:	4b8b      	ldr	r3, [pc, #556]	; (8004d70 <HAL_RCC_OscConfig+0x2ac>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4a8a      	ldr	r2, [pc, #552]	; (8004d70 <HAL_RCC_OscConfig+0x2ac>)
 8004b48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b4c:	6013      	str	r3, [r2, #0]
 8004b4e:	4b88      	ldr	r3, [pc, #544]	; (8004d70 <HAL_RCC_OscConfig+0x2ac>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4a87      	ldr	r2, [pc, #540]	; (8004d70 <HAL_RCC_OscConfig+0x2ac>)
 8004b54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b58:	6013      	str	r3, [r2, #0]
 8004b5a:	e00b      	b.n	8004b74 <HAL_RCC_OscConfig+0xb0>
 8004b5c:	4b84      	ldr	r3, [pc, #528]	; (8004d70 <HAL_RCC_OscConfig+0x2ac>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a83      	ldr	r2, [pc, #524]	; (8004d70 <HAL_RCC_OscConfig+0x2ac>)
 8004b62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b66:	6013      	str	r3, [r2, #0]
 8004b68:	4b81      	ldr	r3, [pc, #516]	; (8004d70 <HAL_RCC_OscConfig+0x2ac>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a80      	ldr	r2, [pc, #512]	; (8004d70 <HAL_RCC_OscConfig+0x2ac>)
 8004b6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d013      	beq.n	8004ba4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b7c:	f7fe fbae 	bl	80032dc <HAL_GetTick>
 8004b80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b82:	e008      	b.n	8004b96 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b84:	f7fe fbaa 	bl	80032dc <HAL_GetTick>
 8004b88:	4602      	mov	r2, r0
 8004b8a:	693b      	ldr	r3, [r7, #16]
 8004b8c:	1ad3      	subs	r3, r2, r3
 8004b8e:	2b64      	cmp	r3, #100	; 0x64
 8004b90:	d901      	bls.n	8004b96 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004b92:	2303      	movs	r3, #3
 8004b94:	e1fb      	b.n	8004f8e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b96:	4b76      	ldr	r3, [pc, #472]	; (8004d70 <HAL_RCC_OscConfig+0x2ac>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d0f0      	beq.n	8004b84 <HAL_RCC_OscConfig+0xc0>
 8004ba2:	e014      	b.n	8004bce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ba4:	f7fe fb9a 	bl	80032dc <HAL_GetTick>
 8004ba8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004baa:	e008      	b.n	8004bbe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004bac:	f7fe fb96 	bl	80032dc <HAL_GetTick>
 8004bb0:	4602      	mov	r2, r0
 8004bb2:	693b      	ldr	r3, [r7, #16]
 8004bb4:	1ad3      	subs	r3, r2, r3
 8004bb6:	2b64      	cmp	r3, #100	; 0x64
 8004bb8:	d901      	bls.n	8004bbe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004bba:	2303      	movs	r3, #3
 8004bbc:	e1e7      	b.n	8004f8e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004bbe:	4b6c      	ldr	r3, [pc, #432]	; (8004d70 <HAL_RCC_OscConfig+0x2ac>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d1f0      	bne.n	8004bac <HAL_RCC_OscConfig+0xe8>
 8004bca:	e000      	b.n	8004bce <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bcc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f003 0302 	and.w	r3, r3, #2
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d063      	beq.n	8004ca2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004bda:	4b65      	ldr	r3, [pc, #404]	; (8004d70 <HAL_RCC_OscConfig+0x2ac>)
 8004bdc:	689b      	ldr	r3, [r3, #8]
 8004bde:	f003 030c 	and.w	r3, r3, #12
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d00b      	beq.n	8004bfe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004be6:	4b62      	ldr	r3, [pc, #392]	; (8004d70 <HAL_RCC_OscConfig+0x2ac>)
 8004be8:	689b      	ldr	r3, [r3, #8]
 8004bea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004bee:	2b08      	cmp	r3, #8
 8004bf0:	d11c      	bne.n	8004c2c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004bf2:	4b5f      	ldr	r3, [pc, #380]	; (8004d70 <HAL_RCC_OscConfig+0x2ac>)
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d116      	bne.n	8004c2c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004bfe:	4b5c      	ldr	r3, [pc, #368]	; (8004d70 <HAL_RCC_OscConfig+0x2ac>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f003 0302 	and.w	r3, r3, #2
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d005      	beq.n	8004c16 <HAL_RCC_OscConfig+0x152>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	68db      	ldr	r3, [r3, #12]
 8004c0e:	2b01      	cmp	r3, #1
 8004c10:	d001      	beq.n	8004c16 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	e1bb      	b.n	8004f8e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c16:	4b56      	ldr	r3, [pc, #344]	; (8004d70 <HAL_RCC_OscConfig+0x2ac>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	691b      	ldr	r3, [r3, #16]
 8004c22:	00db      	lsls	r3, r3, #3
 8004c24:	4952      	ldr	r1, [pc, #328]	; (8004d70 <HAL_RCC_OscConfig+0x2ac>)
 8004c26:	4313      	orrs	r3, r2
 8004c28:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c2a:	e03a      	b.n	8004ca2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	68db      	ldr	r3, [r3, #12]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d020      	beq.n	8004c76 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c34:	4b4f      	ldr	r3, [pc, #316]	; (8004d74 <HAL_RCC_OscConfig+0x2b0>)
 8004c36:	2201      	movs	r2, #1
 8004c38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c3a:	f7fe fb4f 	bl	80032dc <HAL_GetTick>
 8004c3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c40:	e008      	b.n	8004c54 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c42:	f7fe fb4b 	bl	80032dc <HAL_GetTick>
 8004c46:	4602      	mov	r2, r0
 8004c48:	693b      	ldr	r3, [r7, #16]
 8004c4a:	1ad3      	subs	r3, r2, r3
 8004c4c:	2b02      	cmp	r3, #2
 8004c4e:	d901      	bls.n	8004c54 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004c50:	2303      	movs	r3, #3
 8004c52:	e19c      	b.n	8004f8e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c54:	4b46      	ldr	r3, [pc, #280]	; (8004d70 <HAL_RCC_OscConfig+0x2ac>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f003 0302 	and.w	r3, r3, #2
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d0f0      	beq.n	8004c42 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c60:	4b43      	ldr	r3, [pc, #268]	; (8004d70 <HAL_RCC_OscConfig+0x2ac>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	691b      	ldr	r3, [r3, #16]
 8004c6c:	00db      	lsls	r3, r3, #3
 8004c6e:	4940      	ldr	r1, [pc, #256]	; (8004d70 <HAL_RCC_OscConfig+0x2ac>)
 8004c70:	4313      	orrs	r3, r2
 8004c72:	600b      	str	r3, [r1, #0]
 8004c74:	e015      	b.n	8004ca2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c76:	4b3f      	ldr	r3, [pc, #252]	; (8004d74 <HAL_RCC_OscConfig+0x2b0>)
 8004c78:	2200      	movs	r2, #0
 8004c7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c7c:	f7fe fb2e 	bl	80032dc <HAL_GetTick>
 8004c80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c82:	e008      	b.n	8004c96 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c84:	f7fe fb2a 	bl	80032dc <HAL_GetTick>
 8004c88:	4602      	mov	r2, r0
 8004c8a:	693b      	ldr	r3, [r7, #16]
 8004c8c:	1ad3      	subs	r3, r2, r3
 8004c8e:	2b02      	cmp	r3, #2
 8004c90:	d901      	bls.n	8004c96 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004c92:	2303      	movs	r3, #3
 8004c94:	e17b      	b.n	8004f8e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c96:	4b36      	ldr	r3, [pc, #216]	; (8004d70 <HAL_RCC_OscConfig+0x2ac>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f003 0302 	and.w	r3, r3, #2
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d1f0      	bne.n	8004c84 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f003 0308 	and.w	r3, r3, #8
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d030      	beq.n	8004d10 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	695b      	ldr	r3, [r3, #20]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d016      	beq.n	8004ce4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004cb6:	4b30      	ldr	r3, [pc, #192]	; (8004d78 <HAL_RCC_OscConfig+0x2b4>)
 8004cb8:	2201      	movs	r2, #1
 8004cba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cbc:	f7fe fb0e 	bl	80032dc <HAL_GetTick>
 8004cc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004cc2:	e008      	b.n	8004cd6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004cc4:	f7fe fb0a 	bl	80032dc <HAL_GetTick>
 8004cc8:	4602      	mov	r2, r0
 8004cca:	693b      	ldr	r3, [r7, #16]
 8004ccc:	1ad3      	subs	r3, r2, r3
 8004cce:	2b02      	cmp	r3, #2
 8004cd0:	d901      	bls.n	8004cd6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004cd2:	2303      	movs	r3, #3
 8004cd4:	e15b      	b.n	8004f8e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004cd6:	4b26      	ldr	r3, [pc, #152]	; (8004d70 <HAL_RCC_OscConfig+0x2ac>)
 8004cd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cda:	f003 0302 	and.w	r3, r3, #2
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d0f0      	beq.n	8004cc4 <HAL_RCC_OscConfig+0x200>
 8004ce2:	e015      	b.n	8004d10 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ce4:	4b24      	ldr	r3, [pc, #144]	; (8004d78 <HAL_RCC_OscConfig+0x2b4>)
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004cea:	f7fe faf7 	bl	80032dc <HAL_GetTick>
 8004cee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004cf0:	e008      	b.n	8004d04 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004cf2:	f7fe faf3 	bl	80032dc <HAL_GetTick>
 8004cf6:	4602      	mov	r2, r0
 8004cf8:	693b      	ldr	r3, [r7, #16]
 8004cfa:	1ad3      	subs	r3, r2, r3
 8004cfc:	2b02      	cmp	r3, #2
 8004cfe:	d901      	bls.n	8004d04 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004d00:	2303      	movs	r3, #3
 8004d02:	e144      	b.n	8004f8e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d04:	4b1a      	ldr	r3, [pc, #104]	; (8004d70 <HAL_RCC_OscConfig+0x2ac>)
 8004d06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d08:	f003 0302 	and.w	r3, r3, #2
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d1f0      	bne.n	8004cf2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f003 0304 	and.w	r3, r3, #4
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	f000 80a0 	beq.w	8004e5e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d1e:	2300      	movs	r3, #0
 8004d20:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d22:	4b13      	ldr	r3, [pc, #76]	; (8004d70 <HAL_RCC_OscConfig+0x2ac>)
 8004d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d10f      	bne.n	8004d4e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d2e:	2300      	movs	r3, #0
 8004d30:	60bb      	str	r3, [r7, #8]
 8004d32:	4b0f      	ldr	r3, [pc, #60]	; (8004d70 <HAL_RCC_OscConfig+0x2ac>)
 8004d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d36:	4a0e      	ldr	r2, [pc, #56]	; (8004d70 <HAL_RCC_OscConfig+0x2ac>)
 8004d38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d3c:	6413      	str	r3, [r2, #64]	; 0x40
 8004d3e:	4b0c      	ldr	r3, [pc, #48]	; (8004d70 <HAL_RCC_OscConfig+0x2ac>)
 8004d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d46:	60bb      	str	r3, [r7, #8]
 8004d48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d4e:	4b0b      	ldr	r3, [pc, #44]	; (8004d7c <HAL_RCC_OscConfig+0x2b8>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d121      	bne.n	8004d9e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d5a:	4b08      	ldr	r3, [pc, #32]	; (8004d7c <HAL_RCC_OscConfig+0x2b8>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a07      	ldr	r2, [pc, #28]	; (8004d7c <HAL_RCC_OscConfig+0x2b8>)
 8004d60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d66:	f7fe fab9 	bl	80032dc <HAL_GetTick>
 8004d6a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d6c:	e011      	b.n	8004d92 <HAL_RCC_OscConfig+0x2ce>
 8004d6e:	bf00      	nop
 8004d70:	40023800 	.word	0x40023800
 8004d74:	42470000 	.word	0x42470000
 8004d78:	42470e80 	.word	0x42470e80
 8004d7c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d80:	f7fe faac 	bl	80032dc <HAL_GetTick>
 8004d84:	4602      	mov	r2, r0
 8004d86:	693b      	ldr	r3, [r7, #16]
 8004d88:	1ad3      	subs	r3, r2, r3
 8004d8a:	2b02      	cmp	r3, #2
 8004d8c:	d901      	bls.n	8004d92 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004d8e:	2303      	movs	r3, #3
 8004d90:	e0fd      	b.n	8004f8e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d92:	4b81      	ldr	r3, [pc, #516]	; (8004f98 <HAL_RCC_OscConfig+0x4d4>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d0f0      	beq.n	8004d80 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	689b      	ldr	r3, [r3, #8]
 8004da2:	2b01      	cmp	r3, #1
 8004da4:	d106      	bne.n	8004db4 <HAL_RCC_OscConfig+0x2f0>
 8004da6:	4b7d      	ldr	r3, [pc, #500]	; (8004f9c <HAL_RCC_OscConfig+0x4d8>)
 8004da8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004daa:	4a7c      	ldr	r2, [pc, #496]	; (8004f9c <HAL_RCC_OscConfig+0x4d8>)
 8004dac:	f043 0301 	orr.w	r3, r3, #1
 8004db0:	6713      	str	r3, [r2, #112]	; 0x70
 8004db2:	e01c      	b.n	8004dee <HAL_RCC_OscConfig+0x32a>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	689b      	ldr	r3, [r3, #8]
 8004db8:	2b05      	cmp	r3, #5
 8004dba:	d10c      	bne.n	8004dd6 <HAL_RCC_OscConfig+0x312>
 8004dbc:	4b77      	ldr	r3, [pc, #476]	; (8004f9c <HAL_RCC_OscConfig+0x4d8>)
 8004dbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dc0:	4a76      	ldr	r2, [pc, #472]	; (8004f9c <HAL_RCC_OscConfig+0x4d8>)
 8004dc2:	f043 0304 	orr.w	r3, r3, #4
 8004dc6:	6713      	str	r3, [r2, #112]	; 0x70
 8004dc8:	4b74      	ldr	r3, [pc, #464]	; (8004f9c <HAL_RCC_OscConfig+0x4d8>)
 8004dca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dcc:	4a73      	ldr	r2, [pc, #460]	; (8004f9c <HAL_RCC_OscConfig+0x4d8>)
 8004dce:	f043 0301 	orr.w	r3, r3, #1
 8004dd2:	6713      	str	r3, [r2, #112]	; 0x70
 8004dd4:	e00b      	b.n	8004dee <HAL_RCC_OscConfig+0x32a>
 8004dd6:	4b71      	ldr	r3, [pc, #452]	; (8004f9c <HAL_RCC_OscConfig+0x4d8>)
 8004dd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dda:	4a70      	ldr	r2, [pc, #448]	; (8004f9c <HAL_RCC_OscConfig+0x4d8>)
 8004ddc:	f023 0301 	bic.w	r3, r3, #1
 8004de0:	6713      	str	r3, [r2, #112]	; 0x70
 8004de2:	4b6e      	ldr	r3, [pc, #440]	; (8004f9c <HAL_RCC_OscConfig+0x4d8>)
 8004de4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004de6:	4a6d      	ldr	r2, [pc, #436]	; (8004f9c <HAL_RCC_OscConfig+0x4d8>)
 8004de8:	f023 0304 	bic.w	r3, r3, #4
 8004dec:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	689b      	ldr	r3, [r3, #8]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d015      	beq.n	8004e22 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004df6:	f7fe fa71 	bl	80032dc <HAL_GetTick>
 8004dfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004dfc:	e00a      	b.n	8004e14 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004dfe:	f7fe fa6d 	bl	80032dc <HAL_GetTick>
 8004e02:	4602      	mov	r2, r0
 8004e04:	693b      	ldr	r3, [r7, #16]
 8004e06:	1ad3      	subs	r3, r2, r3
 8004e08:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d901      	bls.n	8004e14 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004e10:	2303      	movs	r3, #3
 8004e12:	e0bc      	b.n	8004f8e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e14:	4b61      	ldr	r3, [pc, #388]	; (8004f9c <HAL_RCC_OscConfig+0x4d8>)
 8004e16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e18:	f003 0302 	and.w	r3, r3, #2
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d0ee      	beq.n	8004dfe <HAL_RCC_OscConfig+0x33a>
 8004e20:	e014      	b.n	8004e4c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e22:	f7fe fa5b 	bl	80032dc <HAL_GetTick>
 8004e26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e28:	e00a      	b.n	8004e40 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e2a:	f7fe fa57 	bl	80032dc <HAL_GetTick>
 8004e2e:	4602      	mov	r2, r0
 8004e30:	693b      	ldr	r3, [r7, #16]
 8004e32:	1ad3      	subs	r3, r2, r3
 8004e34:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d901      	bls.n	8004e40 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004e3c:	2303      	movs	r3, #3
 8004e3e:	e0a6      	b.n	8004f8e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e40:	4b56      	ldr	r3, [pc, #344]	; (8004f9c <HAL_RCC_OscConfig+0x4d8>)
 8004e42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e44:	f003 0302 	and.w	r3, r3, #2
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d1ee      	bne.n	8004e2a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004e4c:	7dfb      	ldrb	r3, [r7, #23]
 8004e4e:	2b01      	cmp	r3, #1
 8004e50:	d105      	bne.n	8004e5e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e52:	4b52      	ldr	r3, [pc, #328]	; (8004f9c <HAL_RCC_OscConfig+0x4d8>)
 8004e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e56:	4a51      	ldr	r2, [pc, #324]	; (8004f9c <HAL_RCC_OscConfig+0x4d8>)
 8004e58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e5c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	699b      	ldr	r3, [r3, #24]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	f000 8092 	beq.w	8004f8c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004e68:	4b4c      	ldr	r3, [pc, #304]	; (8004f9c <HAL_RCC_OscConfig+0x4d8>)
 8004e6a:	689b      	ldr	r3, [r3, #8]
 8004e6c:	f003 030c 	and.w	r3, r3, #12
 8004e70:	2b08      	cmp	r3, #8
 8004e72:	d05c      	beq.n	8004f2e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	699b      	ldr	r3, [r3, #24]
 8004e78:	2b02      	cmp	r3, #2
 8004e7a:	d141      	bne.n	8004f00 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e7c:	4b48      	ldr	r3, [pc, #288]	; (8004fa0 <HAL_RCC_OscConfig+0x4dc>)
 8004e7e:	2200      	movs	r2, #0
 8004e80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e82:	f7fe fa2b 	bl	80032dc <HAL_GetTick>
 8004e86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e88:	e008      	b.n	8004e9c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e8a:	f7fe fa27 	bl	80032dc <HAL_GetTick>
 8004e8e:	4602      	mov	r2, r0
 8004e90:	693b      	ldr	r3, [r7, #16]
 8004e92:	1ad3      	subs	r3, r2, r3
 8004e94:	2b02      	cmp	r3, #2
 8004e96:	d901      	bls.n	8004e9c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004e98:	2303      	movs	r3, #3
 8004e9a:	e078      	b.n	8004f8e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e9c:	4b3f      	ldr	r3, [pc, #252]	; (8004f9c <HAL_RCC_OscConfig+0x4d8>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d1f0      	bne.n	8004e8a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	69da      	ldr	r2, [r3, #28]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6a1b      	ldr	r3, [r3, #32]
 8004eb0:	431a      	orrs	r2, r3
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb6:	019b      	lsls	r3, r3, #6
 8004eb8:	431a      	orrs	r2, r3
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ebe:	085b      	lsrs	r3, r3, #1
 8004ec0:	3b01      	subs	r3, #1
 8004ec2:	041b      	lsls	r3, r3, #16
 8004ec4:	431a      	orrs	r2, r3
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eca:	061b      	lsls	r3, r3, #24
 8004ecc:	4933      	ldr	r1, [pc, #204]	; (8004f9c <HAL_RCC_OscConfig+0x4d8>)
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ed2:	4b33      	ldr	r3, [pc, #204]	; (8004fa0 <HAL_RCC_OscConfig+0x4dc>)
 8004ed4:	2201      	movs	r2, #1
 8004ed6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ed8:	f7fe fa00 	bl	80032dc <HAL_GetTick>
 8004edc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ede:	e008      	b.n	8004ef2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ee0:	f7fe f9fc 	bl	80032dc <HAL_GetTick>
 8004ee4:	4602      	mov	r2, r0
 8004ee6:	693b      	ldr	r3, [r7, #16]
 8004ee8:	1ad3      	subs	r3, r2, r3
 8004eea:	2b02      	cmp	r3, #2
 8004eec:	d901      	bls.n	8004ef2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004eee:	2303      	movs	r3, #3
 8004ef0:	e04d      	b.n	8004f8e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ef2:	4b2a      	ldr	r3, [pc, #168]	; (8004f9c <HAL_RCC_OscConfig+0x4d8>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d0f0      	beq.n	8004ee0 <HAL_RCC_OscConfig+0x41c>
 8004efe:	e045      	b.n	8004f8c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f00:	4b27      	ldr	r3, [pc, #156]	; (8004fa0 <HAL_RCC_OscConfig+0x4dc>)
 8004f02:	2200      	movs	r2, #0
 8004f04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f06:	f7fe f9e9 	bl	80032dc <HAL_GetTick>
 8004f0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f0c:	e008      	b.n	8004f20 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f0e:	f7fe f9e5 	bl	80032dc <HAL_GetTick>
 8004f12:	4602      	mov	r2, r0
 8004f14:	693b      	ldr	r3, [r7, #16]
 8004f16:	1ad3      	subs	r3, r2, r3
 8004f18:	2b02      	cmp	r3, #2
 8004f1a:	d901      	bls.n	8004f20 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004f1c:	2303      	movs	r3, #3
 8004f1e:	e036      	b.n	8004f8e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f20:	4b1e      	ldr	r3, [pc, #120]	; (8004f9c <HAL_RCC_OscConfig+0x4d8>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d1f0      	bne.n	8004f0e <HAL_RCC_OscConfig+0x44a>
 8004f2c:	e02e      	b.n	8004f8c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	699b      	ldr	r3, [r3, #24]
 8004f32:	2b01      	cmp	r3, #1
 8004f34:	d101      	bne.n	8004f3a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004f36:	2301      	movs	r3, #1
 8004f38:	e029      	b.n	8004f8e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004f3a:	4b18      	ldr	r3, [pc, #96]	; (8004f9c <HAL_RCC_OscConfig+0x4d8>)
 8004f3c:	685b      	ldr	r3, [r3, #4]
 8004f3e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	69db      	ldr	r3, [r3, #28]
 8004f4a:	429a      	cmp	r2, r3
 8004f4c:	d11c      	bne.n	8004f88 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f58:	429a      	cmp	r2, r3
 8004f5a:	d115      	bne.n	8004f88 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004f5c:	68fa      	ldr	r2, [r7, #12]
 8004f5e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004f62:	4013      	ands	r3, r2
 8004f64:	687a      	ldr	r2, [r7, #4]
 8004f66:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d10d      	bne.n	8004f88 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004f76:	429a      	cmp	r2, r3
 8004f78:	d106      	bne.n	8004f88 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004f84:	429a      	cmp	r2, r3
 8004f86:	d001      	beq.n	8004f8c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004f88:	2301      	movs	r3, #1
 8004f8a:	e000      	b.n	8004f8e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004f8c:	2300      	movs	r3, #0
}
 8004f8e:	4618      	mov	r0, r3
 8004f90:	3718      	adds	r7, #24
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bd80      	pop	{r7, pc}
 8004f96:	bf00      	nop
 8004f98:	40007000 	.word	0x40007000
 8004f9c:	40023800 	.word	0x40023800
 8004fa0:	42470060 	.word	0x42470060

08004fa4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b084      	sub	sp, #16
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
 8004fac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d101      	bne.n	8004fb8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	e0cc      	b.n	8005152 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004fb8:	4b68      	ldr	r3, [pc, #416]	; (800515c <HAL_RCC_ClockConfig+0x1b8>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f003 030f 	and.w	r3, r3, #15
 8004fc0:	683a      	ldr	r2, [r7, #0]
 8004fc2:	429a      	cmp	r2, r3
 8004fc4:	d90c      	bls.n	8004fe0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fc6:	4b65      	ldr	r3, [pc, #404]	; (800515c <HAL_RCC_ClockConfig+0x1b8>)
 8004fc8:	683a      	ldr	r2, [r7, #0]
 8004fca:	b2d2      	uxtb	r2, r2
 8004fcc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fce:	4b63      	ldr	r3, [pc, #396]	; (800515c <HAL_RCC_ClockConfig+0x1b8>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f003 030f 	and.w	r3, r3, #15
 8004fd6:	683a      	ldr	r2, [r7, #0]
 8004fd8:	429a      	cmp	r2, r3
 8004fda:	d001      	beq.n	8004fe0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004fdc:	2301      	movs	r3, #1
 8004fde:	e0b8      	b.n	8005152 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f003 0302 	and.w	r3, r3, #2
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d020      	beq.n	800502e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f003 0304 	and.w	r3, r3, #4
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d005      	beq.n	8005004 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004ff8:	4b59      	ldr	r3, [pc, #356]	; (8005160 <HAL_RCC_ClockConfig+0x1bc>)
 8004ffa:	689b      	ldr	r3, [r3, #8]
 8004ffc:	4a58      	ldr	r2, [pc, #352]	; (8005160 <HAL_RCC_ClockConfig+0x1bc>)
 8004ffe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005002:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f003 0308 	and.w	r3, r3, #8
 800500c:	2b00      	cmp	r3, #0
 800500e:	d005      	beq.n	800501c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005010:	4b53      	ldr	r3, [pc, #332]	; (8005160 <HAL_RCC_ClockConfig+0x1bc>)
 8005012:	689b      	ldr	r3, [r3, #8]
 8005014:	4a52      	ldr	r2, [pc, #328]	; (8005160 <HAL_RCC_ClockConfig+0x1bc>)
 8005016:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800501a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800501c:	4b50      	ldr	r3, [pc, #320]	; (8005160 <HAL_RCC_ClockConfig+0x1bc>)
 800501e:	689b      	ldr	r3, [r3, #8]
 8005020:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	689b      	ldr	r3, [r3, #8]
 8005028:	494d      	ldr	r1, [pc, #308]	; (8005160 <HAL_RCC_ClockConfig+0x1bc>)
 800502a:	4313      	orrs	r3, r2
 800502c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f003 0301 	and.w	r3, r3, #1
 8005036:	2b00      	cmp	r3, #0
 8005038:	d044      	beq.n	80050c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	2b01      	cmp	r3, #1
 8005040:	d107      	bne.n	8005052 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005042:	4b47      	ldr	r3, [pc, #284]	; (8005160 <HAL_RCC_ClockConfig+0x1bc>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800504a:	2b00      	cmp	r3, #0
 800504c:	d119      	bne.n	8005082 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800504e:	2301      	movs	r3, #1
 8005050:	e07f      	b.n	8005152 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	685b      	ldr	r3, [r3, #4]
 8005056:	2b02      	cmp	r3, #2
 8005058:	d003      	beq.n	8005062 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800505e:	2b03      	cmp	r3, #3
 8005060:	d107      	bne.n	8005072 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005062:	4b3f      	ldr	r3, [pc, #252]	; (8005160 <HAL_RCC_ClockConfig+0x1bc>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800506a:	2b00      	cmp	r3, #0
 800506c:	d109      	bne.n	8005082 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800506e:	2301      	movs	r3, #1
 8005070:	e06f      	b.n	8005152 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005072:	4b3b      	ldr	r3, [pc, #236]	; (8005160 <HAL_RCC_ClockConfig+0x1bc>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f003 0302 	and.w	r3, r3, #2
 800507a:	2b00      	cmp	r3, #0
 800507c:	d101      	bne.n	8005082 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800507e:	2301      	movs	r3, #1
 8005080:	e067      	b.n	8005152 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005082:	4b37      	ldr	r3, [pc, #220]	; (8005160 <HAL_RCC_ClockConfig+0x1bc>)
 8005084:	689b      	ldr	r3, [r3, #8]
 8005086:	f023 0203 	bic.w	r2, r3, #3
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	4934      	ldr	r1, [pc, #208]	; (8005160 <HAL_RCC_ClockConfig+0x1bc>)
 8005090:	4313      	orrs	r3, r2
 8005092:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005094:	f7fe f922 	bl	80032dc <HAL_GetTick>
 8005098:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800509a:	e00a      	b.n	80050b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800509c:	f7fe f91e 	bl	80032dc <HAL_GetTick>
 80050a0:	4602      	mov	r2, r0
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	1ad3      	subs	r3, r2, r3
 80050a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d901      	bls.n	80050b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80050ae:	2303      	movs	r3, #3
 80050b0:	e04f      	b.n	8005152 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050b2:	4b2b      	ldr	r3, [pc, #172]	; (8005160 <HAL_RCC_ClockConfig+0x1bc>)
 80050b4:	689b      	ldr	r3, [r3, #8]
 80050b6:	f003 020c 	and.w	r2, r3, #12
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	009b      	lsls	r3, r3, #2
 80050c0:	429a      	cmp	r2, r3
 80050c2:	d1eb      	bne.n	800509c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80050c4:	4b25      	ldr	r3, [pc, #148]	; (800515c <HAL_RCC_ClockConfig+0x1b8>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f003 030f 	and.w	r3, r3, #15
 80050cc:	683a      	ldr	r2, [r7, #0]
 80050ce:	429a      	cmp	r2, r3
 80050d0:	d20c      	bcs.n	80050ec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050d2:	4b22      	ldr	r3, [pc, #136]	; (800515c <HAL_RCC_ClockConfig+0x1b8>)
 80050d4:	683a      	ldr	r2, [r7, #0]
 80050d6:	b2d2      	uxtb	r2, r2
 80050d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80050da:	4b20      	ldr	r3, [pc, #128]	; (800515c <HAL_RCC_ClockConfig+0x1b8>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f003 030f 	and.w	r3, r3, #15
 80050e2:	683a      	ldr	r2, [r7, #0]
 80050e4:	429a      	cmp	r2, r3
 80050e6:	d001      	beq.n	80050ec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80050e8:	2301      	movs	r3, #1
 80050ea:	e032      	b.n	8005152 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f003 0304 	and.w	r3, r3, #4
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d008      	beq.n	800510a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80050f8:	4b19      	ldr	r3, [pc, #100]	; (8005160 <HAL_RCC_ClockConfig+0x1bc>)
 80050fa:	689b      	ldr	r3, [r3, #8]
 80050fc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	68db      	ldr	r3, [r3, #12]
 8005104:	4916      	ldr	r1, [pc, #88]	; (8005160 <HAL_RCC_ClockConfig+0x1bc>)
 8005106:	4313      	orrs	r3, r2
 8005108:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f003 0308 	and.w	r3, r3, #8
 8005112:	2b00      	cmp	r3, #0
 8005114:	d009      	beq.n	800512a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005116:	4b12      	ldr	r3, [pc, #72]	; (8005160 <HAL_RCC_ClockConfig+0x1bc>)
 8005118:	689b      	ldr	r3, [r3, #8]
 800511a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	691b      	ldr	r3, [r3, #16]
 8005122:	00db      	lsls	r3, r3, #3
 8005124:	490e      	ldr	r1, [pc, #56]	; (8005160 <HAL_RCC_ClockConfig+0x1bc>)
 8005126:	4313      	orrs	r3, r2
 8005128:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800512a:	f000 f821 	bl	8005170 <HAL_RCC_GetSysClockFreq>
 800512e:	4601      	mov	r1, r0
 8005130:	4b0b      	ldr	r3, [pc, #44]	; (8005160 <HAL_RCC_ClockConfig+0x1bc>)
 8005132:	689b      	ldr	r3, [r3, #8]
 8005134:	091b      	lsrs	r3, r3, #4
 8005136:	f003 030f 	and.w	r3, r3, #15
 800513a:	4a0a      	ldr	r2, [pc, #40]	; (8005164 <HAL_RCC_ClockConfig+0x1c0>)
 800513c:	5cd3      	ldrb	r3, [r2, r3]
 800513e:	fa21 f303 	lsr.w	r3, r1, r3
 8005142:	4a09      	ldr	r2, [pc, #36]	; (8005168 <HAL_RCC_ClockConfig+0x1c4>)
 8005144:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005146:	4b09      	ldr	r3, [pc, #36]	; (800516c <HAL_RCC_ClockConfig+0x1c8>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4618      	mov	r0, r3
 800514c:	f7fe f882 	bl	8003254 <HAL_InitTick>

  return HAL_OK;
 8005150:	2300      	movs	r3, #0
}
 8005152:	4618      	mov	r0, r3
 8005154:	3710      	adds	r7, #16
 8005156:	46bd      	mov	sp, r7
 8005158:	bd80      	pop	{r7, pc}
 800515a:	bf00      	nop
 800515c:	40023c00 	.word	0x40023c00
 8005160:	40023800 	.word	0x40023800
 8005164:	0800700c 	.word	0x0800700c
 8005168:	20000080 	.word	0x20000080
 800516c:	20000084 	.word	0x20000084

08005170 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005170:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005172:	b085      	sub	sp, #20
 8005174:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005176:	2300      	movs	r3, #0
 8005178:	607b      	str	r3, [r7, #4]
 800517a:	2300      	movs	r3, #0
 800517c:	60fb      	str	r3, [r7, #12]
 800517e:	2300      	movs	r3, #0
 8005180:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005182:	2300      	movs	r3, #0
 8005184:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005186:	4b50      	ldr	r3, [pc, #320]	; (80052c8 <HAL_RCC_GetSysClockFreq+0x158>)
 8005188:	689b      	ldr	r3, [r3, #8]
 800518a:	f003 030c 	and.w	r3, r3, #12
 800518e:	2b04      	cmp	r3, #4
 8005190:	d007      	beq.n	80051a2 <HAL_RCC_GetSysClockFreq+0x32>
 8005192:	2b08      	cmp	r3, #8
 8005194:	d008      	beq.n	80051a8 <HAL_RCC_GetSysClockFreq+0x38>
 8005196:	2b00      	cmp	r3, #0
 8005198:	f040 808d 	bne.w	80052b6 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800519c:	4b4b      	ldr	r3, [pc, #300]	; (80052cc <HAL_RCC_GetSysClockFreq+0x15c>)
 800519e:	60bb      	str	r3, [r7, #8]
       break;
 80051a0:	e08c      	b.n	80052bc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80051a2:	4b4b      	ldr	r3, [pc, #300]	; (80052d0 <HAL_RCC_GetSysClockFreq+0x160>)
 80051a4:	60bb      	str	r3, [r7, #8]
      break;
 80051a6:	e089      	b.n	80052bc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80051a8:	4b47      	ldr	r3, [pc, #284]	; (80052c8 <HAL_RCC_GetSysClockFreq+0x158>)
 80051aa:	685b      	ldr	r3, [r3, #4]
 80051ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80051b0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80051b2:	4b45      	ldr	r3, [pc, #276]	; (80052c8 <HAL_RCC_GetSysClockFreq+0x158>)
 80051b4:	685b      	ldr	r3, [r3, #4]
 80051b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d023      	beq.n	8005206 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80051be:	4b42      	ldr	r3, [pc, #264]	; (80052c8 <HAL_RCC_GetSysClockFreq+0x158>)
 80051c0:	685b      	ldr	r3, [r3, #4]
 80051c2:	099b      	lsrs	r3, r3, #6
 80051c4:	f04f 0400 	mov.w	r4, #0
 80051c8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80051cc:	f04f 0200 	mov.w	r2, #0
 80051d0:	ea03 0501 	and.w	r5, r3, r1
 80051d4:	ea04 0602 	and.w	r6, r4, r2
 80051d8:	4a3d      	ldr	r2, [pc, #244]	; (80052d0 <HAL_RCC_GetSysClockFreq+0x160>)
 80051da:	fb02 f106 	mul.w	r1, r2, r6
 80051de:	2200      	movs	r2, #0
 80051e0:	fb02 f205 	mul.w	r2, r2, r5
 80051e4:	440a      	add	r2, r1
 80051e6:	493a      	ldr	r1, [pc, #232]	; (80052d0 <HAL_RCC_GetSysClockFreq+0x160>)
 80051e8:	fba5 0101 	umull	r0, r1, r5, r1
 80051ec:	1853      	adds	r3, r2, r1
 80051ee:	4619      	mov	r1, r3
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	f04f 0400 	mov.w	r4, #0
 80051f6:	461a      	mov	r2, r3
 80051f8:	4623      	mov	r3, r4
 80051fa:	f7fb fc93 	bl	8000b24 <__aeabi_uldivmod>
 80051fe:	4603      	mov	r3, r0
 8005200:	460c      	mov	r4, r1
 8005202:	60fb      	str	r3, [r7, #12]
 8005204:	e049      	b.n	800529a <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005206:	4b30      	ldr	r3, [pc, #192]	; (80052c8 <HAL_RCC_GetSysClockFreq+0x158>)
 8005208:	685b      	ldr	r3, [r3, #4]
 800520a:	099b      	lsrs	r3, r3, #6
 800520c:	f04f 0400 	mov.w	r4, #0
 8005210:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005214:	f04f 0200 	mov.w	r2, #0
 8005218:	ea03 0501 	and.w	r5, r3, r1
 800521c:	ea04 0602 	and.w	r6, r4, r2
 8005220:	4629      	mov	r1, r5
 8005222:	4632      	mov	r2, r6
 8005224:	f04f 0300 	mov.w	r3, #0
 8005228:	f04f 0400 	mov.w	r4, #0
 800522c:	0154      	lsls	r4, r2, #5
 800522e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005232:	014b      	lsls	r3, r1, #5
 8005234:	4619      	mov	r1, r3
 8005236:	4622      	mov	r2, r4
 8005238:	1b49      	subs	r1, r1, r5
 800523a:	eb62 0206 	sbc.w	r2, r2, r6
 800523e:	f04f 0300 	mov.w	r3, #0
 8005242:	f04f 0400 	mov.w	r4, #0
 8005246:	0194      	lsls	r4, r2, #6
 8005248:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800524c:	018b      	lsls	r3, r1, #6
 800524e:	1a5b      	subs	r3, r3, r1
 8005250:	eb64 0402 	sbc.w	r4, r4, r2
 8005254:	f04f 0100 	mov.w	r1, #0
 8005258:	f04f 0200 	mov.w	r2, #0
 800525c:	00e2      	lsls	r2, r4, #3
 800525e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005262:	00d9      	lsls	r1, r3, #3
 8005264:	460b      	mov	r3, r1
 8005266:	4614      	mov	r4, r2
 8005268:	195b      	adds	r3, r3, r5
 800526a:	eb44 0406 	adc.w	r4, r4, r6
 800526e:	f04f 0100 	mov.w	r1, #0
 8005272:	f04f 0200 	mov.w	r2, #0
 8005276:	02a2      	lsls	r2, r4, #10
 8005278:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800527c:	0299      	lsls	r1, r3, #10
 800527e:	460b      	mov	r3, r1
 8005280:	4614      	mov	r4, r2
 8005282:	4618      	mov	r0, r3
 8005284:	4621      	mov	r1, r4
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	f04f 0400 	mov.w	r4, #0
 800528c:	461a      	mov	r2, r3
 800528e:	4623      	mov	r3, r4
 8005290:	f7fb fc48 	bl	8000b24 <__aeabi_uldivmod>
 8005294:	4603      	mov	r3, r0
 8005296:	460c      	mov	r4, r1
 8005298:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800529a:	4b0b      	ldr	r3, [pc, #44]	; (80052c8 <HAL_RCC_GetSysClockFreq+0x158>)
 800529c:	685b      	ldr	r3, [r3, #4]
 800529e:	0c1b      	lsrs	r3, r3, #16
 80052a0:	f003 0303 	and.w	r3, r3, #3
 80052a4:	3301      	adds	r3, #1
 80052a6:	005b      	lsls	r3, r3, #1
 80052a8:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80052aa:	68fa      	ldr	r2, [r7, #12]
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80052b2:	60bb      	str	r3, [r7, #8]
      break;
 80052b4:	e002      	b.n	80052bc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80052b6:	4b05      	ldr	r3, [pc, #20]	; (80052cc <HAL_RCC_GetSysClockFreq+0x15c>)
 80052b8:	60bb      	str	r3, [r7, #8]
      break;
 80052ba:	bf00      	nop
    }
  }
  return sysclockfreq;
 80052bc:	68bb      	ldr	r3, [r7, #8]
}
 80052be:	4618      	mov	r0, r3
 80052c0:	3714      	adds	r7, #20
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80052c6:	bf00      	nop
 80052c8:	40023800 	.word	0x40023800
 80052cc:	00f42400 	.word	0x00f42400
 80052d0:	018cba80 	.word	0x018cba80

080052d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80052d4:	b480      	push	{r7}
 80052d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80052d8:	4b03      	ldr	r3, [pc, #12]	; (80052e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80052da:	681b      	ldr	r3, [r3, #0]
}
 80052dc:	4618      	mov	r0, r3
 80052de:	46bd      	mov	sp, r7
 80052e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e4:	4770      	bx	lr
 80052e6:	bf00      	nop
 80052e8:	20000080 	.word	0x20000080

080052ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80052f0:	f7ff fff0 	bl	80052d4 <HAL_RCC_GetHCLKFreq>
 80052f4:	4601      	mov	r1, r0
 80052f6:	4b05      	ldr	r3, [pc, #20]	; (800530c <HAL_RCC_GetPCLK1Freq+0x20>)
 80052f8:	689b      	ldr	r3, [r3, #8]
 80052fa:	0a9b      	lsrs	r3, r3, #10
 80052fc:	f003 0307 	and.w	r3, r3, #7
 8005300:	4a03      	ldr	r2, [pc, #12]	; (8005310 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005302:	5cd3      	ldrb	r3, [r2, r3]
 8005304:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005308:	4618      	mov	r0, r3
 800530a:	bd80      	pop	{r7, pc}
 800530c:	40023800 	.word	0x40023800
 8005310:	0800701c 	.word	0x0800701c

08005314 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005318:	f7ff ffdc 	bl	80052d4 <HAL_RCC_GetHCLKFreq>
 800531c:	4601      	mov	r1, r0
 800531e:	4b05      	ldr	r3, [pc, #20]	; (8005334 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005320:	689b      	ldr	r3, [r3, #8]
 8005322:	0b5b      	lsrs	r3, r3, #13
 8005324:	f003 0307 	and.w	r3, r3, #7
 8005328:	4a03      	ldr	r2, [pc, #12]	; (8005338 <HAL_RCC_GetPCLK2Freq+0x24>)
 800532a:	5cd3      	ldrb	r3, [r2, r3]
 800532c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005330:	4618      	mov	r0, r3
 8005332:	bd80      	pop	{r7, pc}
 8005334:	40023800 	.word	0x40023800
 8005338:	0800701c 	.word	0x0800701c

0800533c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b082      	sub	sp, #8
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d101      	bne.n	800534e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800534a:	2301      	movs	r3, #1
 800534c:	e056      	b.n	80053fc <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2200      	movs	r2, #0
 8005352:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800535a:	b2db      	uxtb	r3, r3
 800535c:	2b00      	cmp	r3, #0
 800535e:	d106      	bne.n	800536e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2200      	movs	r2, #0
 8005364:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005368:	6878      	ldr	r0, [r7, #4]
 800536a:	f7fd fd8b 	bl	8002e84 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2202      	movs	r2, #2
 8005372:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	681a      	ldr	r2, [r3, #0]
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005384:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	685a      	ldr	r2, [r3, #4]
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	689b      	ldr	r3, [r3, #8]
 800538e:	431a      	orrs	r2, r3
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	68db      	ldr	r3, [r3, #12]
 8005394:	431a      	orrs	r2, r3
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	691b      	ldr	r3, [r3, #16]
 800539a:	431a      	orrs	r2, r3
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	695b      	ldr	r3, [r3, #20]
 80053a0:	431a      	orrs	r2, r3
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	699b      	ldr	r3, [r3, #24]
 80053a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80053aa:	431a      	orrs	r2, r3
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	69db      	ldr	r3, [r3, #28]
 80053b0:	431a      	orrs	r2, r3
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6a1b      	ldr	r3, [r3, #32]
 80053b6:	ea42 0103 	orr.w	r1, r2, r3
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	430a      	orrs	r2, r1
 80053c4:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	699b      	ldr	r3, [r3, #24]
 80053ca:	0c1b      	lsrs	r3, r3, #16
 80053cc:	f003 0104 	and.w	r1, r3, #4
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	430a      	orrs	r2, r1
 80053da:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	69da      	ldr	r2, [r3, #28]
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80053ea:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2200      	movs	r2, #0
 80053f0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2201      	movs	r2, #1
 80053f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80053fa:	2300      	movs	r3, #0
}
 80053fc:	4618      	mov	r0, r3
 80053fe:	3708      	adds	r7, #8
 8005400:	46bd      	mov	sp, r7
 8005402:	bd80      	pop	{r7, pc}

08005404 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b088      	sub	sp, #32
 8005408:	af00      	add	r7, sp, #0
 800540a:	60f8      	str	r0, [r7, #12]
 800540c:	60b9      	str	r1, [r7, #8]
 800540e:	603b      	str	r3, [r7, #0]
 8005410:	4613      	mov	r3, r2
 8005412:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005414:	2300      	movs	r3, #0
 8005416:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800541e:	2b01      	cmp	r3, #1
 8005420:	d101      	bne.n	8005426 <HAL_SPI_Transmit+0x22>
 8005422:	2302      	movs	r3, #2
 8005424:	e11e      	b.n	8005664 <HAL_SPI_Transmit+0x260>
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	2201      	movs	r2, #1
 800542a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800542e:	f7fd ff55 	bl	80032dc <HAL_GetTick>
 8005432:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005434:	88fb      	ldrh	r3, [r7, #6]
 8005436:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800543e:	b2db      	uxtb	r3, r3
 8005440:	2b01      	cmp	r3, #1
 8005442:	d002      	beq.n	800544a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005444:	2302      	movs	r3, #2
 8005446:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005448:	e103      	b.n	8005652 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d002      	beq.n	8005456 <HAL_SPI_Transmit+0x52>
 8005450:	88fb      	ldrh	r3, [r7, #6]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d102      	bne.n	800545c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005456:	2301      	movs	r3, #1
 8005458:	77fb      	strb	r3, [r7, #31]
    goto error;
 800545a:	e0fa      	b.n	8005652 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	2203      	movs	r2, #3
 8005460:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	2200      	movs	r2, #0
 8005468:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	68ba      	ldr	r2, [r7, #8]
 800546e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	88fa      	ldrh	r2, [r7, #6]
 8005474:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	88fa      	ldrh	r2, [r7, #6]
 800547a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	2200      	movs	r2, #0
 8005480:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	2200      	movs	r2, #0
 8005486:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	2200      	movs	r2, #0
 800548c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	2200      	movs	r2, #0
 8005492:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	2200      	movs	r2, #0
 8005498:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	689b      	ldr	r3, [r3, #8]
 800549e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054a2:	d107      	bne.n	80054b4 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	681a      	ldr	r2, [r3, #0]
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80054b2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054be:	2b40      	cmp	r3, #64	; 0x40
 80054c0:	d007      	beq.n	80054d2 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	681a      	ldr	r2, [r3, #0]
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80054d0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	68db      	ldr	r3, [r3, #12]
 80054d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054da:	d14b      	bne.n	8005574 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	685b      	ldr	r3, [r3, #4]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d002      	beq.n	80054ea <HAL_SPI_Transmit+0xe6>
 80054e4:	8afb      	ldrh	r3, [r7, #22]
 80054e6:	2b01      	cmp	r3, #1
 80054e8:	d13e      	bne.n	8005568 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054ee:	881a      	ldrh	r2, [r3, #0]
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054fa:	1c9a      	adds	r2, r3, #2
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005504:	b29b      	uxth	r3, r3
 8005506:	3b01      	subs	r3, #1
 8005508:	b29a      	uxth	r2, r3
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800550e:	e02b      	b.n	8005568 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	689b      	ldr	r3, [r3, #8]
 8005516:	f003 0302 	and.w	r3, r3, #2
 800551a:	2b02      	cmp	r3, #2
 800551c:	d112      	bne.n	8005544 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005522:	881a      	ldrh	r2, [r3, #0]
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800552e:	1c9a      	adds	r2, r3, #2
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005538:	b29b      	uxth	r3, r3
 800553a:	3b01      	subs	r3, #1
 800553c:	b29a      	uxth	r2, r3
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	86da      	strh	r2, [r3, #54]	; 0x36
 8005542:	e011      	b.n	8005568 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005544:	f7fd feca 	bl	80032dc <HAL_GetTick>
 8005548:	4602      	mov	r2, r0
 800554a:	69bb      	ldr	r3, [r7, #24]
 800554c:	1ad3      	subs	r3, r2, r3
 800554e:	683a      	ldr	r2, [r7, #0]
 8005550:	429a      	cmp	r2, r3
 8005552:	d803      	bhi.n	800555c <HAL_SPI_Transmit+0x158>
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	f1b3 3fff 	cmp.w	r3, #4294967295
 800555a:	d102      	bne.n	8005562 <HAL_SPI_Transmit+0x15e>
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d102      	bne.n	8005568 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8005562:	2303      	movs	r3, #3
 8005564:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005566:	e074      	b.n	8005652 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800556c:	b29b      	uxth	r3, r3
 800556e:	2b00      	cmp	r3, #0
 8005570:	d1ce      	bne.n	8005510 <HAL_SPI_Transmit+0x10c>
 8005572:	e04c      	b.n	800560e <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	685b      	ldr	r3, [r3, #4]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d002      	beq.n	8005582 <HAL_SPI_Transmit+0x17e>
 800557c:	8afb      	ldrh	r3, [r7, #22]
 800557e:	2b01      	cmp	r3, #1
 8005580:	d140      	bne.n	8005604 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	330c      	adds	r3, #12
 800558c:	7812      	ldrb	r2, [r2, #0]
 800558e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005594:	1c5a      	adds	r2, r3, #1
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800559e:	b29b      	uxth	r3, r3
 80055a0:	3b01      	subs	r3, #1
 80055a2:	b29a      	uxth	r2, r3
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80055a8:	e02c      	b.n	8005604 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	689b      	ldr	r3, [r3, #8]
 80055b0:	f003 0302 	and.w	r3, r3, #2
 80055b4:	2b02      	cmp	r3, #2
 80055b6:	d113      	bne.n	80055e0 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	330c      	adds	r3, #12
 80055c2:	7812      	ldrb	r2, [r2, #0]
 80055c4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055ca:	1c5a      	adds	r2, r3, #1
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80055d4:	b29b      	uxth	r3, r3
 80055d6:	3b01      	subs	r3, #1
 80055d8:	b29a      	uxth	r2, r3
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	86da      	strh	r2, [r3, #54]	; 0x36
 80055de:	e011      	b.n	8005604 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80055e0:	f7fd fe7c 	bl	80032dc <HAL_GetTick>
 80055e4:	4602      	mov	r2, r0
 80055e6:	69bb      	ldr	r3, [r7, #24]
 80055e8:	1ad3      	subs	r3, r2, r3
 80055ea:	683a      	ldr	r2, [r7, #0]
 80055ec:	429a      	cmp	r2, r3
 80055ee:	d803      	bhi.n	80055f8 <HAL_SPI_Transmit+0x1f4>
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055f6:	d102      	bne.n	80055fe <HAL_SPI_Transmit+0x1fa>
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d102      	bne.n	8005604 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 80055fe:	2303      	movs	r3, #3
 8005600:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005602:	e026      	b.n	8005652 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005608:	b29b      	uxth	r3, r3
 800560a:	2b00      	cmp	r3, #0
 800560c:	d1cd      	bne.n	80055aa <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800560e:	69ba      	ldr	r2, [r7, #24]
 8005610:	6839      	ldr	r1, [r7, #0]
 8005612:	68f8      	ldr	r0, [r7, #12]
 8005614:	f000 f9b2 	bl	800597c <SPI_EndRxTxTransaction>
 8005618:	4603      	mov	r3, r0
 800561a:	2b00      	cmp	r3, #0
 800561c:	d002      	beq.n	8005624 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	2220      	movs	r2, #32
 8005622:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	689b      	ldr	r3, [r3, #8]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d10a      	bne.n	8005642 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800562c:	2300      	movs	r3, #0
 800562e:	613b      	str	r3, [r7, #16]
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	68db      	ldr	r3, [r3, #12]
 8005636:	613b      	str	r3, [r7, #16]
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	689b      	ldr	r3, [r3, #8]
 800563e:	613b      	str	r3, [r7, #16]
 8005640:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005646:	2b00      	cmp	r3, #0
 8005648:	d002      	beq.n	8005650 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800564a:	2301      	movs	r3, #1
 800564c:	77fb      	strb	r3, [r7, #31]
 800564e:	e000      	b.n	8005652 <HAL_SPI_Transmit+0x24e>
  }

error:
 8005650:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	2201      	movs	r2, #1
 8005656:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	2200      	movs	r2, #0
 800565e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005662:	7ffb      	ldrb	r3, [r7, #31]
}
 8005664:	4618      	mov	r0, r3
 8005666:	3720      	adds	r7, #32
 8005668:	46bd      	mov	sp, r7
 800566a:	bd80      	pop	{r7, pc}

0800566c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b088      	sub	sp, #32
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	685b      	ldr	r3, [r3, #4]
 800567a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	689b      	ldr	r3, [r3, #8]
 8005682:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005684:	69bb      	ldr	r3, [r7, #24]
 8005686:	099b      	lsrs	r3, r3, #6
 8005688:	f003 0301 	and.w	r3, r3, #1
 800568c:	2b00      	cmp	r3, #0
 800568e:	d10f      	bne.n	80056b0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005690:	69bb      	ldr	r3, [r7, #24]
 8005692:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005696:	2b00      	cmp	r3, #0
 8005698:	d00a      	beq.n	80056b0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800569a:	69fb      	ldr	r3, [r7, #28]
 800569c:	099b      	lsrs	r3, r3, #6
 800569e:	f003 0301 	and.w	r3, r3, #1
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d004      	beq.n	80056b0 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056aa:	6878      	ldr	r0, [r7, #4]
 80056ac:	4798      	blx	r3
    return;
 80056ae:	e0d8      	b.n	8005862 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80056b0:	69bb      	ldr	r3, [r7, #24]
 80056b2:	085b      	lsrs	r3, r3, #1
 80056b4:	f003 0301 	and.w	r3, r3, #1
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d00a      	beq.n	80056d2 <HAL_SPI_IRQHandler+0x66>
 80056bc:	69fb      	ldr	r3, [r7, #28]
 80056be:	09db      	lsrs	r3, r3, #7
 80056c0:	f003 0301 	and.w	r3, r3, #1
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d004      	beq.n	80056d2 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056cc:	6878      	ldr	r0, [r7, #4]
 80056ce:	4798      	blx	r3
    return;
 80056d0:	e0c7      	b.n	8005862 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80056d2:	69bb      	ldr	r3, [r7, #24]
 80056d4:	095b      	lsrs	r3, r3, #5
 80056d6:	f003 0301 	and.w	r3, r3, #1
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d10c      	bne.n	80056f8 <HAL_SPI_IRQHandler+0x8c>
 80056de:	69bb      	ldr	r3, [r7, #24]
 80056e0:	099b      	lsrs	r3, r3, #6
 80056e2:	f003 0301 	and.w	r3, r3, #1
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d106      	bne.n	80056f8 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80056ea:	69bb      	ldr	r3, [r7, #24]
 80056ec:	0a1b      	lsrs	r3, r3, #8
 80056ee:	f003 0301 	and.w	r3, r3, #1
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	f000 80b5 	beq.w	8005862 <HAL_SPI_IRQHandler+0x1f6>
 80056f8:	69fb      	ldr	r3, [r7, #28]
 80056fa:	095b      	lsrs	r3, r3, #5
 80056fc:	f003 0301 	and.w	r3, r3, #1
 8005700:	2b00      	cmp	r3, #0
 8005702:	f000 80ae 	beq.w	8005862 <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005706:	69bb      	ldr	r3, [r7, #24]
 8005708:	099b      	lsrs	r3, r3, #6
 800570a:	f003 0301 	and.w	r3, r3, #1
 800570e:	2b00      	cmp	r3, #0
 8005710:	d023      	beq.n	800575a <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005718:	b2db      	uxtb	r3, r3
 800571a:	2b03      	cmp	r3, #3
 800571c:	d011      	beq.n	8005742 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005722:	f043 0204 	orr.w	r2, r3, #4
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800572a:	2300      	movs	r3, #0
 800572c:	617b      	str	r3, [r7, #20]
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	68db      	ldr	r3, [r3, #12]
 8005734:	617b      	str	r3, [r7, #20]
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	689b      	ldr	r3, [r3, #8]
 800573c:	617b      	str	r3, [r7, #20]
 800573e:	697b      	ldr	r3, [r7, #20]
 8005740:	e00b      	b.n	800575a <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005742:	2300      	movs	r3, #0
 8005744:	613b      	str	r3, [r7, #16]
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	68db      	ldr	r3, [r3, #12]
 800574c:	613b      	str	r3, [r7, #16]
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	689b      	ldr	r3, [r3, #8]
 8005754:	613b      	str	r3, [r7, #16]
 8005756:	693b      	ldr	r3, [r7, #16]
        return;
 8005758:	e083      	b.n	8005862 <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800575a:	69bb      	ldr	r3, [r7, #24]
 800575c:	095b      	lsrs	r3, r3, #5
 800575e:	f003 0301 	and.w	r3, r3, #1
 8005762:	2b00      	cmp	r3, #0
 8005764:	d014      	beq.n	8005790 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800576a:	f043 0201 	orr.w	r2, r3, #1
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005772:	2300      	movs	r3, #0
 8005774:	60fb      	str	r3, [r7, #12]
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	689b      	ldr	r3, [r3, #8]
 800577c:	60fb      	str	r3, [r7, #12]
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	681a      	ldr	r2, [r3, #0]
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800578c:	601a      	str	r2, [r3, #0]
 800578e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8005790:	69bb      	ldr	r3, [r7, #24]
 8005792:	0a1b      	lsrs	r3, r3, #8
 8005794:	f003 0301 	and.w	r3, r3, #1
 8005798:	2b00      	cmp	r3, #0
 800579a:	d00c      	beq.n	80057b6 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057a0:	f043 0208 	orr.w	r2, r3, #8
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80057a8:	2300      	movs	r3, #0
 80057aa:	60bb      	str	r3, [r7, #8]
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	689b      	ldr	r3, [r3, #8]
 80057b2:	60bb      	str	r3, [r7, #8]
 80057b4:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d050      	beq.n	8005860 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	685a      	ldr	r2, [r3, #4]
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80057cc:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2201      	movs	r2, #1
 80057d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80057d6:	69fb      	ldr	r3, [r7, #28]
 80057d8:	f003 0302 	and.w	r3, r3, #2
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d104      	bne.n	80057ea <HAL_SPI_IRQHandler+0x17e>
 80057e0:	69fb      	ldr	r3, [r7, #28]
 80057e2:	f003 0301 	and.w	r3, r3, #1
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d034      	beq.n	8005854 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	685a      	ldr	r2, [r3, #4]
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f022 0203 	bic.w	r2, r2, #3
 80057f8:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d011      	beq.n	8005826 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005806:	4a18      	ldr	r2, [pc, #96]	; (8005868 <HAL_SPI_IRQHandler+0x1fc>)
 8005808:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800580e:	4618      	mov	r0, r3
 8005810:	f7fe fce8 	bl	80041e4 <HAL_DMA_Abort_IT>
 8005814:	4603      	mov	r3, r0
 8005816:	2b00      	cmp	r3, #0
 8005818:	d005      	beq.n	8005826 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800581e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800582a:	2b00      	cmp	r3, #0
 800582c:	d016      	beq.n	800585c <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005832:	4a0d      	ldr	r2, [pc, #52]	; (8005868 <HAL_SPI_IRQHandler+0x1fc>)
 8005834:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800583a:	4618      	mov	r0, r3
 800583c:	f7fe fcd2 	bl	80041e4 <HAL_DMA_Abort_IT>
 8005840:	4603      	mov	r3, r0
 8005842:	2b00      	cmp	r3, #0
 8005844:	d00a      	beq.n	800585c <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800584a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8005852:	e003      	b.n	800585c <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005854:	6878      	ldr	r0, [r7, #4]
 8005856:	f000 f809 	bl	800586c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800585a:	e000      	b.n	800585e <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800585c:	bf00      	nop
    return;
 800585e:	bf00      	nop
 8005860:	bf00      	nop
  }
}
 8005862:	3720      	adds	r7, #32
 8005864:	46bd      	mov	sp, r7
 8005866:	bd80      	pop	{r7, pc}
 8005868:	08005881 	.word	0x08005881

0800586c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800586c:	b480      	push	{r7}
 800586e:	b083      	sub	sp, #12
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005874:	bf00      	nop
 8005876:	370c      	adds	r7, #12
 8005878:	46bd      	mov	sp, r7
 800587a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587e:	4770      	bx	lr

08005880 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b084      	sub	sp, #16
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800588c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	2200      	movs	r2, #0
 8005892:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	2200      	movs	r2, #0
 8005898:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800589a:	68f8      	ldr	r0, [r7, #12]
 800589c:	f7ff ffe6 	bl	800586c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80058a0:	bf00      	nop
 80058a2:	3710      	adds	r7, #16
 80058a4:	46bd      	mov	sp, r7
 80058a6:	bd80      	pop	{r7, pc}

080058a8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b084      	sub	sp, #16
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	60f8      	str	r0, [r7, #12]
 80058b0:	60b9      	str	r1, [r7, #8]
 80058b2:	603b      	str	r3, [r7, #0]
 80058b4:	4613      	mov	r3, r2
 80058b6:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80058b8:	e04c      	b.n	8005954 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058c0:	d048      	beq.n	8005954 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80058c2:	f7fd fd0b 	bl	80032dc <HAL_GetTick>
 80058c6:	4602      	mov	r2, r0
 80058c8:	69bb      	ldr	r3, [r7, #24]
 80058ca:	1ad3      	subs	r3, r2, r3
 80058cc:	683a      	ldr	r2, [r7, #0]
 80058ce:	429a      	cmp	r2, r3
 80058d0:	d902      	bls.n	80058d8 <SPI_WaitFlagStateUntilTimeout+0x30>
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d13d      	bne.n	8005954 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	685a      	ldr	r2, [r3, #4]
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80058e6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	685b      	ldr	r3, [r3, #4]
 80058ec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80058f0:	d111      	bne.n	8005916 <SPI_WaitFlagStateUntilTimeout+0x6e>
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	689b      	ldr	r3, [r3, #8]
 80058f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058fa:	d004      	beq.n	8005906 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	689b      	ldr	r3, [r3, #8]
 8005900:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005904:	d107      	bne.n	8005916 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	681a      	ldr	r2, [r3, #0]
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005914:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800591a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800591e:	d10f      	bne.n	8005940 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	681a      	ldr	r2, [r3, #0]
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800592e:	601a      	str	r2, [r3, #0]
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	681a      	ldr	r2, [r3, #0]
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800593e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	2201      	movs	r2, #1
 8005944:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	2200      	movs	r2, #0
 800594c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005950:	2303      	movs	r3, #3
 8005952:	e00f      	b.n	8005974 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	689a      	ldr	r2, [r3, #8]
 800595a:	68bb      	ldr	r3, [r7, #8]
 800595c:	4013      	ands	r3, r2
 800595e:	68ba      	ldr	r2, [r7, #8]
 8005960:	429a      	cmp	r2, r3
 8005962:	bf0c      	ite	eq
 8005964:	2301      	moveq	r3, #1
 8005966:	2300      	movne	r3, #0
 8005968:	b2db      	uxtb	r3, r3
 800596a:	461a      	mov	r2, r3
 800596c:	79fb      	ldrb	r3, [r7, #7]
 800596e:	429a      	cmp	r2, r3
 8005970:	d1a3      	bne.n	80058ba <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8005972:	2300      	movs	r3, #0
}
 8005974:	4618      	mov	r0, r3
 8005976:	3710      	adds	r7, #16
 8005978:	46bd      	mov	sp, r7
 800597a:	bd80      	pop	{r7, pc}

0800597c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800597c:	b580      	push	{r7, lr}
 800597e:	b088      	sub	sp, #32
 8005980:	af02      	add	r7, sp, #8
 8005982:	60f8      	str	r0, [r7, #12]
 8005984:	60b9      	str	r1, [r7, #8]
 8005986:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005988:	4b1b      	ldr	r3, [pc, #108]	; (80059f8 <SPI_EndRxTxTransaction+0x7c>)
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4a1b      	ldr	r2, [pc, #108]	; (80059fc <SPI_EndRxTxTransaction+0x80>)
 800598e:	fba2 2303 	umull	r2, r3, r2, r3
 8005992:	0d5b      	lsrs	r3, r3, #21
 8005994:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005998:	fb02 f303 	mul.w	r3, r2, r3
 800599c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	685b      	ldr	r3, [r3, #4]
 80059a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80059a6:	d112      	bne.n	80059ce <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	9300      	str	r3, [sp, #0]
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	2200      	movs	r2, #0
 80059b0:	2180      	movs	r1, #128	; 0x80
 80059b2:	68f8      	ldr	r0, [r7, #12]
 80059b4:	f7ff ff78 	bl	80058a8 <SPI_WaitFlagStateUntilTimeout>
 80059b8:	4603      	mov	r3, r0
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d016      	beq.n	80059ec <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059c2:	f043 0220 	orr.w	r2, r3, #32
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80059ca:	2303      	movs	r3, #3
 80059cc:	e00f      	b.n	80059ee <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80059ce:	697b      	ldr	r3, [r7, #20]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d00a      	beq.n	80059ea <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80059d4:	697b      	ldr	r3, [r7, #20]
 80059d6:	3b01      	subs	r3, #1
 80059d8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	689b      	ldr	r3, [r3, #8]
 80059e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059e4:	2b80      	cmp	r3, #128	; 0x80
 80059e6:	d0f2      	beq.n	80059ce <SPI_EndRxTxTransaction+0x52>
 80059e8:	e000      	b.n	80059ec <SPI_EndRxTxTransaction+0x70>
        break;
 80059ea:	bf00      	nop
  }

  return HAL_OK;
 80059ec:	2300      	movs	r3, #0
}
 80059ee:	4618      	mov	r0, r3
 80059f0:	3718      	adds	r7, #24
 80059f2:	46bd      	mov	sp, r7
 80059f4:	bd80      	pop	{r7, pc}
 80059f6:	bf00      	nop
 80059f8:	20000080 	.word	0x20000080
 80059fc:	165e9f81 	.word	0x165e9f81

08005a00 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b082      	sub	sp, #8
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d101      	bne.n	8005a12 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005a0e:	2301      	movs	r3, #1
 8005a10:	e01d      	b.n	8005a4e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a18:	b2db      	uxtb	r3, r3
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d106      	bne.n	8005a2c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2200      	movs	r2, #0
 8005a22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005a26:	6878      	ldr	r0, [r7, #4]
 8005a28:	f7fd fa74 	bl	8002f14 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2202      	movs	r2, #2
 8005a30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681a      	ldr	r2, [r3, #0]
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	3304      	adds	r3, #4
 8005a3c:	4619      	mov	r1, r3
 8005a3e:	4610      	mov	r0, r2
 8005a40:	f000 fdd8 	bl	80065f4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2201      	movs	r2, #1
 8005a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005a4c:	2300      	movs	r3, #0
}
 8005a4e:	4618      	mov	r0, r3
 8005a50:	3708      	adds	r7, #8
 8005a52:	46bd      	mov	sp, r7
 8005a54:	bd80      	pop	{r7, pc}

08005a56 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005a56:	b480      	push	{r7}
 8005a58:	b085      	sub	sp, #20
 8005a5a:	af00      	add	r7, sp, #0
 8005a5c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	68da      	ldr	r2, [r3, #12]
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f042 0201 	orr.w	r2, r2, #1
 8005a6c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	689b      	ldr	r3, [r3, #8]
 8005a74:	f003 0307 	and.w	r3, r3, #7
 8005a78:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	2b06      	cmp	r3, #6
 8005a7e:	d007      	beq.n	8005a90 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	681a      	ldr	r2, [r3, #0]
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f042 0201 	orr.w	r2, r2, #1
 8005a8e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005a90:	2300      	movs	r3, #0
}
 8005a92:	4618      	mov	r0, r3
 8005a94:	3714      	adds	r7, #20
 8005a96:	46bd      	mov	sp, r7
 8005a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9c:	4770      	bx	lr

08005a9e <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8005a9e:	b580      	push	{r7, lr}
 8005aa0:	b082      	sub	sp, #8
 8005aa2:	af00      	add	r7, sp, #0
 8005aa4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d101      	bne.n	8005ab0 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8005aac:	2301      	movs	r3, #1
 8005aae:	e01d      	b.n	8005aec <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ab6:	b2db      	uxtb	r3, r3
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d106      	bne.n	8005aca <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2200      	movs	r2, #0
 8005ac0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8005ac4:	6878      	ldr	r0, [r7, #4]
 8005ac6:	f000 f815 	bl	8005af4 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2202      	movs	r2, #2
 8005ace:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681a      	ldr	r2, [r3, #0]
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	3304      	adds	r3, #4
 8005ada:	4619      	mov	r1, r3
 8005adc:	4610      	mov	r0, r2
 8005ade:	f000 fd89 	bl	80065f4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2201      	movs	r2, #1
 8005ae6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005aea:	2300      	movs	r3, #0
}
 8005aec:	4618      	mov	r0, r3
 8005aee:	3708      	adds	r7, #8
 8005af0:	46bd      	mov	sp, r7
 8005af2:	bd80      	pop	{r7, pc}

08005af4 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8005af4:	b480      	push	{r7}
 8005af6:	b083      	sub	sp, #12
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8005afc:	bf00      	nop
 8005afe:	370c      	adds	r7, #12
 8005b00:	46bd      	mov	sp, r7
 8005b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b06:	4770      	bx	lr

08005b08 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b084      	sub	sp, #16
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
 8005b10:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	2b0c      	cmp	r3, #12
 8005b16:	d841      	bhi.n	8005b9c <HAL_TIM_OC_Start_IT+0x94>
 8005b18:	a201      	add	r2, pc, #4	; (adr r2, 8005b20 <HAL_TIM_OC_Start_IT+0x18>)
 8005b1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b1e:	bf00      	nop
 8005b20:	08005b55 	.word	0x08005b55
 8005b24:	08005b9d 	.word	0x08005b9d
 8005b28:	08005b9d 	.word	0x08005b9d
 8005b2c:	08005b9d 	.word	0x08005b9d
 8005b30:	08005b67 	.word	0x08005b67
 8005b34:	08005b9d 	.word	0x08005b9d
 8005b38:	08005b9d 	.word	0x08005b9d
 8005b3c:	08005b9d 	.word	0x08005b9d
 8005b40:	08005b79 	.word	0x08005b79
 8005b44:	08005b9d 	.word	0x08005b9d
 8005b48:	08005b9d 	.word	0x08005b9d
 8005b4c:	08005b9d 	.word	0x08005b9d
 8005b50:	08005b8b 	.word	0x08005b8b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	68da      	ldr	r2, [r3, #12]
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f042 0202 	orr.w	r2, r2, #2
 8005b62:	60da      	str	r2, [r3, #12]
      break;
 8005b64:	e01b      	b.n	8005b9e <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	68da      	ldr	r2, [r3, #12]
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f042 0204 	orr.w	r2, r2, #4
 8005b74:	60da      	str	r2, [r3, #12]
      break;
 8005b76:	e012      	b.n	8005b9e <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	68da      	ldr	r2, [r3, #12]
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f042 0208 	orr.w	r2, r2, #8
 8005b86:	60da      	str	r2, [r3, #12]
      break;
 8005b88:	e009      	b.n	8005b9e <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	68da      	ldr	r2, [r3, #12]
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f042 0210 	orr.w	r2, r2, #16
 8005b98:	60da      	str	r2, [r3, #12]
      break;
 8005b9a:	e000      	b.n	8005b9e <HAL_TIM_OC_Start_IT+0x96>
    }

    default:
      break;
 8005b9c:	bf00      	nop
  }

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	2201      	movs	r2, #1
 8005ba4:	6839      	ldr	r1, [r7, #0]
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	f001 f938 	bl	8006e1c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	4a15      	ldr	r2, [pc, #84]	; (8005c08 <HAL_TIM_OC_Start_IT+0x100>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d004      	beq.n	8005bc0 <HAL_TIM_OC_Start_IT+0xb8>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	4a14      	ldr	r2, [pc, #80]	; (8005c0c <HAL_TIM_OC_Start_IT+0x104>)
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d101      	bne.n	8005bc4 <HAL_TIM_OC_Start_IT+0xbc>
 8005bc0:	2301      	movs	r3, #1
 8005bc2:	e000      	b.n	8005bc6 <HAL_TIM_OC_Start_IT+0xbe>
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d007      	beq.n	8005bda <HAL_TIM_OC_Start_IT+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005bd8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	689b      	ldr	r3, [r3, #8]
 8005be0:	f003 0307 	and.w	r3, r3, #7
 8005be4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	2b06      	cmp	r3, #6
 8005bea:	d007      	beq.n	8005bfc <HAL_TIM_OC_Start_IT+0xf4>
  {
    __HAL_TIM_ENABLE(htim);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	681a      	ldr	r2, [r3, #0]
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f042 0201 	orr.w	r2, r2, #1
 8005bfa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005bfc:	2300      	movs	r3, #0
}
 8005bfe:	4618      	mov	r0, r3
 8005c00:	3710      	adds	r7, #16
 8005c02:	46bd      	mov	sp, r7
 8005c04:	bd80      	pop	{r7, pc}
 8005c06:	bf00      	nop
 8005c08:	40010000 	.word	0x40010000
 8005c0c:	40010400 	.word	0x40010400

08005c10 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b082      	sub	sp, #8
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d101      	bne.n	8005c22 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005c1e:	2301      	movs	r3, #1
 8005c20:	e01d      	b.n	8005c5e <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c28:	b2db      	uxtb	r3, r3
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d106      	bne.n	8005c3c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2200      	movs	r2, #0
 8005c32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005c36:	6878      	ldr	r0, [r7, #4]
 8005c38:	f000 f815 	bl	8005c66 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2202      	movs	r2, #2
 8005c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681a      	ldr	r2, [r3, #0]
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	3304      	adds	r3, #4
 8005c4c:	4619      	mov	r1, r3
 8005c4e:	4610      	mov	r0, r2
 8005c50:	f000 fcd0 	bl	80065f4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2201      	movs	r2, #1
 8005c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005c5c:	2300      	movs	r3, #0
}
 8005c5e:	4618      	mov	r0, r3
 8005c60:	3708      	adds	r7, #8
 8005c62:	46bd      	mov	sp, r7
 8005c64:	bd80      	pop	{r7, pc}

08005c66 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005c66:	b480      	push	{r7}
 8005c68:	b083      	sub	sp, #12
 8005c6a:	af00      	add	r7, sp, #0
 8005c6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005c6e:	bf00      	nop
 8005c70:	370c      	adds	r7, #12
 8005c72:	46bd      	mov	sp, r7
 8005c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c78:	4770      	bx	lr

08005c7a <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005c7a:	b580      	push	{r7, lr}
 8005c7c:	b082      	sub	sp, #8
 8005c7e:	af00      	add	r7, sp, #0
 8005c80:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d101      	bne.n	8005c8c <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005c88:	2301      	movs	r3, #1
 8005c8a:	e01d      	b.n	8005cc8 <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c92:	b2db      	uxtb	r3, r3
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d106      	bne.n	8005ca6 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005ca0:	6878      	ldr	r0, [r7, #4]
 8005ca2:	f000 f815 	bl	8005cd0 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2202      	movs	r2, #2
 8005caa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681a      	ldr	r2, [r3, #0]
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	3304      	adds	r3, #4
 8005cb6:	4619      	mov	r1, r3
 8005cb8:	4610      	mov	r0, r2
 8005cba:	f000 fc9b 	bl	80065f4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2201      	movs	r2, #1
 8005cc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005cc6:	2300      	movs	r3, #0
}
 8005cc8:	4618      	mov	r0, r3
 8005cca:	3708      	adds	r7, #8
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	bd80      	pop	{r7, pc}

08005cd0 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8005cd0:	b480      	push	{r7}
 8005cd2:	b083      	sub	sp, #12
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8005cd8:	bf00      	nop
 8005cda:	370c      	adds	r7, #12
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce2:	4770      	bx	lr

08005ce4 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b084      	sub	sp, #16
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
 8005cec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	2b0c      	cmp	r3, #12
 8005cf2:	d841      	bhi.n	8005d78 <HAL_TIM_IC_Start_IT+0x94>
 8005cf4:	a201      	add	r2, pc, #4	; (adr r2, 8005cfc <HAL_TIM_IC_Start_IT+0x18>)
 8005cf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cfa:	bf00      	nop
 8005cfc:	08005d31 	.word	0x08005d31
 8005d00:	08005d79 	.word	0x08005d79
 8005d04:	08005d79 	.word	0x08005d79
 8005d08:	08005d79 	.word	0x08005d79
 8005d0c:	08005d43 	.word	0x08005d43
 8005d10:	08005d79 	.word	0x08005d79
 8005d14:	08005d79 	.word	0x08005d79
 8005d18:	08005d79 	.word	0x08005d79
 8005d1c:	08005d55 	.word	0x08005d55
 8005d20:	08005d79 	.word	0x08005d79
 8005d24:	08005d79 	.word	0x08005d79
 8005d28:	08005d79 	.word	0x08005d79
 8005d2c:	08005d67 	.word	0x08005d67
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	68da      	ldr	r2, [r3, #12]
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f042 0202 	orr.w	r2, r2, #2
 8005d3e:	60da      	str	r2, [r3, #12]
      break;
 8005d40:	e01b      	b.n	8005d7a <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	68da      	ldr	r2, [r3, #12]
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f042 0204 	orr.w	r2, r2, #4
 8005d50:	60da      	str	r2, [r3, #12]
      break;
 8005d52:	e012      	b.n	8005d7a <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	68da      	ldr	r2, [r3, #12]
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f042 0208 	orr.w	r2, r2, #8
 8005d62:	60da      	str	r2, [r3, #12]
      break;
 8005d64:	e009      	b.n	8005d7a <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	68da      	ldr	r2, [r3, #12]
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f042 0210 	orr.w	r2, r2, #16
 8005d74:	60da      	str	r2, [r3, #12]
      break;
 8005d76:	e000      	b.n	8005d7a <HAL_TIM_IC_Start_IT+0x96>
    }

    default:
      break;
 8005d78:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	2201      	movs	r2, #1
 8005d80:	6839      	ldr	r1, [r7, #0]
 8005d82:	4618      	mov	r0, r3
 8005d84:	f001 f84a 	bl	8006e1c <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	689b      	ldr	r3, [r3, #8]
 8005d8e:	f003 0307 	and.w	r3, r3, #7
 8005d92:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	2b06      	cmp	r3, #6
 8005d98:	d007      	beq.n	8005daa <HAL_TIM_IC_Start_IT+0xc6>
  {
    __HAL_TIM_ENABLE(htim);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	681a      	ldr	r2, [r3, #0]
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f042 0201 	orr.w	r2, r2, #1
 8005da8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005daa:	2300      	movs	r3, #0
}
 8005dac:	4618      	mov	r0, r3
 8005dae:	3710      	adds	r7, #16
 8005db0:	46bd      	mov	sp, r7
 8005db2:	bd80      	pop	{r7, pc}

08005db4 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b082      	sub	sp, #8
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
 8005dbc:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d101      	bne.n	8005dc8 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8005dc4:	2301      	movs	r3, #1
 8005dc6:	e02d      	b.n	8005e24 <HAL_TIM_OnePulse_Init+0x70>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005dce:	b2db      	uxtb	r3, r3
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d106      	bne.n	8005de2 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8005ddc:	6878      	ldr	r0, [r7, #4]
 8005dde:	f000 f825 	bl	8005e2c <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2202      	movs	r2, #2
 8005de6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681a      	ldr	r2, [r3, #0]
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	3304      	adds	r3, #4
 8005df2:	4619      	mov	r1, r3
 8005df4:	4610      	mov	r0, r2
 8005df6:	f000 fbfd 	bl	80065f4 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	681a      	ldr	r2, [r3, #0]
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f022 0208 	bic.w	r2, r2, #8
 8005e08:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	6819      	ldr	r1, [r3, #0]
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	683a      	ldr	r2, [r7, #0]
 8005e16:	430a      	orrs	r2, r1
 8005e18:	601a      	str	r2, [r3, #0]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2201      	movs	r2, #1
 8005e1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005e22:	2300      	movs	r3, #0
}
 8005e24:	4618      	mov	r0, r3
 8005e26:	3708      	adds	r7, #8
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	bd80      	pop	{r7, pc}

08005e2c <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8005e2c:	b480      	push	{r7}
 8005e2e:	b083      	sub	sp, #12
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8005e34:	bf00      	nop
 8005e36:	370c      	adds	r7, #12
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3e:	4770      	bx	lr

08005e40 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b082      	sub	sp, #8
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	691b      	ldr	r3, [r3, #16]
 8005e4e:	f003 0302 	and.w	r3, r3, #2
 8005e52:	2b02      	cmp	r3, #2
 8005e54:	d122      	bne.n	8005e9c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	68db      	ldr	r3, [r3, #12]
 8005e5c:	f003 0302 	and.w	r3, r3, #2
 8005e60:	2b02      	cmp	r3, #2
 8005e62:	d11b      	bne.n	8005e9c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f06f 0202 	mvn.w	r2, #2
 8005e6c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2201      	movs	r2, #1
 8005e72:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	699b      	ldr	r3, [r3, #24]
 8005e7a:	f003 0303 	and.w	r3, r3, #3
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d003      	beq.n	8005e8a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005e82:	6878      	ldr	r0, [r7, #4]
 8005e84:	f7fc ff12 	bl	8002cac <HAL_TIM_IC_CaptureCallback>
 8005e88:	e005      	b.n	8005e96 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e8a:	6878      	ldr	r0, [r7, #4]
 8005e8c:	f000 fb9e 	bl	80065cc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e90:	6878      	ldr	r0, [r7, #4]
 8005e92:	f7fc fe5d 	bl	8002b50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2200      	movs	r2, #0
 8005e9a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	691b      	ldr	r3, [r3, #16]
 8005ea2:	f003 0304 	and.w	r3, r3, #4
 8005ea6:	2b04      	cmp	r3, #4
 8005ea8:	d122      	bne.n	8005ef0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	68db      	ldr	r3, [r3, #12]
 8005eb0:	f003 0304 	and.w	r3, r3, #4
 8005eb4:	2b04      	cmp	r3, #4
 8005eb6:	d11b      	bne.n	8005ef0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f06f 0204 	mvn.w	r2, #4
 8005ec0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2202      	movs	r2, #2
 8005ec6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	699b      	ldr	r3, [r3, #24]
 8005ece:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d003      	beq.n	8005ede <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ed6:	6878      	ldr	r0, [r7, #4]
 8005ed8:	f7fc fee8 	bl	8002cac <HAL_TIM_IC_CaptureCallback>
 8005edc:	e005      	b.n	8005eea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ede:	6878      	ldr	r0, [r7, #4]
 8005ee0:	f000 fb74 	bl	80065cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ee4:	6878      	ldr	r0, [r7, #4]
 8005ee6:	f7fc fe33 	bl	8002b50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	2200      	movs	r2, #0
 8005eee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	691b      	ldr	r3, [r3, #16]
 8005ef6:	f003 0308 	and.w	r3, r3, #8
 8005efa:	2b08      	cmp	r3, #8
 8005efc:	d122      	bne.n	8005f44 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	68db      	ldr	r3, [r3, #12]
 8005f04:	f003 0308 	and.w	r3, r3, #8
 8005f08:	2b08      	cmp	r3, #8
 8005f0a:	d11b      	bne.n	8005f44 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f06f 0208 	mvn.w	r2, #8
 8005f14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2204      	movs	r2, #4
 8005f1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	69db      	ldr	r3, [r3, #28]
 8005f22:	f003 0303 	and.w	r3, r3, #3
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d003      	beq.n	8005f32 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f2a:	6878      	ldr	r0, [r7, #4]
 8005f2c:	f7fc febe 	bl	8002cac <HAL_TIM_IC_CaptureCallback>
 8005f30:	e005      	b.n	8005f3e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f32:	6878      	ldr	r0, [r7, #4]
 8005f34:	f000 fb4a 	bl	80065cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f38:	6878      	ldr	r0, [r7, #4]
 8005f3a:	f7fc fe09 	bl	8002b50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2200      	movs	r2, #0
 8005f42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	691b      	ldr	r3, [r3, #16]
 8005f4a:	f003 0310 	and.w	r3, r3, #16
 8005f4e:	2b10      	cmp	r3, #16
 8005f50:	d122      	bne.n	8005f98 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	68db      	ldr	r3, [r3, #12]
 8005f58:	f003 0310 	and.w	r3, r3, #16
 8005f5c:	2b10      	cmp	r3, #16
 8005f5e:	d11b      	bne.n	8005f98 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f06f 0210 	mvn.w	r2, #16
 8005f68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2208      	movs	r2, #8
 8005f6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	69db      	ldr	r3, [r3, #28]
 8005f76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d003      	beq.n	8005f86 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f7e:	6878      	ldr	r0, [r7, #4]
 8005f80:	f7fc fe94 	bl	8002cac <HAL_TIM_IC_CaptureCallback>
 8005f84:	e005      	b.n	8005f92 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f86:	6878      	ldr	r0, [r7, #4]
 8005f88:	f000 fb20 	bl	80065cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f8c:	6878      	ldr	r0, [r7, #4]
 8005f8e:	f7fc fddf 	bl	8002b50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2200      	movs	r2, #0
 8005f96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	691b      	ldr	r3, [r3, #16]
 8005f9e:	f003 0301 	and.w	r3, r3, #1
 8005fa2:	2b01      	cmp	r3, #1
 8005fa4:	d10e      	bne.n	8005fc4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	68db      	ldr	r3, [r3, #12]
 8005fac:	f003 0301 	and.w	r3, r3, #1
 8005fb0:	2b01      	cmp	r3, #1
 8005fb2:	d107      	bne.n	8005fc4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f06f 0201 	mvn.w	r2, #1
 8005fbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005fbe:	6878      	ldr	r0, [r7, #4]
 8005fc0:	f7fc fdb4 	bl	8002b2c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	691b      	ldr	r3, [r3, #16]
 8005fca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fce:	2b80      	cmp	r3, #128	; 0x80
 8005fd0:	d10e      	bne.n	8005ff0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	68db      	ldr	r3, [r3, #12]
 8005fd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fdc:	2b80      	cmp	r3, #128	; 0x80
 8005fde:	d107      	bne.n	8005ff0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005fe8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005fea:	6878      	ldr	r0, [r7, #4]
 8005fec:	f000 ffc2 	bl	8006f74 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	691b      	ldr	r3, [r3, #16]
 8005ff6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ffa:	2b40      	cmp	r3, #64	; 0x40
 8005ffc:	d10e      	bne.n	800601c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	68db      	ldr	r3, [r3, #12]
 8006004:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006008:	2b40      	cmp	r3, #64	; 0x40
 800600a:	d107      	bne.n	800601c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006014:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006016:	6878      	ldr	r0, [r7, #4]
 8006018:	f000 fae2 	bl	80065e0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	691b      	ldr	r3, [r3, #16]
 8006022:	f003 0320 	and.w	r3, r3, #32
 8006026:	2b20      	cmp	r3, #32
 8006028:	d10e      	bne.n	8006048 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	68db      	ldr	r3, [r3, #12]
 8006030:	f003 0320 	and.w	r3, r3, #32
 8006034:	2b20      	cmp	r3, #32
 8006036:	d107      	bne.n	8006048 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f06f 0220 	mvn.w	r2, #32
 8006040:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006042:	6878      	ldr	r0, [r7, #4]
 8006044:	f000 ff8c 	bl	8006f60 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006048:	bf00      	nop
 800604a:	3708      	adds	r7, #8
 800604c:	46bd      	mov	sp, r7
 800604e:	bd80      	pop	{r7, pc}

08006050 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b084      	sub	sp, #16
 8006054:	af00      	add	r7, sp, #0
 8006056:	60f8      	str	r0, [r7, #12]
 8006058:	60b9      	str	r1, [r7, #8]
 800605a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006062:	2b01      	cmp	r3, #1
 8006064:	d101      	bne.n	800606a <HAL_TIM_OC_ConfigChannel+0x1a>
 8006066:	2302      	movs	r3, #2
 8006068:	e04e      	b.n	8006108 <HAL_TIM_OC_ConfigChannel+0xb8>
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	2201      	movs	r2, #1
 800606e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	2202      	movs	r2, #2
 8006076:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2b0c      	cmp	r3, #12
 800607e:	d839      	bhi.n	80060f4 <HAL_TIM_OC_ConfigChannel+0xa4>
 8006080:	a201      	add	r2, pc, #4	; (adr r2, 8006088 <HAL_TIM_OC_ConfigChannel+0x38>)
 8006082:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006086:	bf00      	nop
 8006088:	080060bd 	.word	0x080060bd
 800608c:	080060f5 	.word	0x080060f5
 8006090:	080060f5 	.word	0x080060f5
 8006094:	080060f5 	.word	0x080060f5
 8006098:	080060cb 	.word	0x080060cb
 800609c:	080060f5 	.word	0x080060f5
 80060a0:	080060f5 	.word	0x080060f5
 80060a4:	080060f5 	.word	0x080060f5
 80060a8:	080060d9 	.word	0x080060d9
 80060ac:	080060f5 	.word	0x080060f5
 80060b0:	080060f5 	.word	0x080060f5
 80060b4:	080060f5 	.word	0x080060f5
 80060b8:	080060e7 	.word	0x080060e7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	68b9      	ldr	r1, [r7, #8]
 80060c2:	4618      	mov	r0, r3
 80060c4:	f000 fb36 	bl	8006734 <TIM_OC1_SetConfig>
      break;
 80060c8:	e015      	b.n	80060f6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	68b9      	ldr	r1, [r7, #8]
 80060d0:	4618      	mov	r0, r3
 80060d2:	f000 fb9f 	bl	8006814 <TIM_OC2_SetConfig>
      break;
 80060d6:	e00e      	b.n	80060f6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	68b9      	ldr	r1, [r7, #8]
 80060de:	4618      	mov	r0, r3
 80060e0:	f000 fc0e 	bl	8006900 <TIM_OC3_SetConfig>
      break;
 80060e4:	e007      	b.n	80060f6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	68b9      	ldr	r1, [r7, #8]
 80060ec:	4618      	mov	r0, r3
 80060ee:	f000 fc7b 	bl	80069e8 <TIM_OC4_SetConfig>
      break;
 80060f2:	e000      	b.n	80060f6 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      break;
 80060f4:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	2201      	movs	r2, #1
 80060fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	2200      	movs	r2, #0
 8006102:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006106:	2300      	movs	r3, #0
}
 8006108:	4618      	mov	r0, r3
 800610a:	3710      	adds	r7, #16
 800610c:	46bd      	mov	sp, r7
 800610e:	bd80      	pop	{r7, pc}

08006110 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b084      	sub	sp, #16
 8006114:	af00      	add	r7, sp, #0
 8006116:	60f8      	str	r0, [r7, #12]
 8006118:	60b9      	str	r1, [r7, #8]
 800611a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006122:	2b01      	cmp	r3, #1
 8006124:	d101      	bne.n	800612a <HAL_TIM_IC_ConfigChannel+0x1a>
 8006126:	2302      	movs	r3, #2
 8006128:	e08a      	b.n	8006240 <HAL_TIM_IC_ConfigChannel+0x130>
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	2201      	movs	r2, #1
 800612e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	2202      	movs	r2, #2
 8006136:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d11b      	bne.n	8006178 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	6818      	ldr	r0, [r3, #0]
 8006144:	68bb      	ldr	r3, [r7, #8]
 8006146:	6819      	ldr	r1, [r3, #0]
 8006148:	68bb      	ldr	r3, [r7, #8]
 800614a:	685a      	ldr	r2, [r3, #4]
 800614c:	68bb      	ldr	r3, [r7, #8]
 800614e:	68db      	ldr	r3, [r3, #12]
 8006150:	f000 fca0 	bl	8006a94 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	699a      	ldr	r2, [r3, #24]
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f022 020c 	bic.w	r2, r2, #12
 8006162:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	6999      	ldr	r1, [r3, #24]
 800616a:	68bb      	ldr	r3, [r7, #8]
 800616c:	689a      	ldr	r2, [r3, #8]
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	430a      	orrs	r2, r1
 8006174:	619a      	str	r2, [r3, #24]
 8006176:	e05a      	b.n	800622e <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2b04      	cmp	r3, #4
 800617c:	d11c      	bne.n	80061b8 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	6818      	ldr	r0, [r3, #0]
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	6819      	ldr	r1, [r3, #0]
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	685a      	ldr	r2, [r3, #4]
 800618a:	68bb      	ldr	r3, [r7, #8]
 800618c:	68db      	ldr	r3, [r3, #12]
 800618e:	f000 fd24 	bl	8006bda <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	699a      	ldr	r2, [r3, #24]
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80061a0:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	6999      	ldr	r1, [r3, #24]
 80061a8:	68bb      	ldr	r3, [r7, #8]
 80061aa:	689b      	ldr	r3, [r3, #8]
 80061ac:	021a      	lsls	r2, r3, #8
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	430a      	orrs	r2, r1
 80061b4:	619a      	str	r2, [r3, #24]
 80061b6:	e03a      	b.n	800622e <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2b08      	cmp	r3, #8
 80061bc:	d11b      	bne.n	80061f6 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	6818      	ldr	r0, [r3, #0]
 80061c2:	68bb      	ldr	r3, [r7, #8]
 80061c4:	6819      	ldr	r1, [r3, #0]
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	685a      	ldr	r2, [r3, #4]
 80061ca:	68bb      	ldr	r3, [r7, #8]
 80061cc:	68db      	ldr	r3, [r3, #12]
 80061ce:	f000 fd71 	bl	8006cb4 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	69da      	ldr	r2, [r3, #28]
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f022 020c 	bic.w	r2, r2, #12
 80061e0:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	69d9      	ldr	r1, [r3, #28]
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	689a      	ldr	r2, [r3, #8]
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	430a      	orrs	r2, r1
 80061f2:	61da      	str	r2, [r3, #28]
 80061f4:	e01b      	b.n	800622e <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	6818      	ldr	r0, [r3, #0]
 80061fa:	68bb      	ldr	r3, [r7, #8]
 80061fc:	6819      	ldr	r1, [r3, #0]
 80061fe:	68bb      	ldr	r3, [r7, #8]
 8006200:	685a      	ldr	r2, [r3, #4]
 8006202:	68bb      	ldr	r3, [r7, #8]
 8006204:	68db      	ldr	r3, [r3, #12]
 8006206:	f000 fd91 	bl	8006d2c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	69da      	ldr	r2, [r3, #28]
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006218:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	69d9      	ldr	r1, [r3, #28]
 8006220:	68bb      	ldr	r3, [r7, #8]
 8006222:	689b      	ldr	r3, [r3, #8]
 8006224:	021a      	lsls	r2, r3, #8
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	430a      	orrs	r2, r1
 800622c:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	2201      	movs	r2, #1
 8006232:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	2200      	movs	r2, #0
 800623a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800623e:	2300      	movs	r3, #0
}
 8006240:	4618      	mov	r0, r3
 8006242:	3710      	adds	r7, #16
 8006244:	46bd      	mov	sp, r7
 8006246:	bd80      	pop	{r7, pc}

08006248 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b084      	sub	sp, #16
 800624c:	af00      	add	r7, sp, #0
 800624e:	60f8      	str	r0, [r7, #12]
 8006250:	60b9      	str	r1, [r7, #8]
 8006252:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800625a:	2b01      	cmp	r3, #1
 800625c:	d101      	bne.n	8006262 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800625e:	2302      	movs	r3, #2
 8006260:	e0b4      	b.n	80063cc <HAL_TIM_PWM_ConfigChannel+0x184>
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	2201      	movs	r2, #1
 8006266:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	2202      	movs	r2, #2
 800626e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	2b0c      	cmp	r3, #12
 8006276:	f200 809f 	bhi.w	80063b8 <HAL_TIM_PWM_ConfigChannel+0x170>
 800627a:	a201      	add	r2, pc, #4	; (adr r2, 8006280 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800627c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006280:	080062b5 	.word	0x080062b5
 8006284:	080063b9 	.word	0x080063b9
 8006288:	080063b9 	.word	0x080063b9
 800628c:	080063b9 	.word	0x080063b9
 8006290:	080062f5 	.word	0x080062f5
 8006294:	080063b9 	.word	0x080063b9
 8006298:	080063b9 	.word	0x080063b9
 800629c:	080063b9 	.word	0x080063b9
 80062a0:	08006337 	.word	0x08006337
 80062a4:	080063b9 	.word	0x080063b9
 80062a8:	080063b9 	.word	0x080063b9
 80062ac:	080063b9 	.word	0x080063b9
 80062b0:	08006377 	.word	0x08006377
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	68b9      	ldr	r1, [r7, #8]
 80062ba:	4618      	mov	r0, r3
 80062bc:	f000 fa3a 	bl	8006734 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	699a      	ldr	r2, [r3, #24]
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f042 0208 	orr.w	r2, r2, #8
 80062ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	699a      	ldr	r2, [r3, #24]
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f022 0204 	bic.w	r2, r2, #4
 80062de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	6999      	ldr	r1, [r3, #24]
 80062e6:	68bb      	ldr	r3, [r7, #8]
 80062e8:	691a      	ldr	r2, [r3, #16]
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	430a      	orrs	r2, r1
 80062f0:	619a      	str	r2, [r3, #24]
      break;
 80062f2:	e062      	b.n	80063ba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	68b9      	ldr	r1, [r7, #8]
 80062fa:	4618      	mov	r0, r3
 80062fc:	f000 fa8a 	bl	8006814 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	699a      	ldr	r2, [r3, #24]
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800630e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	699a      	ldr	r2, [r3, #24]
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800631e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	6999      	ldr	r1, [r3, #24]
 8006326:	68bb      	ldr	r3, [r7, #8]
 8006328:	691b      	ldr	r3, [r3, #16]
 800632a:	021a      	lsls	r2, r3, #8
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	430a      	orrs	r2, r1
 8006332:	619a      	str	r2, [r3, #24]
      break;
 8006334:	e041      	b.n	80063ba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	68b9      	ldr	r1, [r7, #8]
 800633c:	4618      	mov	r0, r3
 800633e:	f000 fadf 	bl	8006900 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	69da      	ldr	r2, [r3, #28]
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f042 0208 	orr.w	r2, r2, #8
 8006350:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	69da      	ldr	r2, [r3, #28]
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f022 0204 	bic.w	r2, r2, #4
 8006360:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	69d9      	ldr	r1, [r3, #28]
 8006368:	68bb      	ldr	r3, [r7, #8]
 800636a:	691a      	ldr	r2, [r3, #16]
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	430a      	orrs	r2, r1
 8006372:	61da      	str	r2, [r3, #28]
      break;
 8006374:	e021      	b.n	80063ba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	68b9      	ldr	r1, [r7, #8]
 800637c:	4618      	mov	r0, r3
 800637e:	f000 fb33 	bl	80069e8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	69da      	ldr	r2, [r3, #28]
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006390:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	69da      	ldr	r2, [r3, #28]
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80063a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	69d9      	ldr	r1, [r3, #28]
 80063a8:	68bb      	ldr	r3, [r7, #8]
 80063aa:	691b      	ldr	r3, [r3, #16]
 80063ac:	021a      	lsls	r2, r3, #8
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	430a      	orrs	r2, r1
 80063b4:	61da      	str	r2, [r3, #28]
      break;
 80063b6:	e000      	b.n	80063ba <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80063b8:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	2201      	movs	r2, #1
 80063be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	2200      	movs	r2, #0
 80063c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80063ca:	2300      	movs	r3, #0
}
 80063cc:	4618      	mov	r0, r3
 80063ce:	3710      	adds	r7, #16
 80063d0:	46bd      	mov	sp, r7
 80063d2:	bd80      	pop	{r7, pc}

080063d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b084      	sub	sp, #16
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
 80063dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063e4:	2b01      	cmp	r3, #1
 80063e6:	d101      	bne.n	80063ec <HAL_TIM_ConfigClockSource+0x18>
 80063e8:	2302      	movs	r3, #2
 80063ea:	e0a6      	b.n	800653a <HAL_TIM_ConfigClockSource+0x166>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2201      	movs	r2, #1
 80063f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2202      	movs	r2, #2
 80063f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	689b      	ldr	r3, [r3, #8]
 8006402:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800640a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006412:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	68fa      	ldr	r2, [r7, #12]
 800641a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	2b40      	cmp	r3, #64	; 0x40
 8006422:	d067      	beq.n	80064f4 <HAL_TIM_ConfigClockSource+0x120>
 8006424:	2b40      	cmp	r3, #64	; 0x40
 8006426:	d80b      	bhi.n	8006440 <HAL_TIM_ConfigClockSource+0x6c>
 8006428:	2b10      	cmp	r3, #16
 800642a:	d073      	beq.n	8006514 <HAL_TIM_ConfigClockSource+0x140>
 800642c:	2b10      	cmp	r3, #16
 800642e:	d802      	bhi.n	8006436 <HAL_TIM_ConfigClockSource+0x62>
 8006430:	2b00      	cmp	r3, #0
 8006432:	d06f      	beq.n	8006514 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8006434:	e078      	b.n	8006528 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006436:	2b20      	cmp	r3, #32
 8006438:	d06c      	beq.n	8006514 <HAL_TIM_ConfigClockSource+0x140>
 800643a:	2b30      	cmp	r3, #48	; 0x30
 800643c:	d06a      	beq.n	8006514 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800643e:	e073      	b.n	8006528 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006440:	2b70      	cmp	r3, #112	; 0x70
 8006442:	d00d      	beq.n	8006460 <HAL_TIM_ConfigClockSource+0x8c>
 8006444:	2b70      	cmp	r3, #112	; 0x70
 8006446:	d804      	bhi.n	8006452 <HAL_TIM_ConfigClockSource+0x7e>
 8006448:	2b50      	cmp	r3, #80	; 0x50
 800644a:	d033      	beq.n	80064b4 <HAL_TIM_ConfigClockSource+0xe0>
 800644c:	2b60      	cmp	r3, #96	; 0x60
 800644e:	d041      	beq.n	80064d4 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8006450:	e06a      	b.n	8006528 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006452:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006456:	d066      	beq.n	8006526 <HAL_TIM_ConfigClockSource+0x152>
 8006458:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800645c:	d017      	beq.n	800648e <HAL_TIM_ConfigClockSource+0xba>
      break;
 800645e:	e063      	b.n	8006528 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	6818      	ldr	r0, [r3, #0]
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	6899      	ldr	r1, [r3, #8]
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	685a      	ldr	r2, [r3, #4]
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	68db      	ldr	r3, [r3, #12]
 8006470:	f000 fcb4 	bl	8006ddc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	689b      	ldr	r3, [r3, #8]
 800647a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006482:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	68fa      	ldr	r2, [r7, #12]
 800648a:	609a      	str	r2, [r3, #8]
      break;
 800648c:	e04c      	b.n	8006528 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6818      	ldr	r0, [r3, #0]
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	6899      	ldr	r1, [r3, #8]
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	685a      	ldr	r2, [r3, #4]
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	68db      	ldr	r3, [r3, #12]
 800649e:	f000 fc9d 	bl	8006ddc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	689a      	ldr	r2, [r3, #8]
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80064b0:	609a      	str	r2, [r3, #8]
      break;
 80064b2:	e039      	b.n	8006528 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6818      	ldr	r0, [r3, #0]
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	6859      	ldr	r1, [r3, #4]
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	68db      	ldr	r3, [r3, #12]
 80064c0:	461a      	mov	r2, r3
 80064c2:	f000 fb5b 	bl	8006b7c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	2150      	movs	r1, #80	; 0x50
 80064cc:	4618      	mov	r0, r3
 80064ce:	f000 fc6a 	bl	8006da6 <TIM_ITRx_SetConfig>
      break;
 80064d2:	e029      	b.n	8006528 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	6818      	ldr	r0, [r3, #0]
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	6859      	ldr	r1, [r3, #4]
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	68db      	ldr	r3, [r3, #12]
 80064e0:	461a      	mov	r2, r3
 80064e2:	f000 fbb7 	bl	8006c54 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	2160      	movs	r1, #96	; 0x60
 80064ec:	4618      	mov	r0, r3
 80064ee:	f000 fc5a 	bl	8006da6 <TIM_ITRx_SetConfig>
      break;
 80064f2:	e019      	b.n	8006528 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	6818      	ldr	r0, [r3, #0]
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	6859      	ldr	r1, [r3, #4]
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	68db      	ldr	r3, [r3, #12]
 8006500:	461a      	mov	r2, r3
 8006502:	f000 fb3b 	bl	8006b7c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	2140      	movs	r1, #64	; 0x40
 800650c:	4618      	mov	r0, r3
 800650e:	f000 fc4a 	bl	8006da6 <TIM_ITRx_SetConfig>
      break;
 8006512:	e009      	b.n	8006528 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681a      	ldr	r2, [r3, #0]
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	4619      	mov	r1, r3
 800651e:	4610      	mov	r0, r2
 8006520:	f000 fc41 	bl	8006da6 <TIM_ITRx_SetConfig>
      break;
 8006524:	e000      	b.n	8006528 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8006526:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2201      	movs	r2, #1
 800652c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2200      	movs	r2, #0
 8006534:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006538:	2300      	movs	r3, #0
}
 800653a:	4618      	mov	r0, r3
 800653c:	3710      	adds	r7, #16
 800653e:	46bd      	mov	sp, r7
 8006540:	bd80      	pop	{r7, pc}
	...

08006544 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006544:	b480      	push	{r7}
 8006546:	b085      	sub	sp, #20
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
 800654c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800654e:	2300      	movs	r3, #0
 8006550:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	2b0c      	cmp	r3, #12
 8006556:	d831      	bhi.n	80065bc <HAL_TIM_ReadCapturedValue+0x78>
 8006558:	a201      	add	r2, pc, #4	; (adr r2, 8006560 <HAL_TIM_ReadCapturedValue+0x1c>)
 800655a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800655e:	bf00      	nop
 8006560:	08006595 	.word	0x08006595
 8006564:	080065bd 	.word	0x080065bd
 8006568:	080065bd 	.word	0x080065bd
 800656c:	080065bd 	.word	0x080065bd
 8006570:	0800659f 	.word	0x0800659f
 8006574:	080065bd 	.word	0x080065bd
 8006578:	080065bd 	.word	0x080065bd
 800657c:	080065bd 	.word	0x080065bd
 8006580:	080065a9 	.word	0x080065a9
 8006584:	080065bd 	.word	0x080065bd
 8006588:	080065bd 	.word	0x080065bd
 800658c:	080065bd 	.word	0x080065bd
 8006590:	080065b3 	.word	0x080065b3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800659a:	60fb      	str	r3, [r7, #12]

      break;
 800659c:	e00f      	b.n	80065be <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065a4:	60fb      	str	r3, [r7, #12]

      break;
 80065a6:	e00a      	b.n	80065be <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065ae:	60fb      	str	r3, [r7, #12]

      break;
 80065b0:	e005      	b.n	80065be <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065b8:	60fb      	str	r3, [r7, #12]

      break;
 80065ba:	e000      	b.n	80065be <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80065bc:	bf00      	nop
  }

  return tmpreg;
 80065be:	68fb      	ldr	r3, [r7, #12]
}
 80065c0:	4618      	mov	r0, r3
 80065c2:	3714      	adds	r7, #20
 80065c4:	46bd      	mov	sp, r7
 80065c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ca:	4770      	bx	lr

080065cc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80065cc:	b480      	push	{r7}
 80065ce:	b083      	sub	sp, #12
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80065d4:	bf00      	nop
 80065d6:	370c      	adds	r7, #12
 80065d8:	46bd      	mov	sp, r7
 80065da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065de:	4770      	bx	lr

080065e0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80065e0:	b480      	push	{r7}
 80065e2:	b083      	sub	sp, #12
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80065e8:	bf00      	nop
 80065ea:	370c      	adds	r7, #12
 80065ec:	46bd      	mov	sp, r7
 80065ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f2:	4770      	bx	lr

080065f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80065f4:	b480      	push	{r7}
 80065f6:	b085      	sub	sp, #20
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
 80065fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	4a40      	ldr	r2, [pc, #256]	; (8006708 <TIM_Base_SetConfig+0x114>)
 8006608:	4293      	cmp	r3, r2
 800660a:	d013      	beq.n	8006634 <TIM_Base_SetConfig+0x40>
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006612:	d00f      	beq.n	8006634 <TIM_Base_SetConfig+0x40>
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	4a3d      	ldr	r2, [pc, #244]	; (800670c <TIM_Base_SetConfig+0x118>)
 8006618:	4293      	cmp	r3, r2
 800661a:	d00b      	beq.n	8006634 <TIM_Base_SetConfig+0x40>
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	4a3c      	ldr	r2, [pc, #240]	; (8006710 <TIM_Base_SetConfig+0x11c>)
 8006620:	4293      	cmp	r3, r2
 8006622:	d007      	beq.n	8006634 <TIM_Base_SetConfig+0x40>
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	4a3b      	ldr	r2, [pc, #236]	; (8006714 <TIM_Base_SetConfig+0x120>)
 8006628:	4293      	cmp	r3, r2
 800662a:	d003      	beq.n	8006634 <TIM_Base_SetConfig+0x40>
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	4a3a      	ldr	r2, [pc, #232]	; (8006718 <TIM_Base_SetConfig+0x124>)
 8006630:	4293      	cmp	r3, r2
 8006632:	d108      	bne.n	8006646 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800663a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	685b      	ldr	r3, [r3, #4]
 8006640:	68fa      	ldr	r2, [r7, #12]
 8006642:	4313      	orrs	r3, r2
 8006644:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	4a2f      	ldr	r2, [pc, #188]	; (8006708 <TIM_Base_SetConfig+0x114>)
 800664a:	4293      	cmp	r3, r2
 800664c:	d02b      	beq.n	80066a6 <TIM_Base_SetConfig+0xb2>
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006654:	d027      	beq.n	80066a6 <TIM_Base_SetConfig+0xb2>
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	4a2c      	ldr	r2, [pc, #176]	; (800670c <TIM_Base_SetConfig+0x118>)
 800665a:	4293      	cmp	r3, r2
 800665c:	d023      	beq.n	80066a6 <TIM_Base_SetConfig+0xb2>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	4a2b      	ldr	r2, [pc, #172]	; (8006710 <TIM_Base_SetConfig+0x11c>)
 8006662:	4293      	cmp	r3, r2
 8006664:	d01f      	beq.n	80066a6 <TIM_Base_SetConfig+0xb2>
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	4a2a      	ldr	r2, [pc, #168]	; (8006714 <TIM_Base_SetConfig+0x120>)
 800666a:	4293      	cmp	r3, r2
 800666c:	d01b      	beq.n	80066a6 <TIM_Base_SetConfig+0xb2>
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	4a29      	ldr	r2, [pc, #164]	; (8006718 <TIM_Base_SetConfig+0x124>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d017      	beq.n	80066a6 <TIM_Base_SetConfig+0xb2>
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	4a28      	ldr	r2, [pc, #160]	; (800671c <TIM_Base_SetConfig+0x128>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d013      	beq.n	80066a6 <TIM_Base_SetConfig+0xb2>
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	4a27      	ldr	r2, [pc, #156]	; (8006720 <TIM_Base_SetConfig+0x12c>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d00f      	beq.n	80066a6 <TIM_Base_SetConfig+0xb2>
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	4a26      	ldr	r2, [pc, #152]	; (8006724 <TIM_Base_SetConfig+0x130>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d00b      	beq.n	80066a6 <TIM_Base_SetConfig+0xb2>
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	4a25      	ldr	r2, [pc, #148]	; (8006728 <TIM_Base_SetConfig+0x134>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d007      	beq.n	80066a6 <TIM_Base_SetConfig+0xb2>
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	4a24      	ldr	r2, [pc, #144]	; (800672c <TIM_Base_SetConfig+0x138>)
 800669a:	4293      	cmp	r3, r2
 800669c:	d003      	beq.n	80066a6 <TIM_Base_SetConfig+0xb2>
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	4a23      	ldr	r2, [pc, #140]	; (8006730 <TIM_Base_SetConfig+0x13c>)
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d108      	bne.n	80066b8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80066ae:	683b      	ldr	r3, [r7, #0]
 80066b0:	68db      	ldr	r3, [r3, #12]
 80066b2:	68fa      	ldr	r2, [r7, #12]
 80066b4:	4313      	orrs	r3, r2
 80066b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	695b      	ldr	r3, [r3, #20]
 80066c2:	4313      	orrs	r3, r2
 80066c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	68fa      	ldr	r2, [r7, #12]
 80066ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	689a      	ldr	r2, [r3, #8]
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	681a      	ldr	r2, [r3, #0]
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	4a0a      	ldr	r2, [pc, #40]	; (8006708 <TIM_Base_SetConfig+0x114>)
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d003      	beq.n	80066ec <TIM_Base_SetConfig+0xf8>
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	4a0c      	ldr	r2, [pc, #48]	; (8006718 <TIM_Base_SetConfig+0x124>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d103      	bne.n	80066f4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	691a      	ldr	r2, [r3, #16]
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2201      	movs	r2, #1
 80066f8:	615a      	str	r2, [r3, #20]
}
 80066fa:	bf00      	nop
 80066fc:	3714      	adds	r7, #20
 80066fe:	46bd      	mov	sp, r7
 8006700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006704:	4770      	bx	lr
 8006706:	bf00      	nop
 8006708:	40010000 	.word	0x40010000
 800670c:	40000400 	.word	0x40000400
 8006710:	40000800 	.word	0x40000800
 8006714:	40000c00 	.word	0x40000c00
 8006718:	40010400 	.word	0x40010400
 800671c:	40014000 	.word	0x40014000
 8006720:	40014400 	.word	0x40014400
 8006724:	40014800 	.word	0x40014800
 8006728:	40001800 	.word	0x40001800
 800672c:	40001c00 	.word	0x40001c00
 8006730:	40002000 	.word	0x40002000

08006734 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006734:	b480      	push	{r7}
 8006736:	b087      	sub	sp, #28
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
 800673c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6a1b      	ldr	r3, [r3, #32]
 8006742:	f023 0201 	bic.w	r2, r3, #1
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6a1b      	ldr	r3, [r3, #32]
 800674e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	685b      	ldr	r3, [r3, #4]
 8006754:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	699b      	ldr	r3, [r3, #24]
 800675a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006762:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	f023 0303 	bic.w	r3, r3, #3
 800676a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	68fa      	ldr	r2, [r7, #12]
 8006772:	4313      	orrs	r3, r2
 8006774:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006776:	697b      	ldr	r3, [r7, #20]
 8006778:	f023 0302 	bic.w	r3, r3, #2
 800677c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	689b      	ldr	r3, [r3, #8]
 8006782:	697a      	ldr	r2, [r7, #20]
 8006784:	4313      	orrs	r3, r2
 8006786:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	4a20      	ldr	r2, [pc, #128]	; (800680c <TIM_OC1_SetConfig+0xd8>)
 800678c:	4293      	cmp	r3, r2
 800678e:	d003      	beq.n	8006798 <TIM_OC1_SetConfig+0x64>
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	4a1f      	ldr	r2, [pc, #124]	; (8006810 <TIM_OC1_SetConfig+0xdc>)
 8006794:	4293      	cmp	r3, r2
 8006796:	d10c      	bne.n	80067b2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006798:	697b      	ldr	r3, [r7, #20]
 800679a:	f023 0308 	bic.w	r3, r3, #8
 800679e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	68db      	ldr	r3, [r3, #12]
 80067a4:	697a      	ldr	r2, [r7, #20]
 80067a6:	4313      	orrs	r3, r2
 80067a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80067aa:	697b      	ldr	r3, [r7, #20]
 80067ac:	f023 0304 	bic.w	r3, r3, #4
 80067b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	4a15      	ldr	r2, [pc, #84]	; (800680c <TIM_OC1_SetConfig+0xd8>)
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d003      	beq.n	80067c2 <TIM_OC1_SetConfig+0x8e>
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	4a14      	ldr	r2, [pc, #80]	; (8006810 <TIM_OC1_SetConfig+0xdc>)
 80067be:	4293      	cmp	r3, r2
 80067c0:	d111      	bne.n	80067e6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80067c2:	693b      	ldr	r3, [r7, #16]
 80067c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80067c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80067ca:	693b      	ldr	r3, [r7, #16]
 80067cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80067d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	695b      	ldr	r3, [r3, #20]
 80067d6:	693a      	ldr	r2, [r7, #16]
 80067d8:	4313      	orrs	r3, r2
 80067da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	699b      	ldr	r3, [r3, #24]
 80067e0:	693a      	ldr	r2, [r7, #16]
 80067e2:	4313      	orrs	r3, r2
 80067e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	693a      	ldr	r2, [r7, #16]
 80067ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	68fa      	ldr	r2, [r7, #12]
 80067f0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	685a      	ldr	r2, [r3, #4]
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	697a      	ldr	r2, [r7, #20]
 80067fe:	621a      	str	r2, [r3, #32]
}
 8006800:	bf00      	nop
 8006802:	371c      	adds	r7, #28
 8006804:	46bd      	mov	sp, r7
 8006806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680a:	4770      	bx	lr
 800680c:	40010000 	.word	0x40010000
 8006810:	40010400 	.word	0x40010400

08006814 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006814:	b480      	push	{r7}
 8006816:	b087      	sub	sp, #28
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
 800681c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6a1b      	ldr	r3, [r3, #32]
 8006822:	f023 0210 	bic.w	r2, r3, #16
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6a1b      	ldr	r3, [r3, #32]
 800682e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	685b      	ldr	r3, [r3, #4]
 8006834:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	699b      	ldr	r3, [r3, #24]
 800683a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006842:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800684a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	021b      	lsls	r3, r3, #8
 8006852:	68fa      	ldr	r2, [r7, #12]
 8006854:	4313      	orrs	r3, r2
 8006856:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006858:	697b      	ldr	r3, [r7, #20]
 800685a:	f023 0320 	bic.w	r3, r3, #32
 800685e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	689b      	ldr	r3, [r3, #8]
 8006864:	011b      	lsls	r3, r3, #4
 8006866:	697a      	ldr	r2, [r7, #20]
 8006868:	4313      	orrs	r3, r2
 800686a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	4a22      	ldr	r2, [pc, #136]	; (80068f8 <TIM_OC2_SetConfig+0xe4>)
 8006870:	4293      	cmp	r3, r2
 8006872:	d003      	beq.n	800687c <TIM_OC2_SetConfig+0x68>
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	4a21      	ldr	r2, [pc, #132]	; (80068fc <TIM_OC2_SetConfig+0xe8>)
 8006878:	4293      	cmp	r3, r2
 800687a:	d10d      	bne.n	8006898 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800687c:	697b      	ldr	r3, [r7, #20]
 800687e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006882:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	68db      	ldr	r3, [r3, #12]
 8006888:	011b      	lsls	r3, r3, #4
 800688a:	697a      	ldr	r2, [r7, #20]
 800688c:	4313      	orrs	r3, r2
 800688e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006890:	697b      	ldr	r3, [r7, #20]
 8006892:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006896:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	4a17      	ldr	r2, [pc, #92]	; (80068f8 <TIM_OC2_SetConfig+0xe4>)
 800689c:	4293      	cmp	r3, r2
 800689e:	d003      	beq.n	80068a8 <TIM_OC2_SetConfig+0x94>
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	4a16      	ldr	r2, [pc, #88]	; (80068fc <TIM_OC2_SetConfig+0xe8>)
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d113      	bne.n	80068d0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80068a8:	693b      	ldr	r3, [r7, #16]
 80068aa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80068ae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80068b0:	693b      	ldr	r3, [r7, #16]
 80068b2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80068b6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	695b      	ldr	r3, [r3, #20]
 80068bc:	009b      	lsls	r3, r3, #2
 80068be:	693a      	ldr	r2, [r7, #16]
 80068c0:	4313      	orrs	r3, r2
 80068c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	699b      	ldr	r3, [r3, #24]
 80068c8:	009b      	lsls	r3, r3, #2
 80068ca:	693a      	ldr	r2, [r7, #16]
 80068cc:	4313      	orrs	r3, r2
 80068ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	693a      	ldr	r2, [r7, #16]
 80068d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	68fa      	ldr	r2, [r7, #12]
 80068da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	685a      	ldr	r2, [r3, #4]
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	697a      	ldr	r2, [r7, #20]
 80068e8:	621a      	str	r2, [r3, #32]
}
 80068ea:	bf00      	nop
 80068ec:	371c      	adds	r7, #28
 80068ee:	46bd      	mov	sp, r7
 80068f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f4:	4770      	bx	lr
 80068f6:	bf00      	nop
 80068f8:	40010000 	.word	0x40010000
 80068fc:	40010400 	.word	0x40010400

08006900 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006900:	b480      	push	{r7}
 8006902:	b087      	sub	sp, #28
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
 8006908:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6a1b      	ldr	r3, [r3, #32]
 800690e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6a1b      	ldr	r3, [r3, #32]
 800691a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	685b      	ldr	r3, [r3, #4]
 8006920:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	69db      	ldr	r3, [r3, #28]
 8006926:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800692e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	f023 0303 	bic.w	r3, r3, #3
 8006936:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	68fa      	ldr	r2, [r7, #12]
 800693e:	4313      	orrs	r3, r2
 8006940:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006942:	697b      	ldr	r3, [r7, #20]
 8006944:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006948:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	689b      	ldr	r3, [r3, #8]
 800694e:	021b      	lsls	r3, r3, #8
 8006950:	697a      	ldr	r2, [r7, #20]
 8006952:	4313      	orrs	r3, r2
 8006954:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	4a21      	ldr	r2, [pc, #132]	; (80069e0 <TIM_OC3_SetConfig+0xe0>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d003      	beq.n	8006966 <TIM_OC3_SetConfig+0x66>
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	4a20      	ldr	r2, [pc, #128]	; (80069e4 <TIM_OC3_SetConfig+0xe4>)
 8006962:	4293      	cmp	r3, r2
 8006964:	d10d      	bne.n	8006982 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006966:	697b      	ldr	r3, [r7, #20]
 8006968:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800696c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	68db      	ldr	r3, [r3, #12]
 8006972:	021b      	lsls	r3, r3, #8
 8006974:	697a      	ldr	r2, [r7, #20]
 8006976:	4313      	orrs	r3, r2
 8006978:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800697a:	697b      	ldr	r3, [r7, #20]
 800697c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006980:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	4a16      	ldr	r2, [pc, #88]	; (80069e0 <TIM_OC3_SetConfig+0xe0>)
 8006986:	4293      	cmp	r3, r2
 8006988:	d003      	beq.n	8006992 <TIM_OC3_SetConfig+0x92>
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	4a15      	ldr	r2, [pc, #84]	; (80069e4 <TIM_OC3_SetConfig+0xe4>)
 800698e:	4293      	cmp	r3, r2
 8006990:	d113      	bne.n	80069ba <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006992:	693b      	ldr	r3, [r7, #16]
 8006994:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006998:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800699a:	693b      	ldr	r3, [r7, #16]
 800699c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80069a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	695b      	ldr	r3, [r3, #20]
 80069a6:	011b      	lsls	r3, r3, #4
 80069a8:	693a      	ldr	r2, [r7, #16]
 80069aa:	4313      	orrs	r3, r2
 80069ac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	699b      	ldr	r3, [r3, #24]
 80069b2:	011b      	lsls	r3, r3, #4
 80069b4:	693a      	ldr	r2, [r7, #16]
 80069b6:	4313      	orrs	r3, r2
 80069b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	693a      	ldr	r2, [r7, #16]
 80069be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	68fa      	ldr	r2, [r7, #12]
 80069c4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	685a      	ldr	r2, [r3, #4]
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	697a      	ldr	r2, [r7, #20]
 80069d2:	621a      	str	r2, [r3, #32]
}
 80069d4:	bf00      	nop
 80069d6:	371c      	adds	r7, #28
 80069d8:	46bd      	mov	sp, r7
 80069da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069de:	4770      	bx	lr
 80069e0:	40010000 	.word	0x40010000
 80069e4:	40010400 	.word	0x40010400

080069e8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80069e8:	b480      	push	{r7}
 80069ea:	b087      	sub	sp, #28
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
 80069f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6a1b      	ldr	r3, [r3, #32]
 80069f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6a1b      	ldr	r3, [r3, #32]
 8006a02:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	685b      	ldr	r3, [r3, #4]
 8006a08:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	69db      	ldr	r3, [r3, #28]
 8006a0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	021b      	lsls	r3, r3, #8
 8006a26:	68fa      	ldr	r2, [r7, #12]
 8006a28:	4313      	orrs	r3, r2
 8006a2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006a2c:	693b      	ldr	r3, [r7, #16]
 8006a2e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006a32:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	689b      	ldr	r3, [r3, #8]
 8006a38:	031b      	lsls	r3, r3, #12
 8006a3a:	693a      	ldr	r2, [r7, #16]
 8006a3c:	4313      	orrs	r3, r2
 8006a3e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	4a12      	ldr	r2, [pc, #72]	; (8006a8c <TIM_OC4_SetConfig+0xa4>)
 8006a44:	4293      	cmp	r3, r2
 8006a46:	d003      	beq.n	8006a50 <TIM_OC4_SetConfig+0x68>
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	4a11      	ldr	r2, [pc, #68]	; (8006a90 <TIM_OC4_SetConfig+0xa8>)
 8006a4c:	4293      	cmp	r3, r2
 8006a4e:	d109      	bne.n	8006a64 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006a50:	697b      	ldr	r3, [r7, #20]
 8006a52:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006a56:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	695b      	ldr	r3, [r3, #20]
 8006a5c:	019b      	lsls	r3, r3, #6
 8006a5e:	697a      	ldr	r2, [r7, #20]
 8006a60:	4313      	orrs	r3, r2
 8006a62:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	697a      	ldr	r2, [r7, #20]
 8006a68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	68fa      	ldr	r2, [r7, #12]
 8006a6e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	685a      	ldr	r2, [r3, #4]
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	693a      	ldr	r2, [r7, #16]
 8006a7c:	621a      	str	r2, [r3, #32]
}
 8006a7e:	bf00      	nop
 8006a80:	371c      	adds	r7, #28
 8006a82:	46bd      	mov	sp, r7
 8006a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a88:	4770      	bx	lr
 8006a8a:	bf00      	nop
 8006a8c:	40010000 	.word	0x40010000
 8006a90:	40010400 	.word	0x40010400

08006a94 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006a94:	b480      	push	{r7}
 8006a96:	b087      	sub	sp, #28
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	60f8      	str	r0, [r7, #12]
 8006a9c:	60b9      	str	r1, [r7, #8]
 8006a9e:	607a      	str	r2, [r7, #4]
 8006aa0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	6a1b      	ldr	r3, [r3, #32]
 8006aa6:	f023 0201 	bic.w	r2, r3, #1
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	699b      	ldr	r3, [r3, #24]
 8006ab2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	6a1b      	ldr	r3, [r3, #32]
 8006ab8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	4a28      	ldr	r2, [pc, #160]	; (8006b60 <TIM_TI1_SetConfig+0xcc>)
 8006abe:	4293      	cmp	r3, r2
 8006ac0:	d01b      	beq.n	8006afa <TIM_TI1_SetConfig+0x66>
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ac8:	d017      	beq.n	8006afa <TIM_TI1_SetConfig+0x66>
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	4a25      	ldr	r2, [pc, #148]	; (8006b64 <TIM_TI1_SetConfig+0xd0>)
 8006ace:	4293      	cmp	r3, r2
 8006ad0:	d013      	beq.n	8006afa <TIM_TI1_SetConfig+0x66>
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	4a24      	ldr	r2, [pc, #144]	; (8006b68 <TIM_TI1_SetConfig+0xd4>)
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	d00f      	beq.n	8006afa <TIM_TI1_SetConfig+0x66>
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	4a23      	ldr	r2, [pc, #140]	; (8006b6c <TIM_TI1_SetConfig+0xd8>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d00b      	beq.n	8006afa <TIM_TI1_SetConfig+0x66>
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	4a22      	ldr	r2, [pc, #136]	; (8006b70 <TIM_TI1_SetConfig+0xdc>)
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	d007      	beq.n	8006afa <TIM_TI1_SetConfig+0x66>
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	4a21      	ldr	r2, [pc, #132]	; (8006b74 <TIM_TI1_SetConfig+0xe0>)
 8006aee:	4293      	cmp	r3, r2
 8006af0:	d003      	beq.n	8006afa <TIM_TI1_SetConfig+0x66>
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	4a20      	ldr	r2, [pc, #128]	; (8006b78 <TIM_TI1_SetConfig+0xe4>)
 8006af6:	4293      	cmp	r3, r2
 8006af8:	d101      	bne.n	8006afe <TIM_TI1_SetConfig+0x6a>
 8006afa:	2301      	movs	r3, #1
 8006afc:	e000      	b.n	8006b00 <TIM_TI1_SetConfig+0x6c>
 8006afe:	2300      	movs	r3, #0
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d008      	beq.n	8006b16 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006b04:	697b      	ldr	r3, [r7, #20]
 8006b06:	f023 0303 	bic.w	r3, r3, #3
 8006b0a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006b0c:	697a      	ldr	r2, [r7, #20]
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	4313      	orrs	r3, r2
 8006b12:	617b      	str	r3, [r7, #20]
 8006b14:	e003      	b.n	8006b1e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006b16:	697b      	ldr	r3, [r7, #20]
 8006b18:	f043 0301 	orr.w	r3, r3, #1
 8006b1c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006b1e:	697b      	ldr	r3, [r7, #20]
 8006b20:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006b24:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	011b      	lsls	r3, r3, #4
 8006b2a:	b2db      	uxtb	r3, r3
 8006b2c:	697a      	ldr	r2, [r7, #20]
 8006b2e:	4313      	orrs	r3, r2
 8006b30:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006b32:	693b      	ldr	r3, [r7, #16]
 8006b34:	f023 030a 	bic.w	r3, r3, #10
 8006b38:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006b3a:	68bb      	ldr	r3, [r7, #8]
 8006b3c:	f003 030a 	and.w	r3, r3, #10
 8006b40:	693a      	ldr	r2, [r7, #16]
 8006b42:	4313      	orrs	r3, r2
 8006b44:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	697a      	ldr	r2, [r7, #20]
 8006b4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	693a      	ldr	r2, [r7, #16]
 8006b50:	621a      	str	r2, [r3, #32]
}
 8006b52:	bf00      	nop
 8006b54:	371c      	adds	r7, #28
 8006b56:	46bd      	mov	sp, r7
 8006b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5c:	4770      	bx	lr
 8006b5e:	bf00      	nop
 8006b60:	40010000 	.word	0x40010000
 8006b64:	40000400 	.word	0x40000400
 8006b68:	40000800 	.word	0x40000800
 8006b6c:	40000c00 	.word	0x40000c00
 8006b70:	40010400 	.word	0x40010400
 8006b74:	40014000 	.word	0x40014000
 8006b78:	40001800 	.word	0x40001800

08006b7c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b7c:	b480      	push	{r7}
 8006b7e:	b087      	sub	sp, #28
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	60f8      	str	r0, [r7, #12]
 8006b84:	60b9      	str	r1, [r7, #8]
 8006b86:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	6a1b      	ldr	r3, [r3, #32]
 8006b8c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	6a1b      	ldr	r3, [r3, #32]
 8006b92:	f023 0201 	bic.w	r2, r3, #1
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	699b      	ldr	r3, [r3, #24]
 8006b9e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006ba0:	693b      	ldr	r3, [r7, #16]
 8006ba2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006ba6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	011b      	lsls	r3, r3, #4
 8006bac:	693a      	ldr	r2, [r7, #16]
 8006bae:	4313      	orrs	r3, r2
 8006bb0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006bb2:	697b      	ldr	r3, [r7, #20]
 8006bb4:	f023 030a 	bic.w	r3, r3, #10
 8006bb8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006bba:	697a      	ldr	r2, [r7, #20]
 8006bbc:	68bb      	ldr	r3, [r7, #8]
 8006bbe:	4313      	orrs	r3, r2
 8006bc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	693a      	ldr	r2, [r7, #16]
 8006bc6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	697a      	ldr	r2, [r7, #20]
 8006bcc:	621a      	str	r2, [r3, #32]
}
 8006bce:	bf00      	nop
 8006bd0:	371c      	adds	r7, #28
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd8:	4770      	bx	lr

08006bda <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006bda:	b480      	push	{r7}
 8006bdc:	b087      	sub	sp, #28
 8006bde:	af00      	add	r7, sp, #0
 8006be0:	60f8      	str	r0, [r7, #12]
 8006be2:	60b9      	str	r1, [r7, #8]
 8006be4:	607a      	str	r2, [r7, #4]
 8006be6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	6a1b      	ldr	r3, [r3, #32]
 8006bec:	f023 0210 	bic.w	r2, r3, #16
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	699b      	ldr	r3, [r3, #24]
 8006bf8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	6a1b      	ldr	r3, [r3, #32]
 8006bfe:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006c00:	697b      	ldr	r3, [r7, #20]
 8006c02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c06:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	021b      	lsls	r3, r3, #8
 8006c0c:	697a      	ldr	r2, [r7, #20]
 8006c0e:	4313      	orrs	r3, r2
 8006c10:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006c12:	697b      	ldr	r3, [r7, #20]
 8006c14:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006c18:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	031b      	lsls	r3, r3, #12
 8006c1e:	b29b      	uxth	r3, r3
 8006c20:	697a      	ldr	r2, [r7, #20]
 8006c22:	4313      	orrs	r3, r2
 8006c24:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006c26:	693b      	ldr	r3, [r7, #16]
 8006c28:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006c2c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006c2e:	68bb      	ldr	r3, [r7, #8]
 8006c30:	011b      	lsls	r3, r3, #4
 8006c32:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006c36:	693a      	ldr	r2, [r7, #16]
 8006c38:	4313      	orrs	r3, r2
 8006c3a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	697a      	ldr	r2, [r7, #20]
 8006c40:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	693a      	ldr	r2, [r7, #16]
 8006c46:	621a      	str	r2, [r3, #32]
}
 8006c48:	bf00      	nop
 8006c4a:	371c      	adds	r7, #28
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c52:	4770      	bx	lr

08006c54 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c54:	b480      	push	{r7}
 8006c56:	b087      	sub	sp, #28
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	60f8      	str	r0, [r7, #12]
 8006c5c:	60b9      	str	r1, [r7, #8]
 8006c5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	6a1b      	ldr	r3, [r3, #32]
 8006c64:	f023 0210 	bic.w	r2, r3, #16
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	699b      	ldr	r3, [r3, #24]
 8006c70:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	6a1b      	ldr	r3, [r3, #32]
 8006c76:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006c78:	697b      	ldr	r3, [r7, #20]
 8006c7a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006c7e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	031b      	lsls	r3, r3, #12
 8006c84:	697a      	ldr	r2, [r7, #20]
 8006c86:	4313      	orrs	r3, r2
 8006c88:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006c8a:	693b      	ldr	r3, [r7, #16]
 8006c8c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006c90:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006c92:	68bb      	ldr	r3, [r7, #8]
 8006c94:	011b      	lsls	r3, r3, #4
 8006c96:	693a      	ldr	r2, [r7, #16]
 8006c98:	4313      	orrs	r3, r2
 8006c9a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	697a      	ldr	r2, [r7, #20]
 8006ca0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	693a      	ldr	r2, [r7, #16]
 8006ca6:	621a      	str	r2, [r3, #32]
}
 8006ca8:	bf00      	nop
 8006caa:	371c      	adds	r7, #28
 8006cac:	46bd      	mov	sp, r7
 8006cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb2:	4770      	bx	lr

08006cb4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006cb4:	b480      	push	{r7}
 8006cb6:	b087      	sub	sp, #28
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	60f8      	str	r0, [r7, #12]
 8006cbc:	60b9      	str	r1, [r7, #8]
 8006cbe:	607a      	str	r2, [r7, #4]
 8006cc0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	6a1b      	ldr	r3, [r3, #32]
 8006cc6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	69db      	ldr	r3, [r3, #28]
 8006cd2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	6a1b      	ldr	r3, [r3, #32]
 8006cd8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006cda:	697b      	ldr	r3, [r7, #20]
 8006cdc:	f023 0303 	bic.w	r3, r3, #3
 8006ce0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8006ce2:	697a      	ldr	r2, [r7, #20]
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	4313      	orrs	r3, r2
 8006ce8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006cea:	697b      	ldr	r3, [r7, #20]
 8006cec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006cf0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	011b      	lsls	r3, r3, #4
 8006cf6:	b2db      	uxtb	r3, r3
 8006cf8:	697a      	ldr	r2, [r7, #20]
 8006cfa:	4313      	orrs	r3, r2
 8006cfc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006cfe:	693b      	ldr	r3, [r7, #16]
 8006d00:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8006d04:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006d06:	68bb      	ldr	r3, [r7, #8]
 8006d08:	021b      	lsls	r3, r3, #8
 8006d0a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8006d0e:	693a      	ldr	r2, [r7, #16]
 8006d10:	4313      	orrs	r3, r2
 8006d12:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	697a      	ldr	r2, [r7, #20]
 8006d18:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	693a      	ldr	r2, [r7, #16]
 8006d1e:	621a      	str	r2, [r3, #32]
}
 8006d20:	bf00      	nop
 8006d22:	371c      	adds	r7, #28
 8006d24:	46bd      	mov	sp, r7
 8006d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2a:	4770      	bx	lr

08006d2c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006d2c:	b480      	push	{r7}
 8006d2e:	b087      	sub	sp, #28
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	60f8      	str	r0, [r7, #12]
 8006d34:	60b9      	str	r1, [r7, #8]
 8006d36:	607a      	str	r2, [r7, #4]
 8006d38:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	6a1b      	ldr	r3, [r3, #32]
 8006d3e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	69db      	ldr	r3, [r3, #28]
 8006d4a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	6a1b      	ldr	r3, [r3, #32]
 8006d50:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006d52:	697b      	ldr	r3, [r7, #20]
 8006d54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d58:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	021b      	lsls	r3, r3, #8
 8006d5e:	697a      	ldr	r2, [r7, #20]
 8006d60:	4313      	orrs	r3, r2
 8006d62:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006d64:	697b      	ldr	r3, [r7, #20]
 8006d66:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006d6a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	031b      	lsls	r3, r3, #12
 8006d70:	b29b      	uxth	r3, r3
 8006d72:	697a      	ldr	r2, [r7, #20]
 8006d74:	4313      	orrs	r3, r2
 8006d76:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006d78:	693b      	ldr	r3, [r7, #16]
 8006d7a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8006d7e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006d80:	68bb      	ldr	r3, [r7, #8]
 8006d82:	031b      	lsls	r3, r3, #12
 8006d84:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8006d88:	693a      	ldr	r2, [r7, #16]
 8006d8a:	4313      	orrs	r3, r2
 8006d8c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	697a      	ldr	r2, [r7, #20]
 8006d92:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	693a      	ldr	r2, [r7, #16]
 8006d98:	621a      	str	r2, [r3, #32]
}
 8006d9a:	bf00      	nop
 8006d9c:	371c      	adds	r7, #28
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da4:	4770      	bx	lr

08006da6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006da6:	b480      	push	{r7}
 8006da8:	b085      	sub	sp, #20
 8006daa:	af00      	add	r7, sp, #0
 8006dac:	6078      	str	r0, [r7, #4]
 8006dae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	689b      	ldr	r3, [r3, #8]
 8006db4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dbc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006dbe:	683a      	ldr	r2, [r7, #0]
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	4313      	orrs	r3, r2
 8006dc4:	f043 0307 	orr.w	r3, r3, #7
 8006dc8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	68fa      	ldr	r2, [r7, #12]
 8006dce:	609a      	str	r2, [r3, #8]
}
 8006dd0:	bf00      	nop
 8006dd2:	3714      	adds	r7, #20
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dda:	4770      	bx	lr

08006ddc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006ddc:	b480      	push	{r7}
 8006dde:	b087      	sub	sp, #28
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	60f8      	str	r0, [r7, #12]
 8006de4:	60b9      	str	r1, [r7, #8]
 8006de6:	607a      	str	r2, [r7, #4]
 8006de8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	689b      	ldr	r3, [r3, #8]
 8006dee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006df0:	697b      	ldr	r3, [r7, #20]
 8006df2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006df6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	021a      	lsls	r2, r3, #8
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	431a      	orrs	r2, r3
 8006e00:	68bb      	ldr	r3, [r7, #8]
 8006e02:	4313      	orrs	r3, r2
 8006e04:	697a      	ldr	r2, [r7, #20]
 8006e06:	4313      	orrs	r3, r2
 8006e08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	697a      	ldr	r2, [r7, #20]
 8006e0e:	609a      	str	r2, [r3, #8]
}
 8006e10:	bf00      	nop
 8006e12:	371c      	adds	r7, #28
 8006e14:	46bd      	mov	sp, r7
 8006e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1a:	4770      	bx	lr

08006e1c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006e1c:	b480      	push	{r7}
 8006e1e:	b087      	sub	sp, #28
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	60f8      	str	r0, [r7, #12]
 8006e24:	60b9      	str	r1, [r7, #8]
 8006e26:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006e28:	68bb      	ldr	r3, [r7, #8]
 8006e2a:	f003 031f 	and.w	r3, r3, #31
 8006e2e:	2201      	movs	r2, #1
 8006e30:	fa02 f303 	lsl.w	r3, r2, r3
 8006e34:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	6a1a      	ldr	r2, [r3, #32]
 8006e3a:	697b      	ldr	r3, [r7, #20]
 8006e3c:	43db      	mvns	r3, r3
 8006e3e:	401a      	ands	r2, r3
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	6a1a      	ldr	r2, [r3, #32]
 8006e48:	68bb      	ldr	r3, [r7, #8]
 8006e4a:	f003 031f 	and.w	r3, r3, #31
 8006e4e:	6879      	ldr	r1, [r7, #4]
 8006e50:	fa01 f303 	lsl.w	r3, r1, r3
 8006e54:	431a      	orrs	r2, r3
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	621a      	str	r2, [r3, #32]
}
 8006e5a:	bf00      	nop
 8006e5c:	371c      	adds	r7, #28
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e64:	4770      	bx	lr
	...

08006e68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006e68:	b480      	push	{r7}
 8006e6a:	b085      	sub	sp, #20
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
 8006e70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e78:	2b01      	cmp	r3, #1
 8006e7a:	d101      	bne.n	8006e80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006e7c:	2302      	movs	r3, #2
 8006e7e:	e05a      	b.n	8006f36 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2201      	movs	r2, #1
 8006e84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2202      	movs	r2, #2
 8006e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	685b      	ldr	r3, [r3, #4]
 8006e96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	689b      	ldr	r3, [r3, #8]
 8006e9e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ea6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	68fa      	ldr	r2, [r7, #12]
 8006eae:	4313      	orrs	r3, r2
 8006eb0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	68fa      	ldr	r2, [r7, #12]
 8006eb8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	4a21      	ldr	r2, [pc, #132]	; (8006f44 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006ec0:	4293      	cmp	r3, r2
 8006ec2:	d022      	beq.n	8006f0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ecc:	d01d      	beq.n	8006f0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	4a1d      	ldr	r2, [pc, #116]	; (8006f48 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006ed4:	4293      	cmp	r3, r2
 8006ed6:	d018      	beq.n	8006f0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	4a1b      	ldr	r2, [pc, #108]	; (8006f4c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	d013      	beq.n	8006f0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	4a1a      	ldr	r2, [pc, #104]	; (8006f50 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006ee8:	4293      	cmp	r3, r2
 8006eea:	d00e      	beq.n	8006f0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	4a18      	ldr	r2, [pc, #96]	; (8006f54 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006ef2:	4293      	cmp	r3, r2
 8006ef4:	d009      	beq.n	8006f0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	4a17      	ldr	r2, [pc, #92]	; (8006f58 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006efc:	4293      	cmp	r3, r2
 8006efe:	d004      	beq.n	8006f0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	4a15      	ldr	r2, [pc, #84]	; (8006f5c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006f06:	4293      	cmp	r3, r2
 8006f08:	d10c      	bne.n	8006f24 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006f0a:	68bb      	ldr	r3, [r7, #8]
 8006f0c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006f10:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	685b      	ldr	r3, [r3, #4]
 8006f16:	68ba      	ldr	r2, [r7, #8]
 8006f18:	4313      	orrs	r3, r2
 8006f1a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	68ba      	ldr	r2, [r7, #8]
 8006f22:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2201      	movs	r2, #1
 8006f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2200      	movs	r2, #0
 8006f30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006f34:	2300      	movs	r3, #0
}
 8006f36:	4618      	mov	r0, r3
 8006f38:	3714      	adds	r7, #20
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f40:	4770      	bx	lr
 8006f42:	bf00      	nop
 8006f44:	40010000 	.word	0x40010000
 8006f48:	40000400 	.word	0x40000400
 8006f4c:	40000800 	.word	0x40000800
 8006f50:	40000c00 	.word	0x40000c00
 8006f54:	40010400 	.word	0x40010400
 8006f58:	40014000 	.word	0x40014000
 8006f5c:	40001800 	.word	0x40001800

08006f60 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006f60:	b480      	push	{r7}
 8006f62:	b083      	sub	sp, #12
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006f68:	bf00      	nop
 8006f6a:	370c      	adds	r7, #12
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f72:	4770      	bx	lr

08006f74 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006f74:	b480      	push	{r7}
 8006f76:	b083      	sub	sp, #12
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006f7c:	bf00      	nop
 8006f7e:	370c      	adds	r7, #12
 8006f80:	46bd      	mov	sp, r7
 8006f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f86:	4770      	bx	lr

08006f88 <__libc_init_array>:
 8006f88:	b570      	push	{r4, r5, r6, lr}
 8006f8a:	4e0d      	ldr	r6, [pc, #52]	; (8006fc0 <__libc_init_array+0x38>)
 8006f8c:	4c0d      	ldr	r4, [pc, #52]	; (8006fc4 <__libc_init_array+0x3c>)
 8006f8e:	1ba4      	subs	r4, r4, r6
 8006f90:	10a4      	asrs	r4, r4, #2
 8006f92:	2500      	movs	r5, #0
 8006f94:	42a5      	cmp	r5, r4
 8006f96:	d109      	bne.n	8006fac <__libc_init_array+0x24>
 8006f98:	4e0b      	ldr	r6, [pc, #44]	; (8006fc8 <__libc_init_array+0x40>)
 8006f9a:	4c0c      	ldr	r4, [pc, #48]	; (8006fcc <__libc_init_array+0x44>)
 8006f9c:	f000 f820 	bl	8006fe0 <_init>
 8006fa0:	1ba4      	subs	r4, r4, r6
 8006fa2:	10a4      	asrs	r4, r4, #2
 8006fa4:	2500      	movs	r5, #0
 8006fa6:	42a5      	cmp	r5, r4
 8006fa8:	d105      	bne.n	8006fb6 <__libc_init_array+0x2e>
 8006faa:	bd70      	pop	{r4, r5, r6, pc}
 8006fac:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006fb0:	4798      	blx	r3
 8006fb2:	3501      	adds	r5, #1
 8006fb4:	e7ee      	b.n	8006f94 <__libc_init_array+0xc>
 8006fb6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006fba:	4798      	blx	r3
 8006fbc:	3501      	adds	r5, #1
 8006fbe:	e7f2      	b.n	8006fa6 <__libc_init_array+0x1e>
 8006fc0:	08007034 	.word	0x08007034
 8006fc4:	08007034 	.word	0x08007034
 8006fc8:	08007034 	.word	0x08007034
 8006fcc:	08007038 	.word	0x08007038

08006fd0 <memset>:
 8006fd0:	4402      	add	r2, r0
 8006fd2:	4603      	mov	r3, r0
 8006fd4:	4293      	cmp	r3, r2
 8006fd6:	d100      	bne.n	8006fda <memset+0xa>
 8006fd8:	4770      	bx	lr
 8006fda:	f803 1b01 	strb.w	r1, [r3], #1
 8006fde:	e7f9      	b.n	8006fd4 <memset+0x4>

08006fe0 <_init>:
 8006fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fe2:	bf00      	nop
 8006fe4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fe6:	bc08      	pop	{r3}
 8006fe8:	469e      	mov	lr, r3
 8006fea:	4770      	bx	lr

08006fec <_fini>:
 8006fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fee:	bf00      	nop
 8006ff0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ff2:	bc08      	pop	{r3}
 8006ff4:	469e      	mov	lr, r3
 8006ff6:	4770      	bx	lr
